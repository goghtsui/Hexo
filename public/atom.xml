<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[晓峰的博客 | Beyond Compare]]></title>
  <subtitle><![CDATA[Learning programming, i enjoy it.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://xiaofeng.site/"/>
  <updated>2015-11-27T09:50:47.419Z</updated>
  <id>http://xiaofeng.site/</id>
  
  <author>
    <name><![CDATA[xiaofeng]]></name>
    <email><![CDATA[xiaofeng355@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[通过Swiftype实现hexo站内搜索]]></title>
    <link href="http://xiaofeng.site/2015/11/25/%E9%80%9A%E8%BF%87Swiftype%E5%AE%9E%E7%8E%B0hexo%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/undefined/"/>
    <id>http://xiaofeng.site/2015/11/25/通过Swiftype实现hexo站内搜索/undefined/</id>
    <published>2015-11-25T09:30:54.000Z</published>
    <updated>2015-11-27T09:50:47.419Z</updated>
    <content type="html"><![CDATA[<p>hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。</p>
<h4 id="注册swiftype账号">注册swiftype账号</h4><p>官方地址：<a href="https://swiftype.com/" target="_blank" rel="external">https://swiftype.com/</a></p>
<h4 id="创建搜索引擎">创建搜索引擎</h4><p>注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;<br>1、CREATE AN ENGINE：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg" alt="CREATEANENGINE"><br>2、继续点击创建：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png" alt="create"><br>3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png" alt="enginename"><br>4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png" alt="sitemap"><br>5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png" alt="homepage"><br>5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png" alt="contentdata"><br>6、点击上面的INTEGRATE -&gt; INSTALL SEARCH ，进行一些关键的配置：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png" alt="install"><br>7、点击CHANGE CONFIGURATION：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png" alt="change"><br>8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（<strong>results container</strong> - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png" alt="container"><br>9、配置<strong>Search field</strong>，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png" alt="searchfield"></p>
<p> 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。</p>
<h4 id="hexo主题配置（pacman）">hexo主题配置（pacman）</h4><p>我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。</p>
<p><strong>1、</strong>首先打开<strong>pacman\_config.yml</strong>文件在末尾添加如下代码，提供对swiftype的支持：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swift_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p><strong>2、</strong> 在<strong>hexo\source</strong>目录（注意不是pacman主题的source目录）下<strong>新建一个search文件夹</strong>（如果不存在的），在里面<strong>新建一个index.md</strong>，index.md中写入如下代码：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: search</span><br><span class="line"><span class="header">title: search</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure>
<p><strong>3、</strong> 切换的到<strong>pacman\layout\_partial</strong>目录下，大部分的代码配置都在这里完成的。先<strong>打开header.ejs</strong>，把<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接<strong>copy</strong>过去就行：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span>&lt;%<span class="ruby"> <span class="keyword">if</span>	(theme.swift_search&amp;&amp;theme.swift_search.enable)&#123; </span>%&gt;<span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="title">form</span> <span class="attribute">class</span>=<span class="value">"search"</span> <span class="attribute">action</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.root </span>%&gt;<span class="xml"><span class="tag"><span class="value">search/index.html"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">accept-charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">label</span>&gt;</span>Search<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">class</span>=<span class="value">"st-default-search-input"</span> <span class="attribute">maxlength</span>=<span class="value">"20"</span> <span class="attribute">placeholder</span>=<span class="value">"Search"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span>&lt;%<span class="ruby"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>	(theme.google_cse&amp;&amp;theme.google_cse.enable)&#123; </span>%&gt;<span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="title">form</span> <span class="attribute">class</span>=<span class="value">"search"</span> <span class="attribute">action</span>=<span class="value">"</span></span></span>&lt;%-<span class="ruby"> config.root </span>%&gt;<span class="xml"><span class="tag"><span class="value">search/index.html"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">accept-charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">label</span>&gt;</span>Search<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"search"</span> <span class="attribute">autocomplete</span>=<span class="value">"off"</span> <span class="attribute">name</span>=<span class="value">"q"</span> <span class="attribute">maxlength</span>=<span class="value">"20"</span> <span class="attribute">placeholder</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'search'</span>) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span>&lt;%<span class="ruby"> &#125; <span class="keyword">else</span> &#123; </span>%&gt;<span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="title">form</span> <span class="attribute">class</span>=<span class="value">"search"</span> <span class="attribute">action</span>=<span class="value">"//google.com/search"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">accept-charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">label</span>&gt;</span>Search<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"search"</span> <span class="attribute">name</span>=<span class="value">"q"</span> <span class="attribute">autocomplete</span>=<span class="value">"off"</span> <span class="attribute">maxlength</span>=<span class="value">"20"</span> <span class="attribute">placeholder</span>=<span class="value">"</span></span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'search'</span>) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">name</span>=<span class="value">"q"</span> <span class="attribute">value</span>=<span class="value">"site:</span></span></span>&lt;%-<span class="ruby"> config.url.replace(<span class="regexp">/^https?:\/\//</span>, <span class="string">''</span>) </span>%&gt;<span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">	</span>&lt;%<span class="ruby"> &#125; </span>%&gt;<span class="xml"></span></span><br></pre></td></tr></table></figure></p>
<p><strong>4、</strong>将原来的<strong>search.ejs</strong>中的代码<strong>清空</strong>，<strong>替换为以下的代码</strong>，其实主要就是为了控制结果的显示样式（后期可以自己调整），<strong>注意：将最下面的<code>&lt;script ...   &gt;  ...</code> 部分替换成swiftype给你的js代码</strong>。<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span>&lt;%<span class="ruby"> <span class="keyword">if</span>(theme.swift_search.enable) &#123; </span>%&gt;<span class="xml"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>  <span class="attribute">id</span>=<span class="value">"container"</span> <span class="attribute">class</span>=<span class="value">"page"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"st-results-container"</span> <span class="attribute">class</span>=<span class="value">"st-search-container"</span> <span class="attribute">style</span>=<span class="value">"width:80%"</span>&gt;</span>正在加载搜索结果，请稍等。<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"><span class="class">.st-result-text</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fafafa</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-left</span>:<span class="value"> <span class="number">0.5em</span> solid <span class="hexcolor">#ccc</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transition</span>:<span class="value"> border-left <span class="number">0.45s</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-moz-transition</span>:<span class="value"> border-left <span class="number">0.45s</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-o-transition</span>:<span class="value"> border-left <span class="number">0.45s</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-ms-transition</span>:<span class="value"> border-left <span class="number">0.45s</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">transition</span>:<span class="value"> border-left <span class="number">0.45s</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0.5em</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> only screen and (min-width: <span class="number">768px</span>) </span>&#123;</span><br><span class="line">  <span class="class">.st-result-text</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class">.st-result-text</span><span class="pseudo">:hover</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-left</span>:<span class="value"> <span class="number">0.5em</span> solid <span class="hexcolor">#ea6753</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.st-result-text</span> <span class="tag">h3</span> <span class="tag">a</span><span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#2ca6cb</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.5</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">22px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.st-snippet</span> <span class="tag">em</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> bold</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#ea6753</span></span></span>;</span><br><span class="line">&#125;</span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>);</span><br><span class="line"></span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'w7ca3xWstLkz2UvAeyAJ'</span>,<span class="string">'2.0.0'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span>&lt;%<span class="ruby"> &#125; </span>%&gt;<span class="xml"></span></span><br></pre></td></tr></table></figure></p>
<p><strong>5、</strong>打开<strong>footer.ejs或header.ejs</strong>，在最后一个标签（<code>&lt;/div&gt;</code>）之前添加swiftype分配给你的js代码（同上），我的是：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="list">(<span class="keyword">function</span><span class="list">(<span class="keyword">w</span>,d,<span class="literal">t</span>,u,n,s,e)</span>&#123;w[<span class="quoted">'SwiftypeObject</span>']=n<span class="comment">;w[n]=w[n]||function()&#123;</span></span><br><span class="line">  <span class="list">(<span class="keyword">w</span>[n].q=w[n].q||[])</span>.push<span class="list">(<span class="keyword">arguments</span>)</span><span class="comment">;&#125;;s=d.createElement(t);</span></span><br><span class="line">  e=d.getElementsByTagName<span class="list">(<span class="keyword">t</span>)</span>[<span class="number">0</span>]<span class="comment">;s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</span></span><br><span class="line">  &#125;)</span><span class="list">(<span class="keyword">window</span>,document,<span class="quoted">'script</span>',<span class="quoted">'//s</span>.swiftypecdn.com/install/v2/st.js',<span class="quoted">'_st</span>')</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">  _st<span class="list">(<span class="quoted">'install</span>',<span class="quoted">'w7ca3xWstLkz2UvAeyAJ</span>','<span class="number">2.0</span>.<span class="number">0</span>')</span><span class="comment">;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="blockquote">&gt; hexo clean</span></span><br><span class="line"><span class="blockquote">&gt; hexo d -g</span></span><br></pre></td></tr></table></figure></p>
<p>等部署完成，你就可以打开你的Blog任性的搜索了</p>
<h4 id="推荐">推荐</h4><p>这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，<a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html" target="_blank" rel="external">点我跳转.</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。</p>
<h4 id="注册swiftype账号">注册sw]]>
    </summary>
    
      <category term="hexo" scheme="http://xiaofeng.site/tags/hexo/"/>
    
      <category term="pacman" scheme="http://xiaofeng.site/tags/pacman/"/>
    
      <category term="swiftype" scheme="http://xiaofeng.site/tags/swiftype/"/>
    
      <category term="Hexo" scheme="http://xiaofeng.site/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[Win10]快捷键之Win组合键]]></title>
    <link href="http://xiaofeng.site/2015/11/25/Win10-%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B9%8BWin%E7%BB%84%E5%90%88%E9%94%AE/undefined/"/>
    <id>http://xiaofeng.site/2015/11/25/Win10-快捷键之Win组合键/undefined/</id>
    <published>2015-11-25T01:27:42.000Z</published>
    <updated>2015-12-02T06:39:35.675Z</updated>
    <content type="html"><![CDATA[<h4 id="Win组合键">Win组合键</h4><table>
<thead>
<tr>
<th style="text-align:left">Shortcut</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Windows Key <img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey"></td>
<td style="text-align:left">Open and close the Start menu.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+1,<img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+2,etc.</td>
<td style="text-align:left">Switch to the desktop and launch the nth application in the taskbar. For example, <img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey"> +1 launches whichever application is first in the list, numbered from left to right.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+A</td>
<td style="text-align:left">Open the action center.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+B</td>
<td style="text-align:left">Highlight the notification area.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+C</td>
<td style="text-align:left">Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+D</td>
<td style="text-align:left">Switch between <strong>Show Desktop</strong> (hides/shows any applications and other windows) and the previous state.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+E</td>
<td style="text-align:left">Switch to the desktop and launch File Explorer with the <strong>Quick Access</strong> tab displayed.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+H</td>
<td style="text-align:left">Open the action center.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+I</td>
<td style="text-align:left">Open the action center.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+K</td>
<td style="text-align:left">Open the <strong>Connect</strong> pane to connect to wireless displays and audio devices.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+L</td>
<td style="text-align:left">Lock the device and go to the <strong>Lock</strong> screen.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+M</td>
<td style="text-align:left">Switch to the desktop and minimize all open windows.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+O</td>
<td style="text-align:left">Lock device orientation.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+P</td>
<td style="text-align:left">Open the <strong>Project</strong> pane to search and connect to external displays and projectors.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+R</td>
<td style="text-align:left">Display the <strong>Run</strong> dialog box.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+S</td>
<td style="text-align:left">Launch Cortana.[注2]  Users can begin to type a query immediately.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+T</td>
<td style="text-align:left">Cycle through the apps on the taskbar.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+U</td>
<td style="text-align:left">Launch the Ease of Access Center.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+A</td>
<td style="text-align:left">Cycle through notifications.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+V</td>
<td style="text-align:left">Open the action center.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+X</td>
<td style="text-align:left">Open the advanced menu in the lower-left corner of the screen.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Z</td>
<td style="text-align:left">Open the app-specific command bar.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Enter</td>
<td style="text-align:left">Launch Narrator.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey"> + Space</td>
<td style="text-align:left">Switch input language and keyboard layout.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Tab</td>
<td style="text-align:left">Open Task view.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+,</td>
<td style="text-align:left">Peek at the desktop.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Plus Sign</td>
<td style="text-align:left">Zoom in.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+Minus Sign</td>
<td style="text-align:left">Zoom out.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+ESCAPE</td>
<td style="text-align:left">Close Magnifier.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+LEFT ARROW</td>
<td style="text-align:left">Dock the active window to the left half of the monitor.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+RIGHT ARROW</td>
<td style="text-align:left">Dock the active window to the right half of the monitor.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+UP ARROW</td>
<td style="text-align:left">Maximize the active window vertically and horizontally.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+DOWN ARROW</td>
<td style="text-align:left">Restore or minimize the active window.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT UP ARROW</td>
<td style="text-align:left">Maximize the active window vertically, maintaining the current width.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT DOWN ARROW</td>
<td style="text-align:left">Restore or minimize the active window vertically, maintaining the current width.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT LEFT ARROW</td>
<td style="text-align:left">With multiple monitors, move the active window to the monitor on the left.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+SHIFT RIGHT ARROW</td>
<td style="text-align:left">With multiple monitors, move the active window to the monitor on the right.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+HOME</td>
<td style="text-align:left">Minimize all nonactive windows; restore on second keystroke.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+PRNT SCRN</td>
<td style="text-align:left">Take a picture of the screen and place it in the <strong>Computer&gt;Pictures&gt;Screenshots</strong> folder.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+CTRL+LEFT/RIGHT ARROW</td>
<td style="text-align:left">Switch to the next or previous virtual desktop.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+CTRL+D</td>
<td style="text-align:left">Create a new virtual desktop.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+CTRL_F4</td>
<td style="text-align:left">Close the current virtual desktop.</td>
</tr>
<tr>
<td style="text-align:left"><img src="http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png" alt="WindowsKey">+?</td>
<td style="text-align:left">Launch the Windows Feedback App.</td>
</tr>
</tbody>
</table>
<p>[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.</p>
<p>[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Win组合键">Win组合键</h4><table>
<thead>
<tr>
<th style="text-align:left">Shortcut</th>
<th style="text-align:left">Description</th>
</tr>]]>
    </summary>
    
      <category term="Win10" scheme="http://xiaofeng.site/tags/Win10/"/>
    
      <category term="快捷键" scheme="http://xiaofeng.site/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
      <category term="Win10" scheme="http://xiaofeng.site/categories/Win10/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[推荐]Markdown编辑器(PC+手机端)]]></title>
    <link href="http://xiaofeng.site/2015/11/24/%E6%8E%A8%E8%8D%90-Markdown%E7%BC%96%E8%BE%91%E5%99%A8/undefined/"/>
    <id>http://xiaofeng.site/2015/11/24/推荐-Markdown编辑器/undefined/</id>
    <published>2015-11-24T07:14:12.000Z</published>
    <updated>2015-11-24T09:52:01.173Z</updated>
    <content type="html"><![CDATA[<h3 id="开篇">开篇</h3><p>相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png" alt="gitbub-readme"><br>上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。</p>
<h3 id="在线编辑器_-_马克飞象">在线编辑器 - 马克飞象</h3><p>官方地址：<a href="https://maxiang.io/" target="_blank" rel="external">点我跳转</a><br>这是一个在线的编辑器，它的效果实在是太炫酷了，第一次进去会有一个示例页面，这里的语法足够日后使用了，直接上图：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/markfeixiang.png" alt="markfeixiang"></p>
<h3 id="Windows_-_MarkdownPad">Windows - MarkdownPad</h3><p>官网地址：<a href="http://markdownpad.com/" target="_blank" rel="external">点我跳转</a><br>官方描述：<strong>MarkdownPad is a full-featured Markdown editor for Windows.</strong><br>这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png" alt="markdownpad"></p>
<h3 id="Gmail_-_Markdown_Here">Gmail - Markdown Here</h3><p>这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了<br>Chrome扩展插件：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png" alt="chromeplugin"><br>编辑gmail邮件：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/email-before.png" alt="gmailediter"><br>gmail的预览，点击图一插件按钮即可看到图二预览效果：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png" alt="gmailpluginbutton"><br><img src="http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png" alt="gmailpreview"></p>
<h3 id="Android_-_MarkdownX">Android - MarkdownX</h3><p>在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。<br>下图来自google play：<br><img src="http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png" alt="markdownx"></p>
<p>这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="开篇">开篇</h3><p>相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：<br><img src="http://7xod2d.com1.z]]>
    </summary>
    
      <category term="Markdown" scheme="http://xiaofeng.site/tags/Markdown/"/>
    
      <category term="MarkdownPad" scheme="http://xiaofeng.site/tags/MarkdownPad/"/>
    
      <category term="MarkdownX" scheme="http://xiaofeng.site/tags/MarkdownX/"/>
    
      <category term="马克飞象" scheme="http://xiaofeng.site/tags/%E9%A9%AC%E5%85%8B%E9%A3%9E%E8%B1%A1/"/>
    
      <category term="Markdown" scheme="http://xiaofeng.site/categories/Markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java中静态绑定和动态绑定]]></title>
    <link href="http://xiaofeng.site/2015/11/24/Java%E4%B8%AD%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A%E5%92%8C%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/undefined/"/>
    <id>http://xiaofeng.site/2015/11/24/Java中静态绑定和动态绑定/undefined/</id>
    <published>2015-11-24T02:07:20.000Z</published>
    <updated>2015-11-24T10:35:54.095Z</updated>
    <content type="html"><![CDATA[<h4 id="概念">概念</h4><ul>
<li>程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 <strong>静态绑定</strong>和<strong>动态绑定</strong></li>
<li>动态绑定：在面向过程中又称为<strong>后期绑定</strong>，在程序<strong>运行期</strong>进行了绑定，根据实际情况有选择的进行绑定</li>
<li>静态绑定：在面向过程中又称为<strong>前期绑定</strong>，在程序<strong>编译期</strong>进行了绑定，即在还没运行时，就已经加载到内存<h4 id="对比">对比</h4></li>
<li>动态绑定<ul>
<li>又称为后期绑定</li>
<li>发生在运行时期</li>
<li>虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定</li>
<li>动态绑定使用对象信息来完成</li>
<li>典型应用是方法的重写（Override）</li>
</ul>
</li>
<li><p>静态绑定</p>
<ul>
<li>又称为前期绑定</li>
<li>发生在编译时期</li>
<li>使用private或static或final修饰的变量或者方法（包括构造方法）</li>
<li>静态绑定使用类信息来完成</li>
<li>典型应用是方法重载（Overload）</li>
</ul>
</li>
<li><p>运行期<br>Java的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错</p>
</li>
<li>编译期<br>Java的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序</li>
</ul>
<p>Java字节码的执行有两种方式： </p>
<ul>
<li>即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码</li>
<li>解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。</li>
</ul>
<p>Java程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行</p>
<h4 id="验证">验证</h4><p>关于final、static、private和构造方法是前期绑定的理解：</p>
<ul>
<li><strong>private</strong><br>对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起</li>
<li><strong>final</strong><br>final方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)</li>
<li><strong>static</strong><br>对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏<br>就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法<br>由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。</li>
<li><strong>构造</strong><br>构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类</li>
</ul>
<p><strong>示例代码</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SuperClass</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> String attribute = <span class="string">"from SuperClass"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAttribute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> attribute;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params">SuperClass superClass</span>) </span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">" static method "</span> + superClass.attribute);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubClass</span> <span class="title">extends</span> <span class="title">SuperClass</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> String attribute = <span class="string">"from SubClass"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAttribute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> attribute;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params">SuperClass superClass</span>) </span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">" static method "</span> + superClass.attribute);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">		</span><br><span class="line">		SuperClass superClass = <span class="keyword">new</span> SubClass();</span><br><span class="line">		</span><br><span class="line">		SubClass subClass = <span class="keyword">new</span> SubClass();</span><br><span class="line">		</span><br><span class="line">		superClass.print(superClass);</span><br><span class="line">		</span><br><span class="line">		subClass.print(subClass);</span><br><span class="line">		</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">" attribute "</span> + superClass.attribute);</span><br><span class="line">		</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">" method "</span> + superClass.getAttribute());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>输出结果</strong><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">method</span> <span class="keyword">from</span> <span class="type">SuperClass</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">method</span> <span class="keyword">from</span> <span class="type">SuperClass</span></span><br><span class="line">attribute <span class="keyword">from</span> <span class="type">SuperClass</span></span><br><span class="line"><span class="keyword">method</span> <span class="keyword">from</span> <span class="type">SubClass</span></span><br></pre></td></tr></table></figure></p>
<h4 id="反编译">反编译</h4><p>使用JDK自带的javap命令反编译看看：<br><code>&gt;javap -c SubClass</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">Warning: Binary file SubClass contains com.gogh.bind.SubClass</span><br><span class="line">Compiled from <span class="string">"SubClass.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> com.gogh.bind.SubClass extends com.gogh.bind.SuperClass &#123;</span><br><span class="line">  <span class="keyword">protected</span> java.lang.String attribute;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> com.gogh.bind.SubClass();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial <span class="preprocessor">#<span class="number">10</span>                 <span class="comment">// Method com/gogh/bind/SuperClass."&lt;init&gt;":()V</span></span></span><br><span class="line">       <span class="number">4</span>: aload_0</span><br><span class="line">       <span class="number">5</span>: ldc           <span class="preprocessor">#<span class="number">12</span>                 <span class="comment">// String from SubClass</span></span></span><br><span class="line">       <span class="number">7</span>: putfield      <span class="preprocessor">#<span class="number">14</span>                 <span class="comment">// Field attribute:Ljava/lang/String;</span></span></span><br><span class="line">      <span class="number">10</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getAttribute</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: getfield      <span class="preprocessor">#<span class="number">14</span>                 <span class="comment">// Field attribute:Ljava/lang/String;</span></span></span><br><span class="line">       <span class="number">4</span>: <span class="function">areturn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(com.gogh.bind.SuperClass)</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     <span class="preprocessor">#<span class="number">24</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span></span><br><span class="line">       <span class="number">3</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">30</span>                 <span class="comment">// class java/lang/StringBuilder</span></span></span><br><span class="line">       <span class="number">6</span>: dup</span><br><span class="line">       <span class="number">7</span>: ldc           <span class="preprocessor">#<span class="number">32</span>                 <span class="comment">// String  static method</span></span></span><br><span class="line">       <span class="number">9</span>: invokespecial <span class="preprocessor">#<span class="number">34</span>                 <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</span></span></span><br><span class="line">      <span class="number">12</span>: aload_0</span><br><span class="line">      <span class="number">13</span>: getfield      <span class="preprocessor">#<span class="number">37</span>                 <span class="comment">// Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;</span></span></span><br><span class="line">      <span class="number">16</span>: invokevirtual <span class="preprocessor">#<span class="number">38</span>                 <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">      <span class="number">19</span>: invokevirtual <span class="preprocessor">#<span class="number">42</span>                 <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></span><br><span class="line">      <span class="number">22</span>: invokevirtual <span class="preprocessor">#<span class="number">45</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span></span><br><span class="line">      <span class="number">25</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">1</span>                  <span class="comment">// class com/gogh/bind/SubClass</span></span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: invokespecial <span class="preprocessor">#<span class="number">54</span>                 <span class="comment">// Method "&lt;init&gt;":()V</span></span></span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">1</span>                  <span class="comment">// class com/gogh/bind/SubClass</span></span></span><br><span class="line">      <span class="number">11</span>: dup</span><br><span class="line">      <span class="number">12</span>: invokespecial <span class="preprocessor">#<span class="number">54</span>                 <span class="comment">// Method "&lt;init&gt;":()V</span></span></span><br><span class="line">      <span class="number">15</span>: astore_2</span><br><span class="line">      <span class="number">16</span>: aload_1</span><br><span class="line">      <span class="number">17</span>: invokestatic  <span class="preprocessor">#<span class="number">55</span>                 <span class="comment">// Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V</span></span></span><br><span class="line">      <span class="number">20</span>: aload_2</span><br><span class="line">      <span class="number">21</span>: invokestatic  <span class="preprocessor">#<span class="number">57</span>                 <span class="comment">// Method print:(Lcom/gogh/bind/SuperClass;)V</span></span></span><br><span class="line">      <span class="number">24</span>: getstatic     <span class="preprocessor">#<span class="number">24</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span></span><br><span class="line">      <span class="number">27</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">30</span>                 <span class="comment">// class java/lang/StringBuilder</span></span></span><br><span class="line">      <span class="number">30</span>: dup</span><br><span class="line">      <span class="number">31</span>: ldc           <span class="preprocessor">#<span class="number">58</span>                 <span class="comment">// String  attribute</span></span></span><br><span class="line">      <span class="number">33</span>: invokespecial <span class="preprocessor">#<span class="number">34</span>                 <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</span></span></span><br><span class="line">      <span class="number">36</span>: aload_1</span><br><span class="line">      <span class="number">37</span>: getfield      <span class="preprocessor">#<span class="number">37</span>                 <span class="comment">// Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;</span></span></span><br><span class="line">      <span class="number">40</span>: invokevirtual <span class="preprocessor">#<span class="number">38</span>                 <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">      <span class="number">43</span>: invokevirtual <span class="preprocessor">#<span class="number">42</span>                 <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></span><br><span class="line">      <span class="number">46</span>: invokevirtual <span class="preprocessor">#<span class="number">45</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span></span><br><span class="line">      <span class="number">49</span>: getstatic     <span class="preprocessor">#<span class="number">24</span>                 <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span></span><br><span class="line">      <span class="number">52</span>: <span class="keyword">new</span>           <span class="preprocessor">#<span class="number">30</span>                 <span class="comment">// class java/lang/StringBuilder</span></span></span><br><span class="line">      <span class="number">55</span>: dup</span><br><span class="line">      <span class="number">56</span>: ldc           <span class="preprocessor">#<span class="number">60</span>                 <span class="comment">// String  method</span></span></span><br><span class="line">      <span class="number">58</span>: invokespecial <span class="preprocessor">#<span class="number">34</span>                 <span class="comment">// Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</span></span></span><br><span class="line">      <span class="number">61</span>: aload_1</span><br><span class="line">      <span class="number">62</span>: invokevirtual <span class="preprocessor">#<span class="number">62</span>                 <span class="comment">// Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;</span></span></span><br><span class="line">      <span class="number">65</span>: invokevirtual <span class="preprocessor">#<span class="number">38</span>                 <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span></span><br><span class="line">      <span class="number">68</span>: invokevirtual <span class="preprocessor">#<span class="number">42</span>                 <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span></span><br><span class="line">      <span class="number">71</span>: invokevirtual <span class="preprocessor">#<span class="number">45</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span></span><br><span class="line">      <span class="number">74</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：</p>
<ul>
<li>17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V<br>调用的SuperClass.print方法</li>
<li>21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V</li>
<li>37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;<br>这个也是调用的SuperClass.print方法<h4 id="总结">总结</h4>Java中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。</li>
</ul>
<p>与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。</p>
<p>Java因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。</p>
<p>内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="概念">概念</h4><ul>
<li>程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 <strong>静态绑定</strong>和<strong>动态绑定</strong></li>
<li>动态绑定：在面向过程]]>
    </summary>
    
      <category term="动态绑定" scheme="http://xiaofeng.site/tags/%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A/"/>
    
      <category term="重写" scheme="http://xiaofeng.site/tags/%E9%87%8D%E5%86%99/"/>
    
      <category term="重载" scheme="http://xiaofeng.site/tags/%E9%87%8D%E8%BD%BD/"/>
    
      <category term="静态绑定" scheme="http://xiaofeng.site/tags/%E9%9D%99%E6%80%81%E7%BB%91%E5%AE%9A/"/>
    
      <category term="Java" scheme="http://xiaofeng.site/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java重载匹配优先级]]></title>
    <link href="http://xiaofeng.site/2015/11/23/Java%E9%87%8D%E8%BD%BD%E5%8C%B9%E9%85%8D%E4%BC%98%E5%85%88%E7%BA%A7/undefined/"/>
    <id>http://xiaofeng.site/2015/11/23/Java重载匹配优先级/undefined/</id>
    <published>2015-11-23T08:31:05.000Z</published>
    <updated>2015-11-24T09:59:07.532Z</updated>
    <content type="html"><![CDATA[<h4 id="前情提要">前情提要</h4><p>Java面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；</p>
<h4 id="示例代码">示例代码</h4><p>无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverloadPriority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = Object"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = int"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = long"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span> arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = double"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">float</span> arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = float"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = char"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Character arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = Character"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span>... arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = char..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Serializable arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = Serializable"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Comparable&lt;?&gt; arg)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"parameter type = Comparable"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// int</span></span><br><span class="line">		print(<span class="string">'g'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。</p>
<p>main方法执行print(‘g’)，输出结果毫无疑问就是：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">parameter</span> <span class="keyword">type</span> = <span class="built_in">char</span></span><br></pre></td></tr></table></figure></p>
<p>那么注释掉print(char arg)这个方法，会输出什么结果呢？<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">parameter</span> <span class="keyword">type</span> = <span class="built_in">int</span></span><br></pre></td></tr></table></figure></p>
<p>那么注释掉print(int arg)这个方法，会输出什么结果呢？<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">parameter</span> <span class="typedef"><span class="keyword">type</span> = long</span></span><br></pre></td></tr></table></figure></p>
<p>这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道’g’除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -&gt; int -&gt; long -&gt; double -&gt; float -&gt; Character -&gt; Serializable or Comparable -&gt; Object -&gt; char…(变长参数，即char元素数组)</p>
<h4 id="总结">总结</h4><p>遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型</p>
<h4 id="注意">注意</h4><ul>
<li>变长参数的重载优先级最低</li>
<li>char到byte或short之间的转换是不安全的</li>
<li>在Serializable和Comparable同时存在的情况下会报异常：<br>  The method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，<br>  因为Character实现了Serializable和Comparable这两个接口，<br>  而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，<br>  提示类型模糊，无法正常编译）</li>
<li>接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配</li>
</ul>
<p>所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前情提要">前情提要</h4><p>Java面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；</p>
<h4 id="示例代码">示例代码</h4><p>无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：<br><figu]]>
    </summary>
    
      <category term="java" scheme="http://xiaofeng.site/tags/java/"/>
    
      <category term="重载" scheme="http://xiaofeng.site/tags/%E9%87%8D%E8%BD%BD/"/>
    
      <category term="Java" scheme="http://xiaofeng.site/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Android Log小记]]></title>
    <link href="http://xiaofeng.site/2015/11/18/%E5%85%B3%E4%BA%8EAndroid-Log%E5%B0%8F%E8%AE%B0/undefined/"/>
    <id>http://xiaofeng.site/2015/11/18/关于Android-Log小记/undefined/</id>
    <published>2015-11-18T08:38:59.000Z</published>
    <updated>2015-11-19T02:03:24.660Z</updated>
    <content type="html"><![CDATA[<p>作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？<br><a id="more"></a></p>
<h3 id="日志形式">日志形式</h3><ul>
<li><strong>Java形式</strong><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.<span class="keyword">out</span>.println(<span class="string">" log for test "</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这个一般不提倡使用</p>
<ul>
<li><strong>Android Log</strong><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Log</span><span class="built_in">.</span>d(<span class="built_in">TAG</span>, <span class="string">" log for test "</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这个是Android标准的日志输出类：android.util.Log</p>
<h3 id="TAG定义">TAG定义</h3><p>关于TAG的命名简单说一下，基本上有以下几种形式：</p>
<ul>
<li><strong>人名</strong> <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Log</span>.<span class="literal">d</span>(<span class="string">"gogh"</span> <span class="string">" log for test "</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>与代码无关，无法定位日志的位置</p>
<ul>
<li><strong>类名</strong><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static final <span class="type">String</span> <span class="keyword">TAG</span> <span class="title">= LogUtils</span>.class.getSimpleName();</span><br><span class="line">Log.d(<span class="operator">TAG</span>, <span class="string">" log for test "</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。</p>
<h3 id="TAG定义推荐">TAG定义推荐</h3><p>那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Utils &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> TAG = <span class="string">"Utils"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> setText(<span class="keyword">String</span> <span class="built_in">text</span>)&#123;</span><br><span class="line">        Logger.d(TAG, <span class="string">" setText text = "</span> + <span class="built_in">text</span> );</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>基本的规范是：</p>
<ul>
<li><strong>日志所在类</strong></li>
<li><strong>日志所在的方法</strong></li>
<li><strong>基本的信息</strong><br>这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。</li>
</ul>
<h3 id="屏蔽日志">屏蔽日志</h3><p>我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。</p>
<p>#####运行时屏蔽<br>这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> Logger &#123;</span><br><span class="line"></span><br><span class="line">    private static final boolean ENABLE = "true;</span><br><span class="line">    </span><br><span class="line">    public static void <span class="literal">d</span>(String tag, String message)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ENABLE)&#123;</span><br><span class="line">            android.util.<span class="keyword">Log</span>.<span class="literal">d</span>(tag, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Logger.<span class="literal">d</span>(XXX, <span class="string">"VERSION = "</span> + Build.<span class="keyword">VERSION</span>.SDK_INT);</span><br></pre></td></tr></table></figure></p>
<p>编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。</p>
<h5 id="编译期屏蔽">编译期屏蔽</h5><p>这个就很简单了，在打包发布的时候加入代码混淆，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-assumenosideeffects class com.gogh.Logger&#123;&#10;    public static *** i(...);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-assumenosideeffects class android.util.Log &#123;&#10;    public static *** v(...);&#10;    public static *** d(...);&#10;    public static *** i(...);&#10;    public static *** w(...);&#10;    public static *** e(...);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样就可以达到平日日志输出的效果了</p>
<h3 id="对比描述">对比描述</h3><p>运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已</p>
<p>编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段</p>
<h3 id="总结">总结</h3><p>理论上编译期屏蔽相对于运行期屏蔽更优</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？<br>]]>
    
    </summary>
    
      <category term="Log" scheme="http://xiaofeng.site/tags/Log/"/>
    
      <category term="Android" scheme="http://xiaofeng.site/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决Android Studio中Terminal无法输入的问题]]></title>
    <link href="http://xiaofeng.site/2015/11/16/%E8%A7%A3%E5%86%B3Android-Studio%E4%B8%ADTerminal%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/undefined/"/>
    <id>http://xiaofeng.site/2015/11/16/解决Android-Studio中Terminal无法输入的问题/undefined/</id>
    <published>2015-11-16T02:14:09.000Z</published>
    <updated>2015-11-18T07:02:56.617Z</updated>
    <content type="html"><![CDATA[<h3 id="问题描述：">问题描述：</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">Windows</span>系统下<span class="keyword">Android </span>Studio中的Terminal无法获取焦点，不能输入文字。</span><br></pre></td></tr></table></figure>
<h3 id="问题原因：">问题原因：</h3><p>这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非<br>常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于<br>C:\Windows\System32\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导<br>致了这里描述的问题。</p>
<h3 id="解决方案：">解决方案：</h3><p>下面给出具体的操作步骤，有图有真相：</p>
<p>1、win+R组合键打开运行窗口，输入cmd ，点击OK</p>
<p><img src="http://7xod2d.com1.z0.glb.clouddn.com/cmd.png" alt="cmd窗口"></p>
<p>2、在出现的cmd窗口中，右键点击标题栏-&gt;Properties，出现如下窗口：</p>
<p><img src="http://7xod2d.com1.z0.glb.clouddn.com/settings.png" alt="Properties窗口"></p>
<p>3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="问题描述：">问题描述：</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td c]]>
    </summary>
    
      <category term="Android Studio" scheme="http://xiaofeng.site/tags/Android-Studio/"/>
    
      <category term="Terminal" scheme="http://xiaofeng.site/tags/Terminal/"/>
    
      <category term="Android" scheme="http://xiaofeng.site/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单实现ButterKnife中的injectView的方案]]></title>
    <link href="http://xiaofeng.site/2015/11/13/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0ButterKnife%E4%B8%AD%E7%9A%84injectView%E7%9A%84%E6%96%B9%E6%A1%88/undefined/"/>
    <id>http://xiaofeng.site/2015/11/13/简单实现ButterKnife中的injectView的方案/undefined/</id>
    <published>2015-11-13T01:37:14.000Z</published>
    <updated>2015-11-18T07:03:27.728Z</updated>
    <content type="html"><![CDATA[<p>首先说这里面用的知识点，注解、反射。</p>
<p>Android中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。</p>
<a id="more"></a>
<h2 id="1、注解声明">1、注解声明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 表示用在字段上</span><br><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">// 表示在生命周期是运行时</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">//注解类，实现findViewById功能</span><br><span class="line">public @interface FindView &#123;</span><br><span class="line">	int findViewByResId() default <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、反射注入">2、反射注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Class&lt;?&gt; clazz = this.getClass();</span><br><span class="line">// 获得Activity中声明的字段</span><br><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">//遍历所有字段</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">// 是否有我们自定义的注解类标志</span><br><span class="line">  <span class="keyword">if</span> (field.isAnnotationPresent(FindView.class)) &#123;</span><br><span class="line">  	   FindView inject = field.getAnnotation(FindView.class);</span><br><span class="line">      int mId = inject.findViewByResId();</span><br><span class="line">      View view;</span><br><span class="line">      <span class="keyword">if</span> (mId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          view = findViewById(mId);</span><br><span class="line">          field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">          field.set(this, view);// 给我们要找的字段设置值</span><br><span class="line">      &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、测试">3、测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@FindView(findViewByResId = R.id.id_text)</span><br><span class="line">private TextView mText;</span><br></pre></td></tr></table></figure>
<p>总结：<br>是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。<br>个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先说这里面用的知识点，注解、反射。</p>
<p>Android中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。</p>]]>
    
    </summary>
    
      <category term="ButterKnife" scheme="http://xiaofeng.site/tags/ButterKnife/"/>
    
      <category term="InjectView" scheme="http://xiaofeng.site/tags/InjectView/"/>
    
      <category term="annotation" scheme="http://xiaofeng.site/tags/annotation/"/>
    
      <category term="Android" scheme="http://xiaofeng.site/categories/Android/"/>
    
  </entry>
  
</feed>
