{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/logo_new.png","path":"img/logo_new.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"c9baa2bf63e2c8d1d9e6c7e33863230ca9bcb067","modified":1476082424457},{"_id":"source/CNAME","hash":"1828d00adc09512a7927e0709b81f19da9ac2b9f","modified":1476082424459},{"_id":"source/baidu_verify_T1QaggfO1O.html","hash":"f951231d14f6dfa523c6e9bc3c7e56e6c8042a10","modified":1476082424542},{"_id":"source/baidu_verify_hg1tugxzZf.html","hash":"a4dad235957d6cd8faa79211edd767248fbdf9f7","modified":1476082424542},{"_id":"source/googlea507cc85570ed219.html","hash":"cae5407e2244783ec3832bfcbfc808701df0e523","modified":1476082424548},{"_id":"source/love.html","hash":"d73bf06554bdcb244578c16dc8e62f3e501f07cb","modified":1476082424548},{"_id":"themes/indigo/README.md","hash":"c7d152970851b34476df81bbe19f98e0dca396c5","modified":1476070389422},{"_id":"themes/indigo/_config.yml","hash":"1fa86bdecc3ddbeb77f423af347fa3e22dd28123","modified":1476279856529},{"_id":"themes/indigo/package.json","hash":"e16e74c5637692fdf7f388327c254eae1e880c1d","modified":1476070389583},{"_id":"source/_posts/Android-Material-Design-Floating-Labels-for-EditText.md","hash":"939df90c8ab5127222e0ef441d1b313b64b378c8","modified":1476082424470},{"_id":"source/_posts/Android-Material-Design-Snackbar.md","hash":"f3c6bfcff23492514922364fbaac7bf13b64a5b6","modified":1476082424480},{"_id":"source/_posts/Android-Material-Design-Tabs.md","hash":"658b435a37b889c31ed2711a58bb5a00f4fdfdd2","modified":1476082424487},{"_id":"source/_posts/Android-Studio-2-2-新特性.md","hash":"436def4d9e55a8de3d841274cbae7f4f09305fd2","modified":1476179778870},{"_id":"source/_posts/Android-Material-Design入门.md","hash":"9149d4291a9eae8679f5375831e936304a9ec43d","modified":1476082424493},{"_id":"source/_posts/Android-Studio-Error-running-app-Instant-Run-requires-Tools-Android-Enable-ADB-integration-to-be-enabled.md","hash":"cccec6b02c05994d676ad3cbf1fb813ec5a19054","modified":1476861822648},{"_id":"source/_posts/Android-Studio-Intellij-翻译插件-Easy Translation.md","hash":"8886054e0013da03032f10e1475cc87828364a3e","modified":1476087355313},{"_id":"source/_posts/Android-Studio-Tips-of-the-Day(1).md","hash":"e7b3be161c8d24522d72a3642e951ac26b6d9253","modified":1476082424500},{"_id":"source/_posts/Android-Studio-Tips-of-the-Day(2).md","hash":"373f239f13a1572edf5238707e92141cc965f76f","modified":1476082424501},{"_id":"source/_posts/Android-Studio升級2-2打包报错-xxx-stripped-ap-specified-for-property-resourceFile-does-not-exist.md","hash":"fe41b53ce2473ac77b445b58b1ace740e1a973fd","modified":1476180596057},{"_id":"source/_posts/Android之Log混淆.md","hash":"5e4c91c5e30e1ac985491cc05acc1a6922ab50db","modified":1476082424502},{"_id":"source/_posts/Android之Matrix.md","hash":"cb121dcad24a75fcaa5a28c86acb24dc09d71cb4","modified":1476082424508},{"_id":"source/_posts/Android之简单实现ButterKnife中的injectView的方案.md","hash":"1eb0e535647ed1fa6399b2f9313f30a730800168","modified":1476082424509},{"_id":"source/_posts/Android之自定义actionbar[笔记].md","hash":"18eed6e764260dc9d92b79fb83b1cdebbecc4ac3","modified":1476082424509},{"_id":"source/_posts/Android刷机-命令篇.md","hash":"25522c78fc92834cab0c1546ce4734ddf77c4a8b","modified":1476082424510},{"_id":"source/_posts/Android刷机-基础篇.md","hash":"3fbef8c7912fb71b52fc3254f9d14813aefa2412","modified":1476082424511},{"_id":"source/_posts/Http协议简介.md","hash":"96dc150f41bd689d419a41359f91305720e69548","modified":1476082424514},{"_id":"source/_posts/Java之HashMap和HashTable的不同.md","hash":"7defb05ce814f9ac7143759e7923af7aac0219b7","modified":1476082424515},{"_id":"source/_posts/Java之静态绑定和动态绑定.md","hash":"d2dc72af22d3c9003c1b56af928949c9fbfddbf2","modified":1476082424519},{"_id":"source/_posts/Java同步之synchronized关键字.md","hash":"d052441738808e84a087abb4027bcc57de9dc7a6","modified":1476082424524},{"_id":"source/_posts/Java的连接与初始化.md","hash":"aa1bf18f38537cb4508cedc60fc0e16d6c22aa5f","modified":1476082424528},{"_id":"source/_posts/Java重载匹配优先级.md","hash":"ef6aa784f31eddc7414b9dad44f775f8a2533de0","modified":1476082424530},{"_id":"source/_posts/Parcelable-vs-Serializable.md","hash":"a9aad9f27a4df9605be6c1ca65e0554ac23c14c2","modified":1476082424531},{"_id":"source/_posts/Win10-快捷键之Win组合键.md","hash":"a6d461e632c87d179a40cfb2b33b9fbb5eba5f56","modified":1476082424531},{"_id":"source/_posts/getDimension、getDimensionPixelOffset、getDimensionPixelSize初级篇.md","hash":"c42b32b647385afee6688c0c098426569bb731ac","modified":1476082424532},{"_id":"source/_posts/关于OpenJDK你了解多少？.md","hash":"a425f5e99769e38b398b9e658d6f6ff05189105c","modified":1476345619458},{"_id":"source/_posts/实用bat脚本-笔记.md","hash":"e856a3c89807be0424dc67bfff8f56595e8b5369","modified":1476082424537},{"_id":"source/_posts/推荐-Markdown编辑器.md","hash":"5d215a30c4926617fded6d3db77f24af4e4eaa73","modified":1476082424538},{"_id":"source/_posts/通过Swiftype实现hexo站内搜索.md","hash":"5faa8cec7b5a7e3c553048050ecd081ee7fff182","modified":1476082424540},{"_id":"source/_posts/解决Android-Studio中Terminal无法输入的问题.md","hash":"2e9c525b3db24cc2c27e08d0399be964fc806f1f","modified":1476082424539},{"_id":"source/about/index.md","hash":"f9e7d3929be78a74e01c37a4babe36a30e04be1e","modified":1476082424541},{"_id":"source/categories/index.md","hash":"f6b05f97bed3a2acfbe0287536d3902991748c58","modified":1476082424547},{"_id":"source/search/index.md","hash":"08a7a258d4f15d5a8ca5e16404235c6b1fe97707","modified":1476082424549},{"_id":"source/tags/index.md","hash":"d7e34fab7ab760933452a8e0306e2ec645b9f53a","modified":1476082424553},{"_id":"source/tags/index-1.md","hash":"b068defa946e84c11dae6a5cf71e43a803c06059","modified":1476082424553},{"_id":"themes/indigo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1476070389402},{"_id":"themes/indigo/.git/config","hash":"8bc74caf95bf5d050dce30044857f377c2b26c80","modified":1476070389415},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1476070357218},{"_id":"themes/indigo/.git/index","hash":"51b03ceb1b4ecf3da7ef97abff1fcc17f2417215","modified":1476070389902},{"_id":"themes/indigo/.git/packed-refs","hash":"7e37b2c40471dfbc77c9210152986602a3d66ac6","modified":1476070389393},{"_id":"themes/indigo/languages/default.yml","hash":"9ffaaf4dbe83f1f343ea702e59493dc6f3f46877","modified":1460550787599},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"680d877a531f8df04b30b462a5131b5d3a8ca372","modified":1460550787600},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"08a6eae3c1e48f96690ca4c29ce67f8d6ff9a8bd","modified":1460550787600},{"_id":"themes/indigo/layout/archive.ejs","hash":"21bfd12209615796b16bf794df75fc857a19b32c","modified":1476070389562},{"_id":"themes/indigo/layout/category.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1476070389565},{"_id":"themes/indigo/layout/index.ejs","hash":"9a3b3d88f4992d20c082383e3155e9e3bc9b6409","modified":1476070389565},{"_id":"themes/indigo/layout/layout.ejs","hash":"fc36f206a97bf65eacead631a0dbf043dcf356ac","modified":1476070389572},{"_id":"themes/indigo/layout/page.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1476070389572},{"_id":"themes/indigo/layout/post.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1476070389574},{"_id":"themes/indigo/layout/tag.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1476070389574},{"_id":"themes/indigo/layout/tags.ejs","hash":"91e94dcd997acb71ac688993715390c7e48b89c1","modified":1476070389580},{"_id":"themes/indigo/screenshots/hexo-theme-search.png","hash":"ffa0b5e1ed0f4eea7a1e57f6779c78052df03b5c","modified":1476070389593},{"_id":"themes/indigo/screenshots/hexo-theme-pad.png","hash":"08e41f140682fbd9a78999de79823ed59b1d2232","modified":1476070389587},{"_id":"themes/indigo/screenshots/hexo-theme-phone.png","hash":"1404b4fd664a8a552eed8ab46c0fb3b281c4f007","modified":1476070389592},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1476070357233},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1476070357253},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1476070357249},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1476070357257},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1476070357258},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1476070357268},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1476070357286},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1476070357315},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1476070357301},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1476070357319},{"_id":"themes/indigo/.git/logs/HEAD","hash":"c2444b9e5e2baf4ac6ee86a633200df824e45720","modified":1476070389407},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"bc9385ad04b867dab48bf21a2bc39dae1c191008","modified":1476070389436},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"51cf12c71469b3db65828b672b46cc7071974bda","modified":1476070389439},{"_id":"themes/indigo/layout/_partial/cnzz.ejs","hash":"03f75c55cb78686603a430fa42c63805872fb902","modified":1476070389440},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"db4752cc05bdebe9e5a6227e07fb347d87eab615","modified":1476280328264},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1476070389444},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"912aed381f0b6f5ff7adfa18bfae617d5a6f06be","modified":1476070389463},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"6bae0d16ba2689790dee34535bffb268a817967c","modified":1476280561366},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"9fad8d3ce07c6e994488fecbd13556aee85271db","modified":1476070389475},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1476070389476},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"18b083b40387e544e0f6acf36260030a5d791e35","modified":1476070389482},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"b3667ca7a9ca3ae8cf63dbe05eb8fd35358c6f3b","modified":1476070389493},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"99d9dfc8ed62b270b5c3dba38cf2eb61d6560944","modified":1476282747306},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"78f76f93d43d78eb03cda1094c7a7c99d25f387f","modified":1476070389544},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"1c8e7a1d512f4b81431f03eb80b0b331229799bb","modified":1476070389550},{"_id":"themes/indigo/screenshots/hexo-theme-archive.png","hash":"36fd8e55e6672aa6afbd7f88b68a532c819f4473","modified":1476070389585},{"_id":"themes/indigo/screenshots/hexo-theme-pc.png","hash":"5898394b7664bf87ec1422fe7c21e7e76fb37185","modified":1476070389589},{"_id":"themes/indigo/source/css/style.less","hash":"6a2df41723db6832be563474c148c7346c9c500f","modified":1476070389858},{"_id":"themes/indigo/source/img/alipay.png","hash":"dedb5aff8cc9335b6438702ab0c7e639a5c60ae6","modified":1476083645359},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1476070389866},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1476070389866},{"_id":"themes/indigo/source/img/favicon.ico","hash":"4ec910056d6e43fbbfa71af40fd1194f15cbbe62","modified":1468420477404},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1476070389867},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1476070389869},{"_id":"themes/indigo/source/img/wechat.png","hash":"4d0336c0440c85884b1a5524b2d1943c4cdc4585","modified":1476083585263},{"_id":"themes/indigo/source/js/main.js","hash":"063219f32ef25aaf43d8005267086d0e1979214b","modified":1476070389888},{"_id":"themes/indigo/source/js/search.js","hash":"55f55e48d7080b69416bae449d6ab59d5af79695","modified":1476070389899},{"_id":"themes/indigo/source/img/logo_new.png","hash":"a7d653c9e51d6ea534bcfaef6696989fdfa1154e","modified":1464095929397},{"_id":"themes/indigo/.git/objects/pack/pack-7ac71b51806a985cf1c41c549c5c95e573b3810a.idx","hash":"17f2eb1965fa7b6d0e2414e113db7d12ea9e4a68","modified":1476070388909},{"_id":"themes/indigo/.git/refs/heads/master","hash":"a862d9bfa1dea15cda5eecf60f26eca31eda3e50","modified":1476070389405},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1476070389499},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"e26a5629832507fe6354f9650845d41ebdc9801d","modified":1476070389511},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"528490c368d92266b6a8ea3ecab5c0f42877bac3","modified":1476070389512},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1476070389525},{"_id":"themes/indigo/layout/_partial/post/duoshuo.ejs","hash":"7624b278d202698d0c1316f8f082cc29ed3f0391","modified":1476283447660},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"6c359ca773dee87ecf7a1553a31a9418c900583a","modified":1476070389535},{"_id":"themes/indigo/layout/_partial/post/recentvisitors.ejs","hash":"4be0ed281ad7f4dafdfba81b649409c27018811b","modified":1476282627443},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"fc9b642ef8116a6f0d94a1526aa4f17add5a635b","modified":1476070389538},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"6b2ab0a9a67732ba18bc8520f0ff6805457bb427","modified":1476070389539},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"33181dbf9c126b3354a2e6a83605c40674b222b7","modified":1476070389539},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1476070389541},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"69180b54d5d9aa460e67a245e8537fdd0b6d0640","modified":1476070389595},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"1e71bd86af24a85e9b6cce514704d6efcf22cbaa","modified":1476282634039},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1476070389638},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"bf9c09de9a989cf597ca78e78240f8496dbca4f8","modified":1476070389641},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"5be2b791bfb3f91d30e6aea104130a9056c4af12","modified":1476070389644},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"624306388be8d18351afe4483956efea3728d2b9","modified":1476070389647},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"c32656b8d51fca9b3bfa95f1aa44b51ade203e18","modified":1476070389667},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"8f4d9a355f1c026f6842c8d424cd942251e3f75d","modified":1476070389671},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4c6f08a91e210dafe831b2ecb79987ffc11546c7","modified":1476070389675},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1476070389676},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"d73a12ca56cd710a13cb61074958c82a5cb95d63","modified":1476070389680},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"dc26e274703827cb28b6c9beff53b4176cdce783","modified":1476070389681},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"6a256bfa57547ede5e05dfa61878f582780db6ad","modified":1476070389682},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"444ff88c4710b4dbd09434cea7e4cefe30972463","modified":1476070389688},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"61019c991dff98a380314b88c6f875d693c3e7e1","modified":1476070389690},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"9d9b1946357a653adebc29859ad0de70adcc27dd","modified":1476070389606},{"_id":"themes/indigo/.git/logs/refs/heads/master","hash":"c2444b9e5e2baf4ac6ee86a633200df824e45720","modified":1476070389406},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1476070389400},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1476070389755},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1476070389765},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1476070389769},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1476070389778},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1476070389788},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1476070389792},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1476070389801},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1476070389811},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1476070389815},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1476070389823},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1476070389833},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1476070389837},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1476070389841},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1476070389851},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1476070389855},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1476070389720},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1476070389700},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1476070389743},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1476070389746},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1476070389761},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1476070389784},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1476070389807},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1476070389830},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1476070389847},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"c2444b9e5e2baf4ac6ee86a633200df824e45720","modified":1476070389398},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1476070389738},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1476070389733},{"_id":"themes/indigo/.git/objects/pack/pack-7ac71b51806a985cf1c41c549c5c95e573b3810a.pack","hash":"d6f2e690f4b3ffa036eb92ba57815ab2eaa7df8d","modified":1476070388966},{"_id":"public/content.json","hash":"cb6c4b22402f12b0bd3afee803caeb5eb80d916f","modified":1476863130652},{"_id":"public/atom.xml","hash":"3d42e6997645b085a1322add2d773708c55c4f89","modified":1476863131652},{"_id":"public/sitemap.xml","hash":"b7dddfa508abb92ed489903c5d6d90e04f3448cf","modified":1476863131689},{"_id":"public/404.html","hash":"b57bc12a0d565e35bd62697fa9608c49a7ebb620","modified":1476863131703},{"_id":"public/baidu_verify_T1QaggfO1O.html","hash":"aa6f46a293398e4120295670abe6f75aac65de2e","modified":1476863131703},{"_id":"public/googlea507cc85570ed219.html","hash":"e5427bf844a7bde39e82de2fd9971de61933a380","modified":1476863131703},{"_id":"public/baidu_verify_hg1tugxzZf.html","hash":"9c0c68bcba0d63a0cdd3fd8c79efd09749849473","modified":1476863131703},{"_id":"public/categories/index.html","hash":"07e11527e6201b02faa41d26a9b52c21f17b108d","modified":1476863131703},{"_id":"public/about/index.html","hash":"866a3df3229916dc69b6f911883b13deb9691791","modified":1476863131703},{"_id":"public/search/index.html","hash":"884937e5bd0596061ca6c22aec369ee05189482d","modified":1476863131703},{"_id":"public/archives/index.html","hash":"00c915bece1e74ef7c8cc8304bee6d209514e699","modified":1476863131703},{"_id":"public/archives/page/2/index.html","hash":"b7b7b900829eff7e239be6da9802841d5b0fd587","modified":1476863131703},{"_id":"public/archives/page/3/index.html","hash":"462703edf4051d6c556f02cfd31afde53ed96916","modified":1476863131703},{"_id":"public/archives/page/4/index.html","hash":"a38e1bc156e8b5e8c91971778929b251025b90b6","modified":1476863131703},{"_id":"public/archives/page/5/index.html","hash":"24af2d58aa72dea2d45ef425e425287b7a16b2d0","modified":1476863131703},{"_id":"public/archives/page/6/index.html","hash":"6aee7010ad7d1342f5cb3a4f324a8fc9c414d1dd","modified":1476863131703},{"_id":"public/archives/2015/index.html","hash":"cac0e6f3ef40fb01e6b408d6a93e9a248d57b359","modified":1476863131703},{"_id":"public/archives/2015/page/2/index.html","hash":"26eb3709c8f1ca0de5eead9916e11a678cdd488e","modified":1476863131703},{"_id":"public/archives/2015/page/3/index.html","hash":"dbf031cd3c75aa48ac77010022642e78adad30f0","modified":1476863131703},{"_id":"public/archives/2015/page/4/index.html","hash":"0e9ce3b8f50ac60e370bf7f04ca7fa7869cc84ec","modified":1476863131704},{"_id":"public/archives/2015/11/index.html","hash":"2c87ab6e5162343eb9b03af816b7873ae26d7101","modified":1476863131704},{"_id":"public/archives/2015/11/page/2/index.html","hash":"d2214fd1a56f242755c1aea072607475d3a8c4aa","modified":1476863131704},{"_id":"public/archives/2015/12/index.html","hash":"61096b4400f5e5918148a2a6d5c6950c704af796","modified":1476863131704},{"_id":"public/archives/2015/12/page/2/index.html","hash":"301de2edc03b76a243f8369312d027591a8c0347","modified":1476863131704},{"_id":"public/archives/2016/index.html","hash":"6643d854c38a85bb5f1c1c7ebb280db548bbbec6","modified":1476863131704},{"_id":"public/archives/2016/page/2/index.html","hash":"42ee5d859ac57435a3e6891d14017edf39032665","modified":1476863131704},{"_id":"public/archives/2016/page/3/index.html","hash":"f05f6416f10025610fb2ec35f090cbf6ffad5c0a","modified":1476863131704},{"_id":"public/archives/2016/02/index.html","hash":"e97e74a0f87ad2f5ad50c6a581b2cce803abc4a7","modified":1476863131704},{"_id":"public/archives/2016/03/index.html","hash":"18d94d6107d6fd3b917f45541a7a43294d5ebd41","modified":1476863131704},{"_id":"public/archives/2016/05/index.html","hash":"1ec38153a151137e494408d45c4f9b896ba4ebc8","modified":1476863131704},{"_id":"public/archives/2016/07/index.html","hash":"906edf82879c351e21a4f8fc693bc968d4718a96","modified":1476863131704},{"_id":"public/archives/2016/08/index.html","hash":"28f4dfb2dc555689da874908cc60d127ea286012","modified":1476863131704},{"_id":"public/archives/2016/10/index.html","hash":"1d4b5515a9380b2d1c1f2efc47ebeb071a0bb47b","modified":1476863131704},{"_id":"public/categories/Android/index.html","hash":"692d3e9520ec40a6997bee2a2786a865f630bb4a","modified":1476863131704},{"_id":"public/categories/Android/page/2/index.html","hash":"8e6622efcb6949ba316ec8af9d00ac53bafd9aaf","modified":1476863131704},{"_id":"public/categories/Android/page/3/index.html","hash":"51412c07a6caa1cf1d19429ff2e9acb9c3214e41","modified":1476863131704},{"_id":"public/categories/Android-Studio/index.html","hash":"6b7c7008b1f58912eaf73902e62af67a47d53885","modified":1476863131704},{"_id":"public/categories/Android-Studio/page/2/index.html","hash":"fdcaa0ef897fb0eacb053657d5e7d0b85c310d98","modified":1476863131705},{"_id":"public/categories/Java/index.html","hash":"b7d0decfd2be0ba11909301e3f3b0fe867fee98d","modified":1476863131705},{"_id":"public/categories/Java/page/2/index.html","hash":"5aee4933475014b6e5f359ff194f973d09ba4b00","modified":1476863131705},{"_id":"public/categories/Complex/index.html","hash":"f7cf75c3948b67f9251dc3153d4d5aed81c3c179","modified":1476863131705},{"_id":"public/categories/Win10/index.html","hash":"b185156190b5adc8c52c1421aed022cf0d98822d","modified":1476863131705},{"_id":"public/categories/PC/index.html","hash":"1ed9953475b3151f820ac70d96c83e9a4833f984","modified":1476863131705},{"_id":"public/categories/Markdown/index.html","hash":"ce85ddde982b829e295b2efc1439b90d1113d89f","modified":1476863131705},{"_id":"public/categories/Hexo/index.html","hash":"7fb0addf837726cefcb58f011fd34d26d974ab65","modified":1476863131705},{"_id":"public/tags/Material-Design/index.html","hash":"13dfc2555ac0da4d7ae8644d9558d3d6c997f502","modified":1476863131705},{"_id":"public/tags/EditText/index.html","hash":"3bf3361abd8eeb91cb00608f0f1bfefbc50f901f","modified":1476863131705},{"_id":"public/tags/Floating-Lables/index.html","hash":"9ebed2f3ffb72617e3c997f0a8323091bd79494f","modified":1476863131705},{"_id":"public/tags/TabLayout/index.html","hash":"65b8373421eb35480f27a26d62103404ed3429ee","modified":1476863131705},{"_id":"public/tags/Android-Studio2-2/index.html","hash":"91ae0d75dd5e345a43c2265ef85bd5998bf7a7ea","modified":1476863131705},{"_id":"public/tags/Snackbar/index.html","hash":"66b71397e74140e39b3f8feafa82612009f78f1f","modified":1476863131705},{"_id":"public/tags/Instant-Run/index.html","hash":"b76e65df85dbd1d8a3a348ae556affb8c392fd06","modified":1476863131705},{"_id":"public/tags/Enable-ADB-integration/index.html","hash":"561bacd4abe3ec4b77d06102b0641d2726ad4f2f","modified":1476863131705},{"_id":"public/tags/Intellij-IDEA/index.html","hash":"3926abf3ee1b977c6bde66d871a742be5f223a1d","modified":1476863131706},{"_id":"public/tags/Android-Studio/index.html","hash":"4e9ba375dac11a7bd0a4409d0b41e7638426eb8e","modified":1476863131706},{"_id":"public/tags/plugin/index.html","hash":"5bb4497e1673e010817a2f641135597b24a9a01b","modified":1476863131706},{"_id":"public/tags/快捷键/index.html","hash":"fcafc3c2fe633831973d1cf525a1f5d471dc95e6","modified":1476863131706},{"_id":"public/tags/tips-of-the-Day/index.html","hash":"c4aa7e3e117685beb1a270ec2976a4a76a799dc3","modified":1476863131706},{"_id":"public/tags/xxx-stripped-ap/index.html","hash":"2efb3ac30d134606f03c50a8b43aee2bee463e73","modified":1476863131707},{"_id":"public/tags/Log/index.html","hash":"efeb699836c591e2f596fcb3b7ceeb7ae0f8f09e","modified":1476863131707},{"_id":"public/tags/ButterKnife/index.html","hash":"43851dd723dcfdc0614fe61b82cc7d48e2431e69","modified":1476863131707},{"_id":"public/tags/InjectView/index.html","hash":"bbd4ad79e26d77e33f9ce218c259a1725ee42f0b","modified":1476863131707},{"_id":"public/tags/annotation/index.html","hash":"402d25dcb5b41711913fd7b44c1412dba26c8e77","modified":1476863131708},{"_id":"public/tags/Matrix/index.html","hash":"68ae0b629793dba50c15bd5d265664137d829a6f","modified":1476863131708},{"_id":"public/tags/fastboot/index.html","hash":"72287269f729eb7238f33b7bfc998433432ed812","modified":1476863131708},{"_id":"public/tags/adb/index.html","hash":"9de70c392f677ced22a91a1b04183b7b60f7a452","modified":1476863131708},{"_id":"public/tags/bootloader/index.html","hash":"1e41c53565949b593792c2ae375bfd9822f0c2d1","modified":1476863131708},{"_id":"public/tags/沉浸式状态栏/index.html","hash":"ea2639e375931492727f1e66e6d0a36cf36d625b","modified":1476863131708},{"_id":"public/tags/卡刷/index.html","hash":"144fcc3cd0e5cc8949bf2c1b97958ad68f325b6f","modified":1476863131708},{"_id":"public/tags/线刷/index.html","hash":"d86c7e10857c31df43512f5f64bd199b4abe05f2","modified":1476863131708},{"_id":"public/tags/http协议/index.html","hash":"2957108bcfa819aee4c51dac2140a4ba884dfd3d","modified":1476863131708},{"_id":"public/tags/HashTable/index.html","hash":"83b732da353cdcca7cb2db89864bf13ef9b27363","modified":1476863131708},{"_id":"public/tags/HashMap/index.html","hash":"c62674a4f9ecdb42878ad038aaead14d92d494c1","modified":1476863131708},{"_id":"public/tags/动态绑定/index.html","hash":"88a1485a906e2cf3b508ace9b2907439f47b2876","modified":1476863131708},{"_id":"public/tags/静态绑定/index.html","hash":"693d3339afda417d074954ba9572b73cb0286656","modified":1476863131708},{"_id":"public/tags/重载/index.html","hash":"824440994f187cff58b80b9a1bde2c6f821f09b5","modified":1476863131708},{"_id":"public/tags/重写/index.html","hash":"4852f2226e98fe352fdd26e610cfdcfd9fe4f3f0","modified":1476863131708},{"_id":"public/tags/synchronized/index.html","hash":"6126883f6dc2f730a937bcdc9c3fbaecc039a223","modified":1476863131708},{"_id":"public/tags/类初始化/index.html","hash":"f0543be5e1f05a403ce474fff721d3eae21e112d","modified":1476863131708},{"_id":"public/tags/虚拟机/index.html","hash":"57151ec21c7ce4ef4a00d432e02a906788b98d9a","modified":1476863131709},{"_id":"public/tags/Java/index.html","hash":"746341e0d2a8ecab4bf4cd4d79b8291c4425f7b3","modified":1476863131709},{"_id":"public/tags/Parcelable/index.html","hash":"93f9c2185de22fbbc8f47ca0780812d28780ccc3","modified":1476863131709},{"_id":"public/tags/Serializable/index.html","hash":"73955cf74427b419fb2a34a58779da58a5704d10","modified":1476863131709},{"_id":"public/tags/序列化/index.html","hash":"3ac884b237622cd9526185e2c9f453806bdbbf9f","modified":1476863131709},{"_id":"public/tags/java/index.html","hash":"5a6fe3936470f4f09ad785f2775b7b3c601b68c8","modified":1476863131709},{"_id":"public/tags/Win10/index.html","hash":"1022efde1823b4c38543cce19e0b2926a652ed9e","modified":1476863131709},{"_id":"public/tags/getDimension/index.html","hash":"1d3cb9c75ad754b64f5e53bd9c07ff3d6fc9a052","modified":1476863131709},{"_id":"public/tags/getDimensionPixelOffset/index.html","hash":"ec15d93dedcf125a13d1d0b3c30ea8b4aad17a54","modified":1476863131709},{"_id":"public/tags/getDimensionPixelSize/index.html","hash":"6a2624321a9fa2cf79119d40f752d95ad3a48f92","modified":1476863131709},{"_id":"public/tags/openjdk/index.html","hash":"c82e23af6722e239a60872ace788bea79e134f0d","modified":1476863131709},{"_id":"public/tags/bat/index.html","hash":"5dfa0b0c2490e718b6b736fe0188a4d36d242e8b","modified":1476863131709},{"_id":"public/tags/批处理文件/index.html","hash":"f805c282146d37cce4f17300c9a96f074c65cae1","modified":1476863131709},{"_id":"public/tags/Markdown/index.html","hash":"6084b9991b06d532bdb13bc19db94b92a63e474e","modified":1476863131709},{"_id":"public/tags/马克飞象/index.html","hash":"8327eb1a89721f9a5462003eefd25e328e2e710e","modified":1476863131709},{"_id":"public/tags/MarkdownPad/index.html","hash":"75ba45d33358c695fe206b992101dd08fa0d332d","modified":1476863131709},{"_id":"public/tags/MarkdownX/index.html","hash":"053a688367905e1fd721b3486fb1908201d7b1be","modified":1476863131710},{"_id":"public/tags/hexo/index.html","hash":"ce47d683191a0d73ee9020ff7c378e5d7a1d3e98","modified":1476863131710},{"_id":"public/tags/swiftype/index.html","hash":"ec28eb3a290ecf41baaf23620a7532385ac22371","modified":1476863131710},{"_id":"public/tags/pacman/index.html","hash":"bafdc05ac45b710e928f020b7a82cd65430446d1","modified":1476863131710},{"_id":"public/tags/Terminal/index.html","hash":"d4d85415f8c3ae2f7dff35f9a230a8ea59a428d0","modified":1476863131710},{"_id":"public/love.html","hash":"872aafd19e3913c7751f86fad7045a417bcc0a2d","modified":1476863131710},{"_id":"public/tags/index.html","hash":"19ed51a8b9392a4cfd9669d175681a82c3f8c258","modified":1476863131710},{"_id":"public/tags/index-1.html","hash":"29d10aba8786ffbbfb6a8bc1fa726a033288fdd7","modified":1476863131710},{"_id":"public/2016/10/19/Java同步之synchronized关键字/undefined/index.html","hash":"996320aae3a420f1dbf63ca2ddbef8da1cc666a7","modified":1476863131710},{"_id":"public/2016/10/19/Android-Studio-Error-running-app-Instant-Run-requires-Tools-Android-Enable-ADB-integration-to-be-enabled/undefined/index.html","hash":"00ba4d4dd44805ac5dd1c65c43799327401350a1","modified":1476863131710},{"_id":"public/2016/10/11/Android-Studio-2-2-新特性/undefined/index.html","hash":"71bc934bdba0a30f4efbea02df23f752677ae2fe","modified":1476863131710},{"_id":"public/2016/10/10/Android-Studio升級2-2打包报错-xxx-stripped-ap-specified-for-property-resourceFile-does-not-exist/undefined/index.html","hash":"2418103c07f6585ba465ade95251fe46e2ffc21c","modified":1476863131710},{"_id":"public/2016/08/16/Android-Studio-Intellij-翻译插件-Easy Translation/undefined/index.html","hash":"5d5deb9a51c98e39f354df4cc0973a3bbb404cb8","modified":1476863131710},{"_id":"public/2016/07/21/getDimension、getDimensionPixelOffset、getDimensionPixelSize初级篇/undefined/index.html","hash":"6fff87048d11d56e1e6c53447d34c8651e0c1b35","modified":1476863131710},{"_id":"public/2016/08/10/关于OpenJDK你了解多少？/undefined/index.html","hash":"80e16407f2bd6a0749ae8e21db90b0cea1c0163a","modified":1476863131710},{"_id":"public/2016/05/21/Android刷机-命令篇/undefined/index.html","hash":"d6e12b2d319d8716ccd1a8ba2083dd78386de8a2","modified":1476863131710},{"_id":"public/2016/05/21/Android刷机-基础篇/undefined/index.html","hash":"0095dc9dd82d2c3b8535ed19ebb3e094ef06a241","modified":1476863131710},{"_id":"public/2016/03/02/Http协议简介/undefined/index.html","hash":"2d4c482f92a9dca3adc9311141243a1306a31a45","modified":1476863131710},{"_id":"public/2016/03/01/实用bat脚本-笔记/undefined/index.html","hash":"4923d199ad341a9fe90bea345e9cd01cc5bc5ffe","modified":1476863131710},{"_id":"public/2016/03/01/Android之自定义actionbar[笔记]/undefined/index.html","hash":"bbfdc8d1787164e23bb503babd79c7229b46d34a","modified":1476863131710},{"_id":"public/2016/02/19/Java之HashMap和HashTable的不同/undefined/index.html","hash":"3a515d3cfcefc77c1caa1eb1c39001e8d8f15c77","modified":1476863131710},{"_id":"public/2016/02/19/Android之Matrix/undefined/index.html","hash":"613b068406a5b1b5125016fe5d7e97f7092c1cdf","modified":1476863131710},{"_id":"public/2015/12/31/Android-Material-Design入门/undefined/index.html","hash":"7edb5b46cdb0394ffb4fe9abdaa3e96f7a40c0c1","modified":1476863131710},{"_id":"public/2015/12/30/Android-Material-Design-Floating-Labels-for-EditText/undefined/index.html","hash":"89f2b71e929838ae08902acfeed92cb4d27b7336","modified":1476863131711},{"_id":"public/2015/12/28/Android-Material-Design-Tabs/undefined/index.html","hash":"56ef8247816b3baa2fe68aca756930a52ed53fcd","modified":1476863131711},{"_id":"public/2015/12/24/Android-Material-Design-Snackbar/undefined/index.html","hash":"1d686c2237886b6529bf2071eb17f7a62a373a67","modified":1476863131711},{"_id":"public/2015/12/24/Parcelable-vs-Serializable/undefined/index.html","hash":"9c095460c452130eb6c1eb892f6690b152487f60","modified":1476863131711},{"_id":"public/2015/12/23/Android-Studio-Tips-of-the-Day(2)/undefined/index.html","hash":"3c6def0276cad899d2910c8d5c91822de65c16b6","modified":1476863131711},{"_id":"public/2015/12/22/Android-Studio-Tips-of-the-Day(1)/undefined/index.html","hash":"fb3ca21619eae587eeae9f8a39a3f23abc839b90","modified":1476863131711},{"_id":"public/2015/12/09/Java的连接与初始化/undefined/index.html","hash":"adf0b855dacf3b44a3bb52636fce3f67cc5462dd","modified":1476863131711},{"_id":"public/2015/11/25/通过Swiftype实现hexo站内搜索/undefined/index.html","hash":"00772425771ea8db237e2e52c5c8d3c622e42623","modified":1476863131711},{"_id":"public/2015/11/25/Win10-快捷键之Win组合键/undefined/index.html","hash":"68691d5496e1a702a52915c8cd59be4b0120421d","modified":1476863131711},{"_id":"public/2015/11/24/推荐-Markdown编辑器/undefined/index.html","hash":"64fee54a6ab0e02fe698e96087bec4ec332048e2","modified":1476863131711},{"_id":"public/2015/11/24/Java之静态绑定和动态绑定/undefined/index.html","hash":"193d423b99f2496ab10636dcaf4555fbc3ba8bbc","modified":1476863131711},{"_id":"public/2015/11/23/Java重载匹配优先级/undefined/index.html","hash":"1989322ae0d160352fe301b16dcc2c8505c5760b","modified":1476863131711},{"_id":"public/2015/11/18/Android之Log混淆/undefined/index.html","hash":"1a00b06102abe5c87d33f704acef988964ec9d65","modified":1476863131711},{"_id":"public/2015/11/16/解决Android-Studio中Terminal无法输入的问题/undefined/index.html","hash":"5fbb0842e76158876adf429eac51474cd40bffc5","modified":1476863131711},{"_id":"public/2015/11/13/Android之简单实现ButterKnife中的injectView的方案/undefined/index.html","hash":"b2040f2365d4b4545018dc620e0e33e4d7ffd218","modified":1476863131711},{"_id":"public/index.html","hash":"61b7c2e815017265fcd8907dd9c7f3839cfa671d","modified":1476863131713},{"_id":"public/page/2/index.html","hash":"5f9f6d9066016eba99c120aec5496e0fe0f2f664","modified":1476863131714},{"_id":"public/page/3/index.html","hash":"e3f265e320129fd265b2e58176b6fbdf18502582","modified":1476863131714},{"_id":"public/page/4/index.html","hash":"d04ba39a36511d4a06e4ae34d272a402c843f53d","modified":1476863131714},{"_id":"public/page/5/index.html","hash":"fe0b6aa41823878e93fd5a5acf895b556842e0d6","modified":1476863131714},{"_id":"public/page/6/index.html","hash":"1dfc91ec291b27e56768e2e046469fe51702daa3","modified":1476863131714},{"_id":"public/CNAME","hash":"1828d00adc09512a7927e0709b81f19da9ac2b9f","modified":1476863131750},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1476863131750},{"_id":"public/img/alipay.png","hash":"dedb5aff8cc9335b6438702ab0c7e639a5c60ae6","modified":1476863131750},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1476863131750},{"_id":"public/img/favicon.ico","hash":"4ec910056d6e43fbbfa71af40fd1194f15cbbe62","modified":1476863131750},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1476863131750},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1476863131750},{"_id":"public/img/wechat.png","hash":"4d0336c0440c85884b1a5524b2d1943c4cdc4585","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1476863131750},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1476863131751},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1476863131751},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1476863131751},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1476863131751},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1476863131751},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1476863131751},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1476863131751},{"_id":"public/img/logo_new.png","hash":"a7d653c9e51d6ea534bcfaef6696989fdfa1154e","modified":1476863131822},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1476863131822},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1476863131822},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1476863131823},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1476863131823},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1476863131823},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1476863131823},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1476863131823},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1476863131823},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1476863131823},{"_id":"public/js/search.js","hash":"55f55e48d7080b69416bae449d6ab59d5af79695","modified":1476863131824},{"_id":"public/js/main.js","hash":"063219f32ef25aaf43d8005267086d0e1979214b","modified":1476863131824},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1476863131824},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1476863132019},{"_id":"public/css/style.css","hash":"46b4643a297af6175bef9f944283d1c52572c541","modified":1476863133598}],"Category":[{"name":"Android","_id":"ciugm6b9a00091giydewfb77n"},{"name":"Android Studio","_id":"ciugm6b9w000n1giyvhf7999a"},{"name":"Java","_id":"ciugm6bav001o1giyfkdmzllm"},{"name":"Complex","_id":"ciugm6bbf002b1giy8cmg6wkz"},{"name":"Win10","_id":"ciugm6bbj002h1giyuip7xtdc"},{"name":"PC","_id":"ciugm6bbo002n1giyuab09faf"},{"name":"Markdown","_id":"ciugm6bbs002v1giyzcmhpkne"},{"name":"Hexo","_id":"ciugm6bbt00311giylt3g6bem"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>404页面</title>\n<style>\n*{margin:0;padding:0;outline:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;}\n.center{margin:0 auto;}\n.whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;}\n.whole img{width:100%;height:100%;}\n.mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);}\n.b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px}\np{color:#fff;margin-top:40px;font-size:24px;}\n#num{margin:0 5px;font-weight:bold;}\n</style>\n<script type=\"text/javascript\">\n\tvar num=4;\n\tfunction redirect(){\n\t\tnum--;\n\t\tdocument.getElementById(\"num\").innerHTML=num;\n\t\tif(num<0){\n\t\t\tdocument.getElementById(\"num\").innerHTML=0;\n\t\t\tlocation.href=\"http://xiaofeng.site\";\n\t\t\t}\n\t\t}\n\tsetInterval(\"redirect()\", 1000);\n</script>\n</head>\n\n<body onload=\"redirect();\">\n<div class=\"whole\">\n\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/back.jpg\">\n    <div class=\"mask\"></div>\n</div>\n<div class=\"b\">\n\t\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/404.png\" class=\"center\">\n\t\t<p>\n\t\t\t暂时未能找到您查找的页面<br>\n\t\t\t可能输入的网址错误或此页面不存在<br>\n            <span id=\"num\"></span>秒后自动跳转到主页\n\t\t</p>\n\t</div>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>404页面</title>\n<style>\n*{margin:0;padding:0;outline:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;}\n.center{margin:0 auto;}\n.whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;}\n.whole img{width:100%;height:100%;}\n.mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);}\n.b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px}\np{color:#fff;margin-top:40px;font-size:24px;}\n#num{margin:0 5px;font-weight:bold;}\n</style>\n<script type=\"text/javascript\">\n\tvar num=4;\n\tfunction redirect(){\n\t\tnum--;\n\t\tdocument.getElementById(\"num\").innerHTML=num;\n\t\tif(num<0){\n\t\t\tdocument.getElementById(\"num\").innerHTML=0;\n\t\t\tlocation.href=\"http://xiaofeng.site\";\n\t\t\t}\n\t\t}\n\tsetInterval(\"redirect()\", 1000);\n</script>\n</head>\n\n<body onload=\"redirect();\">\n<div class=\"whole\">\n\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/back.jpg\">\n    <div class=\"mask\"></div>\n</div>\n<div class=\"b\">\n\t\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/404.png\" class=\"center\">\n\t\t<p>\n\t\t\t暂时未能找到您查找的页面<br>\n\t\t\t可能输入的网址错误或此页面不存在<br>\n            <span id=\"num\"></span>秒后自动跳转到主页\n\t\t</p>\n\t</div>\n\n</body>\n</html>","date":"2016-10-10T06:53:44.457Z","updated":"2016-10-10T06:53:44.457Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciugm6b7i00001giy9vnnveb4","content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<title>404页面</title>\n<style>\n*{margin:0;padding:0;outline:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;}\n.center{margin:0 auto;}\n.whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;}\n.whole img{width:100%;height:100%;}\n.mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);}\n.b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px}\np{color:#fff;margin-top:40px;font-size:24px;}\n#num{margin:0 5px;font-weight:bold;}\n</style>\n<script type=\"text/javascript\">\n\tvar num=4;\n\tfunction redirect(){\n\t\tnum--;\n\t\tdocument.getElementById(\"num\").innerHTML=num;\n\t\tif(num<0){\n\t\t\tdocument.getElementById(\"num\").innerHTML=0;\n\t\t\tlocation.href=\"http://xiaofeng.site\";\n\t\t\t}\n\t\t}\n\tsetInterval(\"redirect()\", 1000);\n</script>\n</head>\n\n<body onload=\"redirect();\">\n<div class=\"whole\">\n\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/back.jpg\">\n    <div class=\"mask\"></div>\n</div>\n<div class=\"b\">\n\t\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/404.png\" class=\"center\">\n\t\t<p>\n\t\t\t暂时未能找到您查找的页面<br>\n\t\t\t可能输入的网址错误或此页面不存在<br>\n            <span id=\"num\"></span>秒后自动跳转到主页\n\t\t</p>\n\t</div>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>404页面</title>\n<style>\n*{margin:0;padding:0;outline:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;}\n.center{margin:0 auto;}\n.whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;}\n.whole img{width:100%;height:100%;}\n.mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);}\n.b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px}\np{color:#fff;margin-top:40px;font-size:24px;}\n#num{margin:0 5px;font-weight:bold;}\n</style>\n<script type=\"text/javascript\">\n\tvar num=4;\n\tfunction redirect(){\n\t\tnum--;\n\t\tdocument.getElementById(\"num\").innerHTML=num;\n\t\tif(num<0){\n\t\t\tdocument.getElementById(\"num\").innerHTML=0;\n\t\t\tlocation.href=\"http://xiaofeng.site\";\n\t\t\t}\n\t\t}\n\tsetInterval(\"redirect()\", 1000);\n</script>\n</head>\n\n<body onload=\"redirect();\">\n<div class=\"whole\">\n\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/back.jpg\">\n    <div class=\"mask\"></div>\n</div>\n<div class=\"b\">\n\t\t<img src=\"http://7xowaa.com1.z0.glb.clouddn.com/404.png\" class=\"center\">\n\t\t<p>\n\t\t\t暂时未能找到您查找的页面<br>\n\t\t\t可能输入的网址错误或此页面不存在<br>\n            <span id=\"num\"></span>秒后自动跳转到主页\n\t\t</p>\n\t</div>\n\n</body>\n</html>"},{"_content":"T1QaggfO1O","source":"baidu_verify_T1QaggfO1O.html","raw":"T1QaggfO1O","date":"2016-10-10T06:53:44.542Z","updated":"2016-10-10T06:53:44.542Z","path":"baidu_verify_T1QaggfO1O.html","title":"","comments":1,"layout":"page","_id":"ciugm6b7k00011giyvmxtzrzm","content":"T1QaggfO1O","excerpt":"","more":"T1QaggfO1O"},{"_content":"google-site-verification: googlea507cc85570ed219.html","source":"googlea507cc85570ed219.html","raw":"google-site-verification: googlea507cc85570ed219.html","date":"2016-10-10T06:53:44.548Z","updated":"2016-10-10T06:53:44.548Z","path":"googlea507cc85570ed219.html","title":"","comments":1,"layout":"page","_id":"ciugm6b7m00021giyjlx1t9lz","content":"google-site-verification: googlea507cc85570ed219.html","excerpt":"","more":"google-site-verification: googlea507cc85570ed219.html"},{"_content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>献给我最爱的人-崔盼盼</title>\n\n<style type=\"text/css\">\n@font-face {\n\tfont-family: digit;\n\tsrc: url('digital-7_mono.ttf') format(\"truetype\");\n}\n</style>\n\n<link href=\"http://7xod2d.com1.z0.glb.clouddn.com/love/default.css\" type=\"text/css\" rel=\"stylesheet\">\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/jquery.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/garden.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/functions.js\"></script>\n\n</head>\n\n<body>\n\n<div id=\"mainDiv\">\n\t<div id=\"content\">\n\t\t<div id=\"code\">\n\t\t\t<span class=\"comments\">/**</span><br />\n\t\t\t<span class=\"space\"/><span class=\"comments\">*2014—12-20</span>\n\t\t\t<span class=\"space\"/><span class=\"comments\">- 2015-12-20</span><br />\n\t\t\t<span class=\"space\"/><span class=\"comments\">*/</span><br />\n\t\t\tBoy name = <span class=\"keyword\">Mr</span> GaoXiaoFeng<br />\n\t\t\tGirl name = <span class=\"keyword\">Mrs</span> CuiPanPan<br />\n\t\t\t<span class=\"comments\">// Fall in love river. </span><br />\n\t\t\tThe boy love the girl, the girl to be saied i love you at 2014-12-20;<br />\n\t\t\t<span class=\"comments\">// They love each other.</span><br />\n\t\t\tThe girl loved the boy;<br />\n\t\t\t<span class=\"comments\">// AS time goes on.</span><br />\n\t\t\tThe boy can not be separated the girl;<br />\n\t\t\t<span class=\"comments\">// At the same time.</span><br />\n\t\t\tThe girl can not be separated the boy;<br />\n\t\t\t<span class=\"comments\">// Both wind and snow all over the sky.</span><br />\n\t\t\tThey go to work and eat together everyday.<br />\n\t\t\t<span class=\"keyword\">The boy</span> very <span class=\"keyword\">happy</span>;<br />\n\t\t\t<span class=\"keyword\">The girl</span> is also very <span class=\"keyword\">happy</span>;<br />\n\t\t\t<span class=\"placeholder\"/><span class=\"comments\">// Whether it is right now</span><br />\n\t\t\t<span class=\"placeholder\"/><span class=\"comments\">// Still in the distant future.</span><br />\n\t\t\t<span class=\"placeholder\"/>The boy has but one dream;<br />\n\t\t\t<span class=\"comments\">// The boy wants the girl could well have been happy.</span><br />\n\t\t\t<br>\n\t\t\t<br>\n\t\t\tI want to say:<br />\n\t\t\tHoney, I love everyday with you, you should trust yourself and me, and we will create a better life together, i love you until your hair turns white, I'll always love you untill at the end of all my life! <br />\n\t\t</div>\n\t\t<div id=\"loveHeart\">\n\t\t\t<canvas id=\"garden\"></canvas>\n\t\t\t<div id=\"words\">\n\t\t\t\t<div id=\"messages\">\n\t\t\t\t\tHoney，this is the times we loved with each other。\n\t\t\t\t\t<div id=\"elapseClock\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"loveu\">\n\t\t\t\t\tI love you forever.<br/>\n\t\t\t\t\t<div class=\"signature\">- GaoXiaoFeng</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<script type=\"text/javascript\">\nvar offsetX = $(\"#loveHeart\").width() / 2;\nvar offsetY = $(\"#loveHeart\").height() / 2 - 55;\nvar together = new Date();\ntogether.setFullYear(2014, 11, 20);\ntogether.setHours(20);\ntogether.setMinutes(0);\ntogether.setSeconds(0);\ntogether.setMilliseconds(0);\n\nif (!document.createElement('canvas').getContext) {\n\tvar msg = document.createElement(\"div\");\n\tmsg.id = \"errorMsg\";\n\tmsg.innerHTML = \"Your browser doesn't support HTML5!<br/>Recommend use Chrome 14+/IE 9+/Firefox 7+/Safari 4+\"; \n\tdocument.body.appendChild(msg);\n\t$(\"#code\").css(\"display\", \"none\")\n\t$(\"#copyright\").css(\"position\", \"absolute\");\n\t$(\"#copyright\").css(\"bottom\", \"10px\");\n\tdocument.execCommand(\"stop\");\n} else {\n\tsetTimeout(function () {\n\t\tstartHeartAnimation();\n\t}, 5000);\n\n\ttimeElapse(together);\n\tsetInterval(function () {\n\t\ttimeElapse(together);\n\t}, 500);\n\n\tadjustCodePosition();\n\t$(\"#code\").typewriter();\n}\n</script>\n\n</body>\n</html>","source":"love.html","raw":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>献给我最爱的人-崔盼盼</title>\n\n<style type=\"text/css\">\n@font-face {\n\tfont-family: digit;\n\tsrc: url('digital-7_mono.ttf') format(\"truetype\");\n}\n</style>\n\n<link href=\"http://7xod2d.com1.z0.glb.clouddn.com/love/default.css\" type=\"text/css\" rel=\"stylesheet\">\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/jquery.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/garden.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/functions.js\"></script>\n\n</head>\n\n<body>\n\n<div id=\"mainDiv\">\n\t<div id=\"content\">\n\t\t<div id=\"code\">\n\t\t\t<span class=\"comments\">/**</span><br />\n\t\t\t<span class=\"space\"/><span class=\"comments\">*2014—12-20</span>\n\t\t\t<span class=\"space\"/><span class=\"comments\">- 2015-12-20</span><br />\n\t\t\t<span class=\"space\"/><span class=\"comments\">*/</span><br />\n\t\t\tBoy name = <span class=\"keyword\">Mr</span> GaoXiaoFeng<br />\n\t\t\tGirl name = <span class=\"keyword\">Mrs</span> CuiPanPan<br />\n\t\t\t<span class=\"comments\">// Fall in love river. </span><br />\n\t\t\tThe boy love the girl, the girl to be saied i love you at 2014-12-20;<br />\n\t\t\t<span class=\"comments\">// They love each other.</span><br />\n\t\t\tThe girl loved the boy;<br />\n\t\t\t<span class=\"comments\">// AS time goes on.</span><br />\n\t\t\tThe boy can not be separated the girl;<br />\n\t\t\t<span class=\"comments\">// At the same time.</span><br />\n\t\t\tThe girl can not be separated the boy;<br />\n\t\t\t<span class=\"comments\">// Both wind and snow all over the sky.</span><br />\n\t\t\tThey go to work and eat together everyday.<br />\n\t\t\t<span class=\"keyword\">The boy</span> very <span class=\"keyword\">happy</span>;<br />\n\t\t\t<span class=\"keyword\">The girl</span> is also very <span class=\"keyword\">happy</span>;<br />\n\t\t\t<span class=\"placeholder\"/><span class=\"comments\">// Whether it is right now</span><br />\n\t\t\t<span class=\"placeholder\"/><span class=\"comments\">// Still in the distant future.</span><br />\n\t\t\t<span class=\"placeholder\"/>The boy has but one dream;<br />\n\t\t\t<span class=\"comments\">// The boy wants the girl could well have been happy.</span><br />\n\t\t\t<br>\n\t\t\t<br>\n\t\t\tI want to say:<br />\n\t\t\tHoney, I love everyday with you, you should trust yourself and me, and we will create a better life together, i love you until your hair turns white, I'll always love you untill at the end of all my life! <br />\n\t\t</div>\n\t\t<div id=\"loveHeart\">\n\t\t\t<canvas id=\"garden\"></canvas>\n\t\t\t<div id=\"words\">\n\t\t\t\t<div id=\"messages\">\n\t\t\t\t\tHoney，this is the times we loved with each other。\n\t\t\t\t\t<div id=\"elapseClock\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"loveu\">\n\t\t\t\t\tI love you forever.<br/>\n\t\t\t\t\t<div class=\"signature\">- GaoXiaoFeng</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<script type=\"text/javascript\">\nvar offsetX = $(\"#loveHeart\").width() / 2;\nvar offsetY = $(\"#loveHeart\").height() / 2 - 55;\nvar together = new Date();\ntogether.setFullYear(2014, 11, 20);\ntogether.setHours(20);\ntogether.setMinutes(0);\ntogether.setSeconds(0);\ntogether.setMilliseconds(0);\n\nif (!document.createElement('canvas').getContext) {\n\tvar msg = document.createElement(\"div\");\n\tmsg.id = \"errorMsg\";\n\tmsg.innerHTML = \"Your browser doesn't support HTML5!<br/>Recommend use Chrome 14+/IE 9+/Firefox 7+/Safari 4+\"; \n\tdocument.body.appendChild(msg);\n\t$(\"#code\").css(\"display\", \"none\")\n\t$(\"#copyright\").css(\"position\", \"absolute\");\n\t$(\"#copyright\").css(\"bottom\", \"10px\");\n\tdocument.execCommand(\"stop\");\n} else {\n\tsetTimeout(function () {\n\t\tstartHeartAnimation();\n\t}, 5000);\n\n\ttimeElapse(together);\n\tsetInterval(function () {\n\t\ttimeElapse(together);\n\t}, 500);\n\n\tadjustCodePosition();\n\t$(\"#code\").typewriter();\n}\n</script>\n\n</body>\n</html>","date":"2016-10-10T06:53:44.548Z","updated":"2016-10-10T06:53:44.548Z","path":"love.html","title":"","comments":1,"layout":"page","_id":"ciugm6b7o00031giys0pbc778","content":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<title>献给我最爱的人-崔盼盼</title>\n\n<style type=\"text/css\">\n@font-face {\n\tfont-family: digit;\n\tsrc: url('digital-7_mono.ttf') format(\"truetype\");\n}\n</style>\n\n<link href=\"http://7xod2d.com1.z0.glb.clouddn.com/love/default.css\" type=\"text/css\" rel=\"stylesheet\">\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/jquery.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/garden.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/functions.js\"></script>\n\n</head>\n\n<body>\n\n<div id=\"mainDiv\">\n\t<div id=\"content\">\n\t\t<div id=\"code\">\n\t\t\t<span class=\"comments\">/**</span><br>\n\t\t\t<span class=\"space\"><span class=\"comments\">*2014—12-20</span>\n\t\t\t<span class=\"space\"><span class=\"comments\">- 2015-12-20</span><br>\n\t\t\t<span class=\"space\"><span class=\"comments\">*/</span><br>\n\t\t\tBoy name = <span class=\"keyword\">Mr</span> GaoXiaoFeng<br>\n\t\t\tGirl name = <span class=\"keyword\">Mrs</span> CuiPanPan<br>\n\t\t\t<span class=\"comments\">// Fall in love river. </span><br>\n\t\t\tThe boy love the girl, the girl to be saied i love you at 2014-12-20;<br>\n\t\t\t<span class=\"comments\">// They love each other.</span><br>\n\t\t\tThe girl loved the boy;<br>\n\t\t\t<span class=\"comments\">// AS time goes on.</span><br>\n\t\t\tThe boy can not be separated the girl;<br>\n\t\t\t<span class=\"comments\">// At the same time.</span><br>\n\t\t\tThe girl can not be separated the boy;<br>\n\t\t\t<span class=\"comments\">// Both wind and snow all over the sky.</span><br>\n\t\t\tThey go to work and eat together everyday.<br>\n\t\t\t<span class=\"keyword\">The boy</span> very <span class=\"keyword\">happy</span>;<br>\n\t\t\t<span class=\"keyword\">The girl</span> is also very <span class=\"keyword\">happy</span>;<br>\n\t\t\t<span class=\"placeholder\"><span class=\"comments\">// Whether it is right now</span><br>\n\t\t\t<span class=\"placeholder\"><span class=\"comments\">// Still in the distant future.</span><br>\n\t\t\t<span class=\"placeholder\">The boy has but one dream;<br>\n\t\t\t<span class=\"comments\">// The boy wants the girl could well have been happy.</span><br>\n\t\t\t<br>\n\t\t\t<br>\n\t\t\tI want to say:<br>\n\t\t\tHoney, I love everyday with you, you should trust yourself and me, and we will create a better life together, i love you until your hair turns white, I'll always love you untill at the end of all my life! <br>\n\t\t</span></span></span></span></span></span></div>\n\t\t<div id=\"loveHeart\">\n\t\t\t<canvas id=\"garden\"></canvas>\n\t\t\t<div id=\"words\">\n\t\t\t\t<div id=\"messages\">\n\t\t\t\t\tHoney，this is the times we loved with each other。\n\t\t\t\t\t<div id=\"elapseClock\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"loveu\">\n\t\t\t\t\tI love you forever.<br>\n\t\t\t\t\t<div class=\"signature\">- GaoXiaoFeng</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<script type=\"text/javascript\">\nvar offsetX = $(\"#loveHeart\").width() / 2;\nvar offsetY = $(\"#loveHeart\").height() / 2 - 55;\nvar together = new Date();\ntogether.setFullYear(2014, 11, 20);\ntogether.setHours(20);\ntogether.setMinutes(0);\ntogether.setSeconds(0);\ntogether.setMilliseconds(0);\n\nif (!document.createElement('canvas').getContext) {\n\tvar msg = document.createElement(\"div\");\n\tmsg.id = \"errorMsg\";\n\tmsg.innerHTML = \"Your browser doesn't support HTML5!<br/>Recommend use Chrome 14+/IE 9+/Firefox 7+/Safari 4+\"; \n\tdocument.body.appendChild(msg);\n\t$(\"#code\").css(\"display\", \"none\")\n\t$(\"#copyright\").css(\"position\", \"absolute\");\n\t$(\"#copyright\").css(\"bottom\", \"10px\");\n\tdocument.execCommand(\"stop\");\n} else {\n\tsetTimeout(function () {\n\t\tstartHeartAnimation();\n\t}, 5000);\n\n\ttimeElapse(together);\n\tsetInterval(function () {\n\t\ttimeElapse(together);\n\t}, 500);\n\n\tadjustCodePosition();\n\t$(\"#code\").typewriter();\n}\n</script>\n\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>献给我最爱的人-崔盼盼</title>\n\n<style type=\"text/css\">\n@font-face {\n\tfont-family: digit;\n\tsrc: url('digital-7_mono.ttf') format(\"truetype\");\n}\n</style>\n\n<link href=\"http://7xod2d.com1.z0.glb.clouddn.com/love/default.css\" type=\"text/css\" rel=\"stylesheet\">\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/jquery.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/garden.js\"></script>\n<script type=\"text/javascript\" src=\"http://7xod2d.com1.z0.glb.clouddn.com/love/functions.js\"></script>\n\n</head>\n\n<body>\n\n<div id=\"mainDiv\">\n\t<div id=\"content\">\n\t\t<div id=\"code\">\n\t\t\t<span class=\"comments\">/**</span><br />\n\t\t\t<span class=\"space\"/><span class=\"comments\">*2014—12-20</span>\n\t\t\t<span class=\"space\"/><span class=\"comments\">- 2015-12-20</span><br />\n\t\t\t<span class=\"space\"/><span class=\"comments\">*/</span><br />\n\t\t\tBoy name = <span class=\"keyword\">Mr</span> GaoXiaoFeng<br />\n\t\t\tGirl name = <span class=\"keyword\">Mrs</span> CuiPanPan<br />\n\t\t\t<span class=\"comments\">// Fall in love river. </span><br />\n\t\t\tThe boy love the girl, the girl to be saied i love you at 2014-12-20;<br />\n\t\t\t<span class=\"comments\">// They love each other.</span><br />\n\t\t\tThe girl loved the boy;<br />\n\t\t\t<span class=\"comments\">// AS time goes on.</span><br />\n\t\t\tThe boy can not be separated the girl;<br />\n\t\t\t<span class=\"comments\">// At the same time.</span><br />\n\t\t\tThe girl can not be separated the boy;<br />\n\t\t\t<span class=\"comments\">// Both wind and snow all over the sky.</span><br />\n\t\t\tThey go to work and eat together everyday.<br />\n\t\t\t<span class=\"keyword\">The boy</span> very <span class=\"keyword\">happy</span>;<br />\n\t\t\t<span class=\"keyword\">The girl</span> is also very <span class=\"keyword\">happy</span>;<br />\n\t\t\t<span class=\"placeholder\"/><span class=\"comments\">// Whether it is right now</span><br />\n\t\t\t<span class=\"placeholder\"/><span class=\"comments\">// Still in the distant future.</span><br />\n\t\t\t<span class=\"placeholder\"/>The boy has but one dream;<br />\n\t\t\t<span class=\"comments\">// The boy wants the girl could well have been happy.</span><br />\n\t\t\t<br>\n\t\t\t<br>\n\t\t\tI want to say:<br />\n\t\t\tHoney, I love everyday with you, you should trust yourself and me, and we will create a better life together, i love you until your hair turns white, I'll always love you untill at the end of all my life! <br />\n\t\t</div>\n\t\t<div id=\"loveHeart\">\n\t\t\t<canvas id=\"garden\"></canvas>\n\t\t\t<div id=\"words\">\n\t\t\t\t<div id=\"messages\">\n\t\t\t\t\tHoney，this is the times we loved with each other。\n\t\t\t\t\t<div id=\"elapseClock\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"loveu\">\n\t\t\t\t\tI love you forever.<br/>\n\t\t\t\t\t<div class=\"signature\">- GaoXiaoFeng</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<script type=\"text/javascript\">\nvar offsetX = $(\"#loveHeart\").width() / 2;\nvar offsetY = $(\"#loveHeart\").height() / 2 - 55;\nvar together = new Date();\ntogether.setFullYear(2014, 11, 20);\ntogether.setHours(20);\ntogether.setMinutes(0);\ntogether.setSeconds(0);\ntogether.setMilliseconds(0);\n\nif (!document.createElement('canvas').getContext) {\n\tvar msg = document.createElement(\"div\");\n\tmsg.id = \"errorMsg\";\n\tmsg.innerHTML = \"Your browser doesn't support HTML5!<br/>Recommend use Chrome 14+/IE 9+/Firefox 7+/Safari 4+\"; \n\tdocument.body.appendChild(msg);\n\t$(\"#code\").css(\"display\", \"none\")\n\t$(\"#copyright\").css(\"position\", \"absolute\");\n\t$(\"#copyright\").css(\"bottom\", \"10px\");\n\tdocument.execCommand(\"stop\");\n} else {\n\tsetTimeout(function () {\n\t\tstartHeartAnimation();\n\t}, 5000);\n\n\ttimeElapse(together);\n\tsetInterval(function () {\n\t\ttimeElapse(together);\n\t}, 500);\n\n\tadjustCodePosition();\n\t$(\"#code\").typewriter();\n}\n</script>\n\n</body>\n</html>"},{"_content":"hg1tugxzZf","source":"baidu_verify_hg1tugxzZf.html","raw":"hg1tugxzZf","date":"2016-10-10T06:53:44.542Z","updated":"2016-10-10T06:53:44.542Z","path":"baidu_verify_hg1tugxzZf.html","title":"","comments":1,"layout":"page","_id":"ciugm6b7p00041giy9iz6fgkf","content":"hg1tugxzZf","excerpt":"","more":"hg1tugxzZf"},{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n---","date":"2016-10-10T06:53:44.547Z","updated":"2016-10-10T06:53:44.547Z","path":"categories/index.html","comments":1,"_id":"ciugm6b9300061giy5tl7t0ey","content":"","excerpt":"","more":""},{"title":"about","email":"xiaofeng355@sina.com","date":"2015-11-12T11:44:18.000Z","_content":"\n\t通过各大国内外网站和自己的拙略看法，整理一些技术文档，当作笔记和大家交流学习。\n\n联系方式：\n\temail：xiaofeng355@gmail.com\n\t","source":"about/index.md","raw":"title: about\nemail: xiaofeng355@sina.com\ndate: 2015-11-12 19:44:18\n---\n\n\t通过各大国内外网站和自己的拙略看法，整理一些技术文档，当作笔记和大家交流学习。\n\n联系方式：\n\temail：xiaofeng355@gmail.com\n\t","updated":"2016-10-10T06:53:44.541Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciugm6b9800081giy2vn7xa2g","content":"<pre><code>通过各大国内外网站和自己的拙略看法，整理一些技术文档，当作笔记和大家交流学习。\n</code></pre><p>联系方式：<br>    email：xiaofeng355@gmail.com</p>\n","excerpt":"","more":"<pre><code>通过各大国内外网站和自己的拙略看法，整理一些技术文档，当作笔记和大家交流学习。\n</code></pre><p>联系方式：<br>    email：xiaofeng355@gmail.com</p>\n"},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n---","date":"2016-10-10T06:53:44.549Z","updated":"2016-10-10T06:53:44.549Z","path":"search/index.html","comments":1,"_id":"ciugm6b9e000c1giy15czc7sd","content":"","excerpt":"","more":""},{"layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\nnoDate: true\ncomments: false\n---","date":"2016-10-10T06:53:44.553Z","updated":"2016-10-10T06:53:44.553Z","path":"tags/index.html","title":"","_id":"ciugm6b9g000e1giyaginz0up","content":"","excerpt":"","more":""},{"layout":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index-1.md","raw":"layout: tags\nnoDate: true\ncomments: false\n---\n","date":"2016-10-10T06:53:44.553Z","updated":"2016-10-10T06:53:44.553Z","path":"tags/index-1.html","title":"","_id":"ciugm6b9k000i1giyxvq3r2r9","content":"","excerpt":"","more":""}],"Post":[{"title":"Android Material Design - Floating Labels for EditText","date":"2015-12-30T02:42:59.000Z","_content":"\n>原文作者：Ravi Tamada\n>原文地址：[http://www.androidhive.info/...aterial-design/](http://www.androidhive.info/2015/04/android-getting-started-with-material-design/)\n\n\nAndroid浮动标签在android设计支持库有介绍，在EditText上显示一个悬浮的标签。最初它在EditText中作为字段为空时的一个提示。当用户开始输入文本，它通过一个动画的形式，移动到悬浮标签的位置。\n\n这篇文章通过一个简单的表单验证的例子，演示了Floating Lables的用法。\n\n\n源码下载地址：[http://download.androidhive.info/...dfyJJ0xyaJTvXugo0HTV0LBnG9w](http://download.androidhive.info/download?code=J5TnQr8DLL52kPlAxeIk9Z3H21tlAtFcD74lW1gWZwyM6aEBkra49p%2FxpDDZz5ZfPieGEGoAopEZQOxyUGNRKuXhmSxB%2FW6QlimXGOiu8gWcH1pqtQKfO5AfA%3D%3DV7JclQNddfyJJ0xyaJTvXugo0HTV0LBnG9w)\n视频演示地址：[yutube-display](https://youtu.be/TYhpFJ58g6Y)\n\n### TextInputLayout\n\n在Material Design支持库中一个新的元素，叫作[TextInputLayout][1]，用于在EditText上展示悬浮标签。为了显示悬浮标签，EditText被TextInputLayout\n所包裹。你也可以给EditText设置一个错误的信息，通过使用`setErrorEnabled()`和`setError()`方法。\n\nTextInputLayout采用了EditText**android:hint**属性的值来作为悬浮标签显示。\n\n``` xml\n<android.support.design.widget.TextInputLayout\nandroid:id=\"@+id/input_layout_password\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\">\n \n        <EditText\n            android:id=\"@+id/input_password\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"@string/hint_email\" />\n \n</android.support.design.widget.TextInputLayout>\n```\n\n![android-design-support-library-floating-labels](http://www.androidhive.info/wp-content/uploads/2015/09/android-design-support-library-floating-labels.png)\n<!-- more -->\n\n\n### 简单的表单验证示例\n\n现在让我们来创建一个简单的android应用，去真正的了解TextInputLayout的用法。这个应用包含了一个带有悬浮标签的简答表单，输入验证和错误信息启用。\n\n**1.** 在Android Studio中，通过**File ⇒ New Project**并填好其它信息来新建一个项目。\n\n**2.** 打开**build.gradle**并且添加Material Design支持库的依赖。\n\n`com.android.support:design:23.0.1`\n\n`build.gradle`\n\t\n``` xml\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.android.support:design:23.0.1'\n}\n```\n\n**3.** 通过[这里][2]提到的步骤，应用Material Design主题，但这不是必须的。\n\n**4.** 添加下面字符串到**res ⇒ values => strings.xml**下面。\n\n`strings.xml`\n\n``` xml\n<resources>\n    <string name=\"app_name\">Floating Labels</string>\n    <string name=\"action_settings\">Settings</string>\n    <string name=\"hint_name\">Full Name</string>\n    <string name=\"hint_email\">Email</string>\n    <string name=\"hint_password\">Password</string>\n    <string name=\"btn_sign_up\">Sign Up</string>\n    <string name=\"err_msg_name\">Enter your full name</string>\n    <string name=\"err_msg_email\">Enter valid email address</string>\n    <string name=\"err_msg_password\">Enter the password</string>\n</resources>\n```\n\n**5.** 打开主activity的**activity_main.xml**布局文件，然后添加如下代码。这些代码创建了一个简单的表单，有三个输入框。这里你可以看到EditText被TextInputLayout所包裹。\n\n`activity_main.xml`\n\n``` xml\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n \n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|enterAlways\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n    </android.support.design.widget.AppBarLayout>\n \n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_marginTop=\"?attr/actionBarSize\"\n        android:orientation=\"vertical\"\n        android:paddingLeft=\"20dp\"\n        android:paddingRight=\"20dp\"\n        android:paddingTop=\"60dp\">\n \n        <android.support.design.widget.TextInputLayout\n            android:id=\"@+id/input_layout_name\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n \n            <EditText\n                android:id=\"@+id/input_name\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:singleLine=\"true\"\n                android:hint=\"@string/hint_name\" />\n        </android.support.design.widget.TextInputLayout>\n \n        <android.support.design.widget.TextInputLayout\n            android:id=\"@+id/input_layout_email\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n \n            <EditText\n                android:id=\"@+id/input_email\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:inputType=\"textEmailAddress\"\n                android:hint=\"@string/hint_email\" />\n        </android.support.design.widget.TextInputLayout>\n \n        <android.support.design.widget.TextInputLayout\n            android:id=\"@+id/input_layout_password\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n \n            <EditText\n                android:id=\"@+id/input_password\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:inputType=\"textPassword\"\n                android:hint=\"@string/hint_password\" />\n        </android.support.design.widget.TextInputLayout>\n \n        <Button android:id=\"@+id/btn_signup\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/btn_sign_up\"\n            android:background=\"@color/colorPrimary\"\n            android:layout_marginTop=\"40dp\"\n            android:textColor=\"@android:color/white\"/>\n \n    </LinearLayout>\n \n</android.support.design.widget.CoordinatorLayout>\n```\n\n**6.** 打开**MainActivity.java**并且按照以下代码修改，这里我已经添加了一些方法去验证用户的输入数据比如名字、email、密码。我也. 我也指定了TextWatcher给所有的edittext来验证用户正在输入的内容，当输入无效或者为空时，setError()方法就会被调用来显示错误信息。\n\n`MainActivity.java`\n\n``` java\npackage info.androidhive.floatinglabels;\n \nimport android.os.Bundle;\nimport android.support.design.widget.TextInputLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.text.Editable;\nimport android.text.TextUtils;\nimport android.text.TextWatcher;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private EditText inputName, inputEmail, inputPassword;\n    private TextInputLayout inputLayoutName, inputLayoutEmail, inputLayoutPassword;\n    private Button btnSignUp;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n \n        inputLayoutName = (TextInputLayout) findViewById(R.id.input_layout_name);\n        inputLayoutEmail = (TextInputLayout) findViewById(R.id.input_layout_email);\n        inputLayoutPassword = (TextInputLayout) findViewById(R.id.input_layout_password);\n        inputName = (EditText) findViewById(R.id.input_name);\n        inputEmail = (EditText) findViewById(R.id.input_email);\n        inputPassword = (EditText) findViewById(R.id.input_password);\n        btnSignUp = (Button) findViewById(R.id.btn_signup);\n \n        inputName.addTextChangedListener(new MyTextWatcher(inputName));\n        inputEmail.addTextChangedListener(new MyTextWatcher(inputEmail));\n        inputPassword.addTextChangedListener(new MyTextWatcher(inputPassword));\n \n        btnSignUp.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                submitForm();\n            }\n        });\n    }\n \n    /**\n     * Validating form\n     */\n    private void submitForm() {\n        if (!validateName()) {\n            return;\n        }\n \n        if (!validateEmail()) {\n            return;\n        }\n \n        if (!validatePassword()) {\n            return;\n        }\n \n        Toast.makeText(getApplicationContext(), \"Thank You!\", Toast.LENGTH_SHORT).show();\n    }\n \n    private boolean validateName() {\n        if (inputName.getText().toString().trim().isEmpty()) {\n            inputLayoutName.setError(getString(R.string.err_msg_name));\n            requestFocus(inputName);\n            return false;\n        } else {\n            inputLayoutName.setErrorEnabled(false);\n        }\n \n        return true;\n    }\n \n    private boolean validateEmail() {\n        String email = inputEmail.getText().toString().trim();\n \n        if (email.isEmpty() || !isValidEmail(email)) {\n            inputLayoutEmail.setError(getString(R.string.err_msg_email));\n            requestFocus(inputEmail);\n            return false;\n        } else {\n            inputLayoutEmail.setErrorEnabled(false);\n        }\n \n        return true;\n    }\n \n    private boolean validatePassword() {\n        if (inputPassword.getText().toString().trim().isEmpty()) {\n            inputLayoutPassword.setError(getString(R.string.err_msg_password));\n            requestFocus(inputPassword);\n            return false;\n        } else {\n            inputLayoutPassword.setErrorEnabled(false);\n        }\n \n        return true;\n    }\n \n    private static boolean isValidEmail(String email) {\n        return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();\n    }\n \n    private void requestFocus(View view) {\n        if (view.requestFocus()) {\n            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n        }\n    }\n \n    private class MyTextWatcher implements TextWatcher {\n \n        private View view;\n \n        private MyTextWatcher(View view) {\n            this.view = view;\n        }\n \n        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n        }\n \n        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n        }\n \n        public void afterTextChanged(Editable editable) {\n            switch (view.getId()) {\n                case R.id.input_name:\n                    validateName();\n                    break;\n                case R.id.input_email:\n                    validateEmail();\n                    break;\n                case R.id.input_password:\n                    validatePassword();\n                    break;\n            }\n        }\n    }\n}\n```\n\n![android-material-design-floating-labels](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels.png)\n\n![android-material-design-floating-labels-error-messages](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels-error-messages.png)\n\n\n\n[1]: https://developer.android.com/intl/zh-tw/reference/android/support/design/widget/TextInputLayout.html\n[2]: http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/","source":"_posts/Android-Material-Design-Floating-Labels-for-EditText.md","raw":"title: Android Material Design - Floating Labels for EditText\ndate: 2015-12-30 10:42:59\ncategories: [Android]\ntags: [Material Design, EditText, Floating Lables]\n---\n\n>原文作者：Ravi Tamada\n>原文地址：[http://www.androidhive.info/...aterial-design/](http://www.androidhive.info/2015/04/android-getting-started-with-material-design/)\n\n\nAndroid浮动标签在android设计支持库有介绍，在EditText上显示一个悬浮的标签。最初它在EditText中作为字段为空时的一个提示。当用户开始输入文本，它通过一个动画的形式，移动到悬浮标签的位置。\n\n这篇文章通过一个简单的表单验证的例子，演示了Floating Lables的用法。\n\n\n源码下载地址：[http://download.androidhive.info/...dfyJJ0xyaJTvXugo0HTV0LBnG9w](http://download.androidhive.info/download?code=J5TnQr8DLL52kPlAxeIk9Z3H21tlAtFcD74lW1gWZwyM6aEBkra49p%2FxpDDZz5ZfPieGEGoAopEZQOxyUGNRKuXhmSxB%2FW6QlimXGOiu8gWcH1pqtQKfO5AfA%3D%3DV7JclQNddfyJJ0xyaJTvXugo0HTV0LBnG9w)\n视频演示地址：[yutube-display](https://youtu.be/TYhpFJ58g6Y)\n\n### TextInputLayout\n\n在Material Design支持库中一个新的元素，叫作[TextInputLayout][1]，用于在EditText上展示悬浮标签。为了显示悬浮标签，EditText被TextInputLayout\n所包裹。你也可以给EditText设置一个错误的信息，通过使用`setErrorEnabled()`和`setError()`方法。\n\nTextInputLayout采用了EditText**android:hint**属性的值来作为悬浮标签显示。\n\n``` xml\n<android.support.design.widget.TextInputLayout\nandroid:id=\"@+id/input_layout_password\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\">\n \n        <EditText\n            android:id=\"@+id/input_password\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"@string/hint_email\" />\n \n</android.support.design.widget.TextInputLayout>\n```\n\n![android-design-support-library-floating-labels](http://www.androidhive.info/wp-content/uploads/2015/09/android-design-support-library-floating-labels.png)\n<!-- more -->\n\n\n### 简单的表单验证示例\n\n现在让我们来创建一个简单的android应用，去真正的了解TextInputLayout的用法。这个应用包含了一个带有悬浮标签的简答表单，输入验证和错误信息启用。\n\n**1.** 在Android Studio中，通过**File ⇒ New Project**并填好其它信息来新建一个项目。\n\n**2.** 打开**build.gradle**并且添加Material Design支持库的依赖。\n\n`com.android.support:design:23.0.1`\n\n`build.gradle`\n\t\n``` xml\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.android.support:design:23.0.1'\n}\n```\n\n**3.** 通过[这里][2]提到的步骤，应用Material Design主题，但这不是必须的。\n\n**4.** 添加下面字符串到**res ⇒ values => strings.xml**下面。\n\n`strings.xml`\n\n``` xml\n<resources>\n    <string name=\"app_name\">Floating Labels</string>\n    <string name=\"action_settings\">Settings</string>\n    <string name=\"hint_name\">Full Name</string>\n    <string name=\"hint_email\">Email</string>\n    <string name=\"hint_password\">Password</string>\n    <string name=\"btn_sign_up\">Sign Up</string>\n    <string name=\"err_msg_name\">Enter your full name</string>\n    <string name=\"err_msg_email\">Enter valid email address</string>\n    <string name=\"err_msg_password\">Enter the password</string>\n</resources>\n```\n\n**5.** 打开主activity的**activity_main.xml**布局文件，然后添加如下代码。这些代码创建了一个简单的表单，有三个输入框。这里你可以看到EditText被TextInputLayout所包裹。\n\n`activity_main.xml`\n\n``` xml\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n \n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|enterAlways\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n    </android.support.design.widget.AppBarLayout>\n \n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_marginTop=\"?attr/actionBarSize\"\n        android:orientation=\"vertical\"\n        android:paddingLeft=\"20dp\"\n        android:paddingRight=\"20dp\"\n        android:paddingTop=\"60dp\">\n \n        <android.support.design.widget.TextInputLayout\n            android:id=\"@+id/input_layout_name\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n \n            <EditText\n                android:id=\"@+id/input_name\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:singleLine=\"true\"\n                android:hint=\"@string/hint_name\" />\n        </android.support.design.widget.TextInputLayout>\n \n        <android.support.design.widget.TextInputLayout\n            android:id=\"@+id/input_layout_email\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n \n            <EditText\n                android:id=\"@+id/input_email\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:inputType=\"textEmailAddress\"\n                android:hint=\"@string/hint_email\" />\n        </android.support.design.widget.TextInputLayout>\n \n        <android.support.design.widget.TextInputLayout\n            android:id=\"@+id/input_layout_password\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n \n            <EditText\n                android:id=\"@+id/input_password\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:inputType=\"textPassword\"\n                android:hint=\"@string/hint_password\" />\n        </android.support.design.widget.TextInputLayout>\n \n        <Button android:id=\"@+id/btn_signup\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/btn_sign_up\"\n            android:background=\"@color/colorPrimary\"\n            android:layout_marginTop=\"40dp\"\n            android:textColor=\"@android:color/white\"/>\n \n    </LinearLayout>\n \n</android.support.design.widget.CoordinatorLayout>\n```\n\n**6.** 打开**MainActivity.java**并且按照以下代码修改，这里我已经添加了一些方法去验证用户的输入数据比如名字、email、密码。我也. 我也指定了TextWatcher给所有的edittext来验证用户正在输入的内容，当输入无效或者为空时，setError()方法就会被调用来显示错误信息。\n\n`MainActivity.java`\n\n``` java\npackage info.androidhive.floatinglabels;\n \nimport android.os.Bundle;\nimport android.support.design.widget.TextInputLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.text.Editable;\nimport android.text.TextUtils;\nimport android.text.TextWatcher;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private EditText inputName, inputEmail, inputPassword;\n    private TextInputLayout inputLayoutName, inputLayoutEmail, inputLayoutPassword;\n    private Button btnSignUp;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n \n        inputLayoutName = (TextInputLayout) findViewById(R.id.input_layout_name);\n        inputLayoutEmail = (TextInputLayout) findViewById(R.id.input_layout_email);\n        inputLayoutPassword = (TextInputLayout) findViewById(R.id.input_layout_password);\n        inputName = (EditText) findViewById(R.id.input_name);\n        inputEmail = (EditText) findViewById(R.id.input_email);\n        inputPassword = (EditText) findViewById(R.id.input_password);\n        btnSignUp = (Button) findViewById(R.id.btn_signup);\n \n        inputName.addTextChangedListener(new MyTextWatcher(inputName));\n        inputEmail.addTextChangedListener(new MyTextWatcher(inputEmail));\n        inputPassword.addTextChangedListener(new MyTextWatcher(inputPassword));\n \n        btnSignUp.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                submitForm();\n            }\n        });\n    }\n \n    /**\n     * Validating form\n     */\n    private void submitForm() {\n        if (!validateName()) {\n            return;\n        }\n \n        if (!validateEmail()) {\n            return;\n        }\n \n        if (!validatePassword()) {\n            return;\n        }\n \n        Toast.makeText(getApplicationContext(), \"Thank You!\", Toast.LENGTH_SHORT).show();\n    }\n \n    private boolean validateName() {\n        if (inputName.getText().toString().trim().isEmpty()) {\n            inputLayoutName.setError(getString(R.string.err_msg_name));\n            requestFocus(inputName);\n            return false;\n        } else {\n            inputLayoutName.setErrorEnabled(false);\n        }\n \n        return true;\n    }\n \n    private boolean validateEmail() {\n        String email = inputEmail.getText().toString().trim();\n \n        if (email.isEmpty() || !isValidEmail(email)) {\n            inputLayoutEmail.setError(getString(R.string.err_msg_email));\n            requestFocus(inputEmail);\n            return false;\n        } else {\n            inputLayoutEmail.setErrorEnabled(false);\n        }\n \n        return true;\n    }\n \n    private boolean validatePassword() {\n        if (inputPassword.getText().toString().trim().isEmpty()) {\n            inputLayoutPassword.setError(getString(R.string.err_msg_password));\n            requestFocus(inputPassword);\n            return false;\n        } else {\n            inputLayoutPassword.setErrorEnabled(false);\n        }\n \n        return true;\n    }\n \n    private static boolean isValidEmail(String email) {\n        return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();\n    }\n \n    private void requestFocus(View view) {\n        if (view.requestFocus()) {\n            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n        }\n    }\n \n    private class MyTextWatcher implements TextWatcher {\n \n        private View view;\n \n        private MyTextWatcher(View view) {\n            this.view = view;\n        }\n \n        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n        }\n \n        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n        }\n \n        public void afterTextChanged(Editable editable) {\n            switch (view.getId()) {\n                case R.id.input_name:\n                    validateName();\n                    break;\n                case R.id.input_email:\n                    validateEmail();\n                    break;\n                case R.id.input_password:\n                    validatePassword();\n                    break;\n            }\n        }\n    }\n}\n```\n\n![android-material-design-floating-labels](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels.png)\n\n![android-material-design-floating-labels-error-messages](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels-error-messages.png)\n\n\n\n[1]: https://developer.android.com/intl/zh-tw/reference/android/support/design/widget/TextInputLayout.html\n[2]: http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/","slug":"Android-Material-Design-Floating-Labels-for-EditText","published":1,"updated":"2016-10-10T06:53:44.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b8z00051giyxpt5gljd","content":"<blockquote>\n<p>原文作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/04/android-getting-started-with-material-design/\" target=\"_blank\" rel=\"external\">http://www.androidhive.info/…aterial-design/</a></p>\n</blockquote>\n<p>Android浮动标签在android设计支持库有介绍，在EditText上显示一个悬浮的标签。最初它在EditText中作为字段为空时的一个提示。当用户开始输入文本，它通过一个动画的形式，移动到悬浮标签的位置。</p>\n<p>这篇文章通过一个简单的表单验证的例子，演示了Floating Lables的用法。</p>\n<p>源码下载地址：<a href=\"http://download.androidhive.info/download?code=J5TnQr8DLL52kPlAxeIk9Z3H21tlAtFcD74lW1gWZwyM6aEBkra49p%2FxpDDZz5ZfPieGEGoAopEZQOxyUGNRKuXhmSxB%2FW6QlimXGOiu8gWcH1pqtQKfO5AfA%3D%3DV7JclQNddfyJJ0xyaJTvXugo0HTV0LBnG9w\" target=\"_blank\" rel=\"external\">http://download.androidhive.info/…dfyJJ0xyaJTvXugo0HTV0LBnG9w</a><br>视频演示地址：<a href=\"https://youtu.be/TYhpFJ58g6Y\" target=\"_blank\" rel=\"external\">yutube-display</a></p>\n<h3 id=\"TextInputLayout\"><a href=\"#TextInputLayout\" class=\"headerlink\" title=\"TextInputLayout\"></a>TextInputLayout</h3><p>在Material Design支持库中一个新的元素，叫作<a href=\"https://developer.android.com/intl/zh-tw/reference/android/support/design/widget/TextInputLayout.html\" target=\"_blank\" rel=\"external\">TextInputLayout</a>，用于在EditText上展示悬浮标签。为了显示悬浮标签，EditText被TextInputLayout<br>所包裹。你也可以给EditText设置一个错误的信息，通过使用<code>setErrorEnabled()</code>和<code>setError()</code>方法。</p>\n<p>TextInputLayout采用了EditText<strong>android:hint</strong>属性的值来作为悬浮标签显示。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_password\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_password\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_email\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-design-support-library-floating-labels.png\" alt=\"android-design-support-library-floating-labels\"><br><a id=\"more\"></a></p>\n<h3 id=\"简单的表单验证示例\"><a href=\"#简单的表单验证示例\" class=\"headerlink\" title=\"简单的表单验证示例\"></a>简单的表单验证示例</h3><p>现在让我们来创建一个简单的android应用，去真正的了解TextInputLayout的用法。这个应用包含了一个带有悬浮标签的简答表单，输入验证和错误信息启用。</p>\n<p><strong>1.</strong> 在Android Studio中，通过<strong>File ⇒ New Project</strong>并填好其它信息来新建一个项目。</p>\n<p><strong>2.</strong> 打开<strong>build.gradle</strong>并且添加Material Design支持库的依赖。</p>\n<p><code>com.android.support:design:23.0.1</code></p>\n<p><code>build.gradle</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:23.0.1'</div><div class=\"line\">    compile 'com.android.support:design:23.0.1'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3.</strong> 通过<a href=\"http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/\" target=\"_blank\" rel=\"external\">这里</a>提到的步骤，应用Material Design主题，但这不是必须的。</p>\n<p><strong>4.</strong> 添加下面字符串到<strong>res ⇒ values =&gt; strings.xml</strong>下面。</p>\n<p><code>strings.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app_name\"</span>&gt;</span>Floating Labels<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action_settings\"</span>&gt;</span>Settings<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hint_name\"</span>&gt;</span>Full Name<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hint_email\"</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hint_password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"btn_sign_up\"</span>&gt;</span>Sign Up<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"err_msg_name\"</span>&gt;</span>Enter your full name<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"err_msg_email\"</span>&gt;</span>Enter valid email address<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"err_msg_password\"</span>&gt;</span>Enter the password<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>5.</strong> 打开主activity的<strong>activity_main.xml</strong>布局文件，然后添加如下代码。这些代码创建了一个简单的表单，有三个输入框。这里你可以看到EditText被TextInputLayout所包裹。</p>\n<p><code>activity_main.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"60dp\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_name\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_name\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_name\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_email\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_email\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textEmailAddress\"</span></div><div class=\"line\">                <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_email\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_password\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">EditText</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_password\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textPassword\"</span></div><div class=\"line\">                <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_password\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/btn_signup\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/btn_sign_up\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/white\"</span>/&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>6.</strong> 打开<strong>MainActivity.java</strong>并且按照以下代码修改，这里我已经添加了一些方法去验证用户的输入数据比如名字、email、密码。我也. 我也指定了TextWatcher给所有的edittext来验证用户正在输入的内容，当输入无效或者为空时，setError()方法就会被调用来显示错误信息。</p>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.floatinglabels;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TextInputLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.Editable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextWatcher;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText inputName, inputEmail, inputPassword;</div><div class=\"line\">    <span class=\"keyword\">private</span> TextInputLayout inputLayoutName, inputLayoutEmail, inputLayoutPassword;</div><div class=\"line\">    <span class=\"keyword\">private</span> Button btnSignUp;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\"> </div><div class=\"line\">        inputLayoutName = (TextInputLayout) findViewById(R.id.input_layout_name);</div><div class=\"line\">        inputLayoutEmail = (TextInputLayout) findViewById(R.id.input_layout_email);</div><div class=\"line\">        inputLayoutPassword = (TextInputLayout) findViewById(R.id.input_layout_password);</div><div class=\"line\">        inputName = (EditText) findViewById(R.id.input_name);</div><div class=\"line\">        inputEmail = (EditText) findViewById(R.id.input_email);</div><div class=\"line\">        inputPassword = (EditText) findViewById(R.id.input_password);</div><div class=\"line\">        btnSignUp = (Button) findViewById(R.id.btn_signup);</div><div class=\"line\"> </div><div class=\"line\">        inputName.addTextChangedListener(<span class=\"keyword\">new</span> MyTextWatcher(inputName));</div><div class=\"line\">        inputEmail.addTextChangedListener(<span class=\"keyword\">new</span> MyTextWatcher(inputEmail));</div><div class=\"line\">        inputPassword.addTextChangedListener(<span class=\"keyword\">new</span> MyTextWatcher(inputPassword));</div><div class=\"line\"> </div><div class=\"line\">        btnSignUp.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                submitForm();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Validating form</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">submitForm</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!validateName()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (!validateEmail()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (!validatePassword()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        Toast.makeText(getApplicationContext(), <span class=\"string\">\"Thank You!\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validateName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (inputName.getText().toString().trim().isEmpty()) &#123;</div><div class=\"line\">            inputLayoutName.setError(getString(R.string.err_msg_name));</div><div class=\"line\">            requestFocus(inputName);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inputLayoutName.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validateEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String email = inputEmail.getText().toString().trim();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (email.isEmpty() || !isValidEmail(email)) &#123;</div><div class=\"line\">            inputLayoutEmail.setError(getString(R.string.err_msg_email));</div><div class=\"line\">            requestFocus(inputEmail);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inputLayoutEmail.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validatePassword</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (inputPassword.getText().toString().trim().isEmpty()) &#123;</div><div class=\"line\">            inputLayoutPassword.setError(getString(R.string.err_msg_password));</div><div class=\"line\">            requestFocus(inputPassword);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inputLayoutPassword.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !TextUtils.isEmpty(email) &amp;&amp; android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestFocus</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.requestFocus()) &#123;</div><div class=\"line\">            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTextWatcher</span> <span class=\"keyword\">implements</span> <span class=\"title\">TextWatcher</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">private</span> View view;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MyTextWatcher</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.view = view;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence charSequence, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> i1, <span class=\"keyword\">int</span> i2)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence charSequence, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> i1, <span class=\"keyword\">int</span> i2)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable editable)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.input_name:</div><div class=\"line\">                    validateName();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.input_email:</div><div class=\"line\">                    validateEmail();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.input_password:</div><div class=\"line\">                    validatePassword();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels.png\" alt=\"android-material-design-floating-labels\"></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels-error-messages.png\" alt=\"android-material-design-floating-labels-error-messages\"></p>\n","excerpt":"<blockquote>\n<p>原文作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/04/android-getting-started-with-material-design/\">http://www.androidhive.info/…aterial-design/</a></p>\n</blockquote>\n<p>Android浮动标签在android设计支持库有介绍，在EditText上显示一个悬浮的标签。最初它在EditText中作为字段为空时的一个提示。当用户开始输入文本，它通过一个动画的形式，移动到悬浮标签的位置。</p>\n<p>这篇文章通过一个简单的表单验证的例子，演示了Floating Lables的用法。</p>\n<p>源码下载地址：<a href=\"http://download.androidhive.info/download?code=J5TnQr8DLL52kPlAxeIk9Z3H21tlAtFcD74lW1gWZwyM6aEBkra49p%2FxpDDZz5ZfPieGEGoAopEZQOxyUGNRKuXhmSxB%2FW6QlimXGOiu8gWcH1pqtQKfO5AfA%3D%3DV7JclQNddfyJJ0xyaJTvXugo0HTV0LBnG9w\">http://download.androidhive.info/…dfyJJ0xyaJTvXugo0HTV0LBnG9w</a><br>视频演示地址：<a href=\"https://youtu.be/TYhpFJ58g6Y\">yutube-display</a></p>\n<h3 id=\"TextInputLayout\"><a href=\"#TextInputLayout\" class=\"headerlink\" title=\"TextInputLayout\"></a>TextInputLayout</h3><p>在Material Design支持库中一个新的元素，叫作<a href=\"https://developer.android.com/intl/zh-tw/reference/android/support/design/widget/TextInputLayout.html\">TextInputLayout</a>，用于在EditText上展示悬浮标签。为了显示悬浮标签，EditText被TextInputLayout<br>所包裹。你也可以给EditText设置一个错误的信息，通过使用<code>setErrorEnabled()</code>和<code>setError()</code>方法。</p>\n<p>TextInputLayout采用了EditText<strong>android:hint</strong>属性的值来作为悬浮标签显示。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></div><div class=\"line\"><span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_password\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\"><span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_password\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_email\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-design-support-library-floating-labels.png\" alt=\"android-design-support-library-floating-labels\"><br>","more":"</p>\n<h3 id=\"简单的表单验证示例\"><a href=\"#简单的表单验证示例\" class=\"headerlink\" title=\"简单的表单验证示例\"></a>简单的表单验证示例</h3><p>现在让我们来创建一个简单的android应用，去真正的了解TextInputLayout的用法。这个应用包含了一个带有悬浮标签的简答表单，输入验证和错误信息启用。</p>\n<p><strong>1.</strong> 在Android Studio中，通过<strong>File ⇒ New Project</strong>并填好其它信息来新建一个项目。</p>\n<p><strong>2.</strong> 打开<strong>build.gradle</strong>并且添加Material Design支持库的依赖。</p>\n<p><code>com.android.support:design:23.0.1</code></p>\n<p><code>build.gradle</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:23.0.1'</div><div class=\"line\">    compile 'com.android.support:design:23.0.1'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>3.</strong> 通过<a href=\"http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/\">这里</a>提到的步骤，应用Material Design主题，但这不是必须的。</p>\n<p><strong>4.</strong> 添加下面字符串到<strong>res ⇒ values =&gt; strings.xml</strong>下面。</p>\n<p><code>strings.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app_name\"</span>&gt;</span>Floating Labels<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action_settings\"</span>&gt;</span>Settings<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hint_name\"</span>&gt;</span>Full Name<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hint_email\"</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hint_password\"</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"btn_sign_up\"</span>&gt;</span>Sign Up<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"err_msg_name\"</span>&gt;</span>Enter your full name<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"err_msg_email\"</span>&gt;</span>Enter valid email address<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"err_msg_password\"</span>&gt;</span>Enter the password<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>5.</strong> 打开主activity的<strong>activity_main.xml</strong>布局文件，然后添加如下代码。这些代码创建了一个简单的表单，有三个输入框。这里你可以看到EditText被TextInputLayout所包裹。</p>\n<p><code>activity_main.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"60dp\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_name\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_name\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:singleLine</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_name\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_email\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_email\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textEmailAddress\"</span></div><div class=\"line\">                <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_email\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TextInputLayout</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_layout_password\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">EditText</span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/input_password\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:inputType</span>=<span class=\"string\">\"textPassword\"</span></div><div class=\"line\">                <span class=\"attr\">android:hint</span>=<span class=\"string\">\"@string/hint_password\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/btn_signup\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/btn_sign_up\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@android:color/white\"</span>/&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>6.</strong> 打开<strong>MainActivity.java</strong>并且按照以下代码修改，这里我已经添加了一些方法去验证用户的输入数据比如名字、email、密码。我也. 我也指定了TextWatcher给所有的edittext来验证用户正在输入的内容，当输入无效或者为空时，setError()方法就会被调用来显示错误信息。</p>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.floatinglabels;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TextInputLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.Editable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> android.text.TextWatcher;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> EditText inputName, inputEmail, inputPassword;</div><div class=\"line\">    <span class=\"keyword\">private</span> TextInputLayout inputLayoutName, inputLayoutEmail, inputLayoutPassword;</div><div class=\"line\">    <span class=\"keyword\">private</span> Button btnSignUp;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\"> </div><div class=\"line\">        inputLayoutName = (TextInputLayout) findViewById(R.id.input_layout_name);</div><div class=\"line\">        inputLayoutEmail = (TextInputLayout) findViewById(R.id.input_layout_email);</div><div class=\"line\">        inputLayoutPassword = (TextInputLayout) findViewById(R.id.input_layout_password);</div><div class=\"line\">        inputName = (EditText) findViewById(R.id.input_name);</div><div class=\"line\">        inputEmail = (EditText) findViewById(R.id.input_email);</div><div class=\"line\">        inputPassword = (EditText) findViewById(R.id.input_password);</div><div class=\"line\">        btnSignUp = (Button) findViewById(R.id.btn_signup);</div><div class=\"line\"> </div><div class=\"line\">        inputName.addTextChangedListener(<span class=\"keyword\">new</span> MyTextWatcher(inputName));</div><div class=\"line\">        inputEmail.addTextChangedListener(<span class=\"keyword\">new</span> MyTextWatcher(inputEmail));</div><div class=\"line\">        inputPassword.addTextChangedListener(<span class=\"keyword\">new</span> MyTextWatcher(inputPassword));</div><div class=\"line\"> </div><div class=\"line\">        btnSignUp.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                submitForm();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Validating form</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">submitForm</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!validateName()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (!validateEmail()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (!validatePassword()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        Toast.makeText(getApplicationContext(), <span class=\"string\">\"Thank You!\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validateName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (inputName.getText().toString().trim().isEmpty()) &#123;</div><div class=\"line\">            inputLayoutName.setError(getString(R.string.err_msg_name));</div><div class=\"line\">            requestFocus(inputName);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inputLayoutName.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validateEmail</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String email = inputEmail.getText().toString().trim();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (email.isEmpty() || !isValidEmail(email)) &#123;</div><div class=\"line\">            inputLayoutEmail.setError(getString(R.string.err_msg_email));</div><div class=\"line\">            requestFocus(inputEmail);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inputLayoutEmail.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">validatePassword</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (inputPassword.getText().toString().trim().isEmpty()) &#123;</div><div class=\"line\">            inputLayoutPassword.setError(getString(R.string.err_msg_password));</div><div class=\"line\">            requestFocus(inputPassword);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            inputLayoutPassword.setErrorEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidEmail</span><span class=\"params\">(String email)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> !TextUtils.isEmpty(email) &amp;&amp; android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestFocus</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (view.requestFocus()) &#123;</div><div class=\"line\">            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTextWatcher</span> <span class=\"keyword\">implements</span> <span class=\"title\">TextWatcher</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">private</span> View view;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MyTextWatcher</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.view = view;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence charSequence, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> i1, <span class=\"keyword\">int</span> i2)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence charSequence, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> i1, <span class=\"keyword\">int</span> i2)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable editable)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (view.getId()) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.input_name:</div><div class=\"line\">                    validateName();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.input_email:</div><div class=\"line\">                    validateEmail();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> R.id.input_password:</div><div class=\"line\">                    validatePassword();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels.png\" alt=\"android-material-design-floating-labels\"></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-floating-labels-error-messages.png\" alt=\"android-material-design-floating-labels-error-messages\"></p>"},{"title":"Android Material Design - Tabs","date":"2015-12-28T03:51:06.000Z","_content":"\n> 原作者：Ravi Tamada\n> 原文地址：[http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/](http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/)\n\n\n[Android Design支持库][1] 提供了很好的向后兼容性，在Material Design支持库中的组件中，像Navigation Drawer, FloatingAction Button, Snackbar, Tabs, Floating labels ， animation frameworks。在这里我们将学习怎样实现tabs。\n\n在进一步深入了解之前，我建议先看一下[tabs的文档][2]，它可以告诉你在实现tabs的时候，什么该做什么不该做。\n\n这里还有yutube的视频：[到墙外看一看][3]\n\n### 使用Material\n首先我们创建一个新的项目并且应用Material主题，如果你不知道Material Design，那么可以看看文章[Material Design入门][4]\n\n**1**.在Android Studio中，**File => New Project**并且填好其它信息去创建一个新项目。\n\n**2**.打开**build.gradle**然后添加支持库**com.android.support:design:23.0.1**\n\n`build.gradle`\n``` xml\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.android.support:design:23.0.1'\n}\n```\n<!-- more -->\n\n\n**3**.打开位于**res => values**下的**colors.xml**，并且添加以下颜色值：\n\n`colors.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimary\">#125688</color>\n    <color name=\"colorPrimaryDark\">#125688</color>\n    <color name=\"textColorPrimary\">#FFFFFF</color>\n    <color name=\"windowBackground\">#FFFFFF</color>\n    <color name=\"navigationBarColor\">#000000</color>\n    <color name=\"colorAccent\">#c8e8ff</color>\n</resources>\n```\n\n**4**.在**res => values**下的**dimens.xml**添加以下代码：\n\n`dimens.xml`\n``` xml\n<resources>\n    <!-- Default screen margins, per the Android Design guidelines. -->\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n    <dimen name=\"tab_max_width\">264dp</dimen>\n    <dimen name=\"tab_padding_bottom\">16dp</dimen>\n    <dimen name=\"tab_label\">14sp</dimen>\n    <dimen name=\"custom_tab_layout_height\">72dp</dimen>\n</resources>\n```\n\n**5**. 打开**res ⇒ values**下的**styles.xml**，并添加以下主题。在**styles.xml**中这个主题是通用于所有安卓版本的。\n\n`styles.xml`\n``` xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n \n    </style>\n \n    <style name=\"MyMaterialTheme.Base\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <item name=\"windowNoTitle\">true</item>\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n \n</resources>\n```\n\n**6.** 在**res**下面创建**values-v21**文件夹，然后创建另外一个**styles.xml**，写入以下主题，这个主题是适用于Android 5.0的。\n\n`styles.xml`\n``` xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n        <item name=\"android:windowContentTransitions\">true</item>\n        <item name=\"android:windowAllowEnterTransitionOverlap\">true</item>\n        <item name=\"android:windowAllowReturnTransitionOverlap\">true</item>\n        <item name=\"android:windowSharedElementEnterTransition\">@android:transition/move</item>\n        <item name=\"android:windowSharedElementExitTransition\">@android:transition/move</item>\n    </style>\n \n</resources>\n```\n\n**7.** 最后打开**AndroidManifest.xml**并且修改**android:theme**属性为我们自定义的主题。\n\n`AndroidManifest.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"info.androidhive.materialtabs\" >\n \n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/MyMaterialTheme\" >\n        <activity\n            android:name=\".activity.MainActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n \n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n</manifest>\n```\n\n运行这个应用，通过通知栏的颜色来验证一下Material Design主题。如果你看到通知栏颜色改变了，这就意味着Material Design主题已经被成功使用。\n\n图例\n\n现在我们已经有了Material Design主题的应用，接下来让我们开始添加tabs。但是在这之前。我们需要创建一些fragment来协助测试，所有这些fragment只有非常简单的UI，一个TextView而已。\n\n**8.** 在你的包目录下，创建一个fragment，命名为**OneFragment.java**并添加以下代码：\n\n`OneFragment.java`\n``` java\npackage info.androidhive.materialtabs.fragments;\n \nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n \nimport info.androidhive.materialtabs.R;\n \n \npublic class OneFragment extends Fragment{\n \n    public OneFragment() {\n        // Required empty public constructor\n    }\n \n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_one, container, false);\n    }\n \n}\n```\n\n**9.** 在**res ⇒ layout**下添加**fragment_one.xml**，写入以下代码：\n\n`fragment_one.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"info.androidhive.materialtabs.fragments.OneFragment\">\n \n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/one\"\n        android:textSize=\"40dp\"\n        android:textStyle=\"bold\"\n        android:layout_centerInParent=\"true\"/>\n \n</RelativeLayout>\n```\n\n**10.** 同样的，创建一些其它的fragment，并且写入像**OneFragment.java**一样的代码，我已经创建好了**TwoFragment.java**, **ThreeFragment.java**, **FourFragemnt.java**一直到**TenFragment.java**\n\n\n### 固定标签\n\n当tabs是固定数目的时候，你可以使用这个方式。这些tabs固定在适当的位置。在design支持库中，一些新的元素像**CoordinatorLayout**、**AppBarLayout**、**TabLayout**等介绍了很多。我覆盖不到所有的情况，因为这不是本文的目的。\n\n**11**. 打开布局文件**activity_main.xml**并修改为一下代码：\n\n`app:tabMode` – 定义tab的形式，在这我们定义为**fixed**\n\n`activity_main.xml`\n``` xml\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n \n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|enterAlways\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n \n        <android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:tabMode=\"fixed\"\n            app:tabGravity=\"fill\"/>\n    </android.support.design.widget.AppBarLayout>\n \n    <android.support.v4.view.ViewPager\n        android:id=\"@+id/viewpager\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"  />\n</android.support.design.widget.CoordinatorLayout>\n```\n\n**12.** 打开**MainActivity.java** 并作以下修改：\n\n`tabLayout.setupWithViewPager()` – 适配ViewPager给TabLayout\n\n`setupViewPager()` – 通过添加适当的fragment来设置tabs的数量和tab的名字\n\n`ViewPagerAdapter` – 自定义适配器类提供了ViewPager需要的额fragment\n\n`MainActivity.java`\n\n``` java\npackage info.androidhive.materialtabs.activity;\n \nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nimport info.androidhive.materialtabs.R;\nimport info.androidhive.materialtabs.fragments.OneFragment;\nimport info.androidhive.materialtabs.fragments.ThreeFragment;\nimport info.androidhive.materialtabs.fragments.TwoFragment;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n \n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFragment(new OneFragment(), \"ONE\");\n        adapter.addFragment(new TwoFragment(), \"TWO\");\n        adapter.addFragment(new ThreeFragment(), \"THREE\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFragment(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n现在运行这个应用，你应该能看到tabs已经显示，并且能够通过滑动在他们之间切换。\n\n![swipe](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-tab-layout.png)\n\n\n**2.1** 屏幕宽度的标签\n如果你想要标签栏占据整个屏幕的宽度，你需要给TabLayout设置 **app:tabGravity=\"fill\"**属性。\n\n![full](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-landscape-view.png)\n\n\n**2.2** 中心对齐的标签\n如果你想要你的标签按照水平居中的形式来显示，你需要给TabLayout设置**app:tabGravity=\"center\"**的属性。\n\n![full](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-gravity-center.png)\n\n\n### 滚动标签\n\n当你有很多标签时，并且一个屏幕的空间放不下的时候，你可以使用滑动标签。标签可以滚动，给TabLayout设置**app:tabMode=\"scrollable\"**即可。\n\n**13.** 打开**activity_main.xml**并且修改**app:tabMode**为**scrollable**。\n\n``` xml\n<android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:tabMode=\"scrollable\"/>\n```\n\n**14.** 编辑**MainActivity.java**并且添加一些fragment到ViewPager通过**setupViewPager()**方法。我已经添加了10个fragment，这样做之后，你的MainActivity应该像下面这样。\n\n`MainActivity.java`\n\n``` java\npackage info.androidhive.materialtabs.activity;\n \nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFrag(new OneFragment(), \"ONE\");\n        adapter.addFrag(new TwoFragment(), \"TWO\");\n        adapter.addFrag(new ThreeFragment(), \"THREE\");\n        adapter.addFrag(new FourFragment(), \"FOUR\");\n        adapter.addFrag(new FiveFragment(), \"FIVE\");\n        adapter.addFrag(new SixFragment(), \"SIX\");\n        adapter.addFrag(new SevenFragment(), \"SEVEN\");\n        adapter.addFrag(new EightFragment(), \"EIGHT\");\n        adapter.addFrag(new NineFragment(), \"NINE\");\n        adapter.addFrag(new TenFragment(), \"TEN\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFrag(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n现在如果你再运行你的应用，你就可以看到很多tabs，而且具有欢动功能。 \n\n![layout](http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout.png)\n![horizontal](http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout-horizontal.png)\n\n\n### 图文标签\n\n有时候你可能想要给标签添加图标。此前给标签添加图标是非常繁琐的过程，但是现在有了Material Design支持库，这就变得很容易了。所以你必须要做的就是调用**setIcon()**方法来设置适当的图标，这个图标就可以显示在标签文字前面了。\n\n``` java\ntabLayout.getTabAt(0).setIcon(tabIcons[0]);\ntabLayout.getTabAt(1).setIcon(tabIcons[1]);\n```\n\n**15.** 打开**MainActivity.java**并且按照下面来修改代码。在这里我已经添加了一个新的方法**setupTabIcons()**来设置标签的图标。\n\n`MainActivity.java`\n``` java\nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n    private int[] tabIcons = {\n            R.drawable.ic_tab_favourite,\n            R.drawable.ic_tab_call,\n            R.drawable.ic_tab_contacts\n    };\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n        setupTabIcons();\n    }\n \n    private void setupTabIcons() {\n        tabLayout.getTabAt(0).setIcon(tabIcons[0]);\n        tabLayout.getTabAt(1).setIcon(tabIcons[1]);\n        tabLayout.getTabAt(2).setIcon(tabIcons[2]);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFrag(new OneFragment(), \"ONE\");\n        adapter.addFrag(new TwoFragment(), \"TWO\");\n        adapter.addFrag(new ThreeFragment(), \"THREE\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFrag(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n![android-tab-layout-with-icon-and-text](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-icon-and-text.png)\n\n\n### 图标标签\n\n仅仅设置图标的选项卡是和图文的选项卡是一样的，只是ViewPagerAdapter类的**getPageTitle()**方法返回值为null即可。\n\n**16.** 打开**MainActivity.java**并按照下面的代码修改**getPageTitle()**方法，接着运行项目。\n\n``` java\n\n@Override\npublic CharSequence getPageTitle(int position) {\n \n    // return null to display only the icon\n    return null;\n}\n```\n\n![android-tab-layout-with-only-icons](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-only-icons.png)\n\n\n### 自定义图文选项卡\n\n当默认的选项卡布局不能达到你预期的输出效果时，自定义选项卡就非常实用了。在你自定义选项卡试图的时候，请务必遵循Android选项卡的规范建议。\n\n当我们设置了图文选项卡时，你能够看到图标和文字是水平居中的，但是如果你想要放置图标在选项卡标签之上，你就必须使用一个自定义的view来完成它。\n\n**17.** 在**res ⇒ values**下面,创建**fonts.xml**文件，并且添加以下字符串值。这个xml文件定义了选项卡中文字所使用的字体。\n\n`fonts.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"font_fontFamily_medium\">sans-serif</string>\n</resources>\n```\n**18.** 在**res ⇒ values-v21下面，创建另一个**fonts.xml**文件。\n\n`fonts.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"font_fontFamily_medium\">sans-serif-medium</string>\n</resources>\n```\n\n**19.** 打开**activity_main.xml**并且给TabLayout设置自定义的高度。设置这个高度显得非常重要，因为在选项卡标签上面放置图标需要更多的空间。\n\n``` xml\n\n<android.support.design.widget.TabLayout\n           android:id=\"@+id/tabs\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"@dimen/custom_tab_layout_height\"\n           app:tabMode=\"fixed\"\n           app:tabGravity=\"fill\"/>\n```\n\n**20.** 在**res ⇒ layout**下新建的一个xml文件**custom_tab.xml**，这个文件是用来自定义选项卡布局的。\n\n`custom_tab.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/tab\"\n    android:textColor=\"@color/colorAccent\"\n    android:textSize=\"@dimen/tab_label\"\n    android:fontFamily=\"@string/font_fontFamily_medium\"/>\n```\n\n**21.** 打开**MainActivity.java**并按照下面的代码做修改。这里你是否注意到setupTabIcon()方法。下面的代码中我已经给每一个选项卡使用了custom_tab.xml布局，。\n\n``` java\nTextView tabOne = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\ntabOne.setText(\"ONE\");\ntabOne.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_favourite, 0, 0);\ntabLayout.getTabAt(0).setCustomView(tabOne);\n```\n\n`MainActivity.java`\n\n``` java\nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.widget.TextView;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nimport info.androidhive.materialtabs.R;\nimport info.androidhive.materialtabs.fragments.OneFragment;\nimport info.androidhive.materialtabs.fragments.ThreeFragment;\nimport info.androidhive.materialtabs.fragments.TwoFragment;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n    private int[] tabIcons = {\n            R.drawable.ic_tab_favourite,\n            R.drawable.ic_tab_call,\n            R.drawable.ic_tab_contacts\n    };\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n        setupTabIcons();\n    }\n \n    private void setupTabIcons() {\n \n        TextView tabOne = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\n        tabOne.setText(\"ONE\");\n        tabOne.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_favourite, 0, 0);\n        tabLayout.getTabAt(0).setCustomView(tabOne);\n \n        TextView tabTwo = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\n        tabTwo.setText(\"TWO\");\n        tabTwo.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_call, 0, 0);\n        tabLayout.getTabAt(1).setCustomView(tabTwo);\n \n        TextView tabThree = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\n        tabThree.setText(\"THREE\");\n        tabThree.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_contacts, 0, 0);\n        tabLayout.getTabAt(2).setCustomView(tabThree);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFrag(new OneFragment(), \"ONE\");\n        adapter.addFrag(new TwoFragment(), \"TWO\");\n        adapter.addFrag(new ThreeFragment(), \"THREE\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFrag(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n现在如果你运行这个程序，你就能看到图标被放置在选项卡标签的上面了。\n\n![android-tab-layout-with-custom-view-icon-and-text](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-custom-view-icon-and-text.png)\n\n我希望这篇文章对于Material Design支持库的使用，提供了一些非常有用的信息，如果你有任何问题，请在下面回复。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1]: http://android-developers.blogspot.in/2015/05/android-design-support-library.html\n[2]: https://www.google.co.in/design/spec/components/tabs.html#\n[3]: https://youtu.be/6sGhDYYUoBM\n[4]: http://www.androidhive.info/2015/04/android-getting-started-with-material-design/","source":"_posts/Android-Material-Design-Tabs.md","raw":"title: Android Material Design - Tabs\ndate: 2015-12-28 11:51:06\ncategories: [Android]\ntags: [Material Design, TabLayout]\n---\n\n> 原作者：Ravi Tamada\n> 原文地址：[http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/](http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/)\n\n\n[Android Design支持库][1] 提供了很好的向后兼容性，在Material Design支持库中的组件中，像Navigation Drawer, FloatingAction Button, Snackbar, Tabs, Floating labels ， animation frameworks。在这里我们将学习怎样实现tabs。\n\n在进一步深入了解之前，我建议先看一下[tabs的文档][2]，它可以告诉你在实现tabs的时候，什么该做什么不该做。\n\n这里还有yutube的视频：[到墙外看一看][3]\n\n### 使用Material\n首先我们创建一个新的项目并且应用Material主题，如果你不知道Material Design，那么可以看看文章[Material Design入门][4]\n\n**1**.在Android Studio中，**File => New Project**并且填好其它信息去创建一个新项目。\n\n**2**.打开**build.gradle**然后添加支持库**com.android.support:design:23.0.1**\n\n`build.gradle`\n``` xml\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.android.support:design:23.0.1'\n}\n```\n<!-- more -->\n\n\n**3**.打开位于**res => values**下的**colors.xml**，并且添加以下颜色值：\n\n`colors.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimary\">#125688</color>\n    <color name=\"colorPrimaryDark\">#125688</color>\n    <color name=\"textColorPrimary\">#FFFFFF</color>\n    <color name=\"windowBackground\">#FFFFFF</color>\n    <color name=\"navigationBarColor\">#000000</color>\n    <color name=\"colorAccent\">#c8e8ff</color>\n</resources>\n```\n\n**4**.在**res => values**下的**dimens.xml**添加以下代码：\n\n`dimens.xml`\n``` xml\n<resources>\n    <!-- Default screen margins, per the Android Design guidelines. -->\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n    <dimen name=\"tab_max_width\">264dp</dimen>\n    <dimen name=\"tab_padding_bottom\">16dp</dimen>\n    <dimen name=\"tab_label\">14sp</dimen>\n    <dimen name=\"custom_tab_layout_height\">72dp</dimen>\n</resources>\n```\n\n**5**. 打开**res ⇒ values**下的**styles.xml**，并添加以下主题。在**styles.xml**中这个主题是通用于所有安卓版本的。\n\n`styles.xml`\n``` xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n \n    </style>\n \n    <style name=\"MyMaterialTheme.Base\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <item name=\"windowNoTitle\">true</item>\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n \n</resources>\n```\n\n**6.** 在**res**下面创建**values-v21**文件夹，然后创建另外一个**styles.xml**，写入以下主题，这个主题是适用于Android 5.0的。\n\n`styles.xml`\n``` xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n        <item name=\"android:windowContentTransitions\">true</item>\n        <item name=\"android:windowAllowEnterTransitionOverlap\">true</item>\n        <item name=\"android:windowAllowReturnTransitionOverlap\">true</item>\n        <item name=\"android:windowSharedElementEnterTransition\">@android:transition/move</item>\n        <item name=\"android:windowSharedElementExitTransition\">@android:transition/move</item>\n    </style>\n \n</resources>\n```\n\n**7.** 最后打开**AndroidManifest.xml**并且修改**android:theme**属性为我们自定义的主题。\n\n`AndroidManifest.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"info.androidhive.materialtabs\" >\n \n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/MyMaterialTheme\" >\n        <activity\n            android:name=\".activity.MainActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n \n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n</manifest>\n```\n\n运行这个应用，通过通知栏的颜色来验证一下Material Design主题。如果你看到通知栏颜色改变了，这就意味着Material Design主题已经被成功使用。\n\n图例\n\n现在我们已经有了Material Design主题的应用，接下来让我们开始添加tabs。但是在这之前。我们需要创建一些fragment来协助测试，所有这些fragment只有非常简单的UI，一个TextView而已。\n\n**8.** 在你的包目录下，创建一个fragment，命名为**OneFragment.java**并添加以下代码：\n\n`OneFragment.java`\n``` java\npackage info.androidhive.materialtabs.fragments;\n \nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n \nimport info.androidhive.materialtabs.R;\n \n \npublic class OneFragment extends Fragment{\n \n    public OneFragment() {\n        // Required empty public constructor\n    }\n \n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_one, container, false);\n    }\n \n}\n```\n\n**9.** 在**res ⇒ layout**下添加**fragment_one.xml**，写入以下代码：\n\n`fragment_one.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"info.androidhive.materialtabs.fragments.OneFragment\">\n \n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/one\"\n        android:textSize=\"40dp\"\n        android:textStyle=\"bold\"\n        android:layout_centerInParent=\"true\"/>\n \n</RelativeLayout>\n```\n\n**10.** 同样的，创建一些其它的fragment，并且写入像**OneFragment.java**一样的代码，我已经创建好了**TwoFragment.java**, **ThreeFragment.java**, **FourFragemnt.java**一直到**TenFragment.java**\n\n\n### 固定标签\n\n当tabs是固定数目的时候，你可以使用这个方式。这些tabs固定在适当的位置。在design支持库中，一些新的元素像**CoordinatorLayout**、**AppBarLayout**、**TabLayout**等介绍了很多。我覆盖不到所有的情况，因为这不是本文的目的。\n\n**11**. 打开布局文件**activity_main.xml**并修改为一下代码：\n\n`app:tabMode` – 定义tab的形式，在这我们定义为**fixed**\n\n`activity_main.xml`\n``` xml\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n \n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|enterAlways\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n \n        <android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:tabMode=\"fixed\"\n            app:tabGravity=\"fill\"/>\n    </android.support.design.widget.AppBarLayout>\n \n    <android.support.v4.view.ViewPager\n        android:id=\"@+id/viewpager\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"  />\n</android.support.design.widget.CoordinatorLayout>\n```\n\n**12.** 打开**MainActivity.java** 并作以下修改：\n\n`tabLayout.setupWithViewPager()` – 适配ViewPager给TabLayout\n\n`setupViewPager()` – 通过添加适当的fragment来设置tabs的数量和tab的名字\n\n`ViewPagerAdapter` – 自定义适配器类提供了ViewPager需要的额fragment\n\n`MainActivity.java`\n\n``` java\npackage info.androidhive.materialtabs.activity;\n \nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nimport info.androidhive.materialtabs.R;\nimport info.androidhive.materialtabs.fragments.OneFragment;\nimport info.androidhive.materialtabs.fragments.ThreeFragment;\nimport info.androidhive.materialtabs.fragments.TwoFragment;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n \n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFragment(new OneFragment(), \"ONE\");\n        adapter.addFragment(new TwoFragment(), \"TWO\");\n        adapter.addFragment(new ThreeFragment(), \"THREE\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFragment(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n现在运行这个应用，你应该能看到tabs已经显示，并且能够通过滑动在他们之间切换。\n\n![swipe](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-tab-layout.png)\n\n\n**2.1** 屏幕宽度的标签\n如果你想要标签栏占据整个屏幕的宽度，你需要给TabLayout设置 **app:tabGravity=\"fill\"**属性。\n\n![full](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-landscape-view.png)\n\n\n**2.2** 中心对齐的标签\n如果你想要你的标签按照水平居中的形式来显示，你需要给TabLayout设置**app:tabGravity=\"center\"**的属性。\n\n![full](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-gravity-center.png)\n\n\n### 滚动标签\n\n当你有很多标签时，并且一个屏幕的空间放不下的时候，你可以使用滑动标签。标签可以滚动，给TabLayout设置**app:tabMode=\"scrollable\"**即可。\n\n**13.** 打开**activity_main.xml**并且修改**app:tabMode**为**scrollable**。\n\n``` xml\n<android.support.design.widget.TabLayout\n            android:id=\"@+id/tabs\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            app:tabMode=\"scrollable\"/>\n```\n\n**14.** 编辑**MainActivity.java**并且添加一些fragment到ViewPager通过**setupViewPager()**方法。我已经添加了10个fragment，这样做之后，你的MainActivity应该像下面这样。\n\n`MainActivity.java`\n\n``` java\npackage info.androidhive.materialtabs.activity;\n \nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFrag(new OneFragment(), \"ONE\");\n        adapter.addFrag(new TwoFragment(), \"TWO\");\n        adapter.addFrag(new ThreeFragment(), \"THREE\");\n        adapter.addFrag(new FourFragment(), \"FOUR\");\n        adapter.addFrag(new FiveFragment(), \"FIVE\");\n        adapter.addFrag(new SixFragment(), \"SIX\");\n        adapter.addFrag(new SevenFragment(), \"SEVEN\");\n        adapter.addFrag(new EightFragment(), \"EIGHT\");\n        adapter.addFrag(new NineFragment(), \"NINE\");\n        adapter.addFrag(new TenFragment(), \"TEN\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFrag(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n现在如果你再运行你的应用，你就可以看到很多tabs，而且具有欢动功能。 \n\n![layout](http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout.png)\n![horizontal](http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout-horizontal.png)\n\n\n### 图文标签\n\n有时候你可能想要给标签添加图标。此前给标签添加图标是非常繁琐的过程，但是现在有了Material Design支持库，这就变得很容易了。所以你必须要做的就是调用**setIcon()**方法来设置适当的图标，这个图标就可以显示在标签文字前面了。\n\n``` java\ntabLayout.getTabAt(0).setIcon(tabIcons[0]);\ntabLayout.getTabAt(1).setIcon(tabIcons[1]);\n```\n\n**15.** 打开**MainActivity.java**并且按照下面来修改代码。在这里我已经添加了一个新的方法**setupTabIcons()**来设置标签的图标。\n\n`MainActivity.java`\n``` java\nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n    private int[] tabIcons = {\n            R.drawable.ic_tab_favourite,\n            R.drawable.ic_tab_call,\n            R.drawable.ic_tab_contacts\n    };\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n        setupTabIcons();\n    }\n \n    private void setupTabIcons() {\n        tabLayout.getTabAt(0).setIcon(tabIcons[0]);\n        tabLayout.getTabAt(1).setIcon(tabIcons[1]);\n        tabLayout.getTabAt(2).setIcon(tabIcons[2]);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFrag(new OneFragment(), \"ONE\");\n        adapter.addFrag(new TwoFragment(), \"TWO\");\n        adapter.addFrag(new ThreeFragment(), \"THREE\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFrag(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n![android-tab-layout-with-icon-and-text](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-icon-and-text.png)\n\n\n### 图标标签\n\n仅仅设置图标的选项卡是和图文的选项卡是一样的，只是ViewPagerAdapter类的**getPageTitle()**方法返回值为null即可。\n\n**16.** 打开**MainActivity.java**并按照下面的代码修改**getPageTitle()**方法，接着运行项目。\n\n``` java\n\n@Override\npublic CharSequence getPageTitle(int position) {\n \n    // return null to display only the icon\n    return null;\n}\n```\n\n![android-tab-layout-with-only-icons](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-only-icons.png)\n\n\n### 自定义图文选项卡\n\n当默认的选项卡布局不能达到你预期的输出效果时，自定义选项卡就非常实用了。在你自定义选项卡试图的时候，请务必遵循Android选项卡的规范建议。\n\n当我们设置了图文选项卡时，你能够看到图标和文字是水平居中的，但是如果你想要放置图标在选项卡标签之上，你就必须使用一个自定义的view来完成它。\n\n**17.** 在**res ⇒ values**下面,创建**fonts.xml**文件，并且添加以下字符串值。这个xml文件定义了选项卡中文字所使用的字体。\n\n`fonts.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"font_fontFamily_medium\">sans-serif</string>\n</resources>\n```\n**18.** 在**res ⇒ values-v21下面，创建另一个**fonts.xml**文件。\n\n`fonts.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"font_fontFamily_medium\">sans-serif-medium</string>\n</resources>\n```\n\n**19.** 打开**activity_main.xml**并且给TabLayout设置自定义的高度。设置这个高度显得非常重要，因为在选项卡标签上面放置图标需要更多的空间。\n\n``` xml\n\n<android.support.design.widget.TabLayout\n           android:id=\"@+id/tabs\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"@dimen/custom_tab_layout_height\"\n           app:tabMode=\"fixed\"\n           app:tabGravity=\"fill\"/>\n```\n\n**20.** 在**res ⇒ layout**下新建的一个xml文件**custom_tab.xml**，这个文件是用来自定义选项卡布局的。\n\n`custom_tab.xml`\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/tab\"\n    android:textColor=\"@color/colorAccent\"\n    android:textSize=\"@dimen/tab_label\"\n    android:fontFamily=\"@string/font_fontFamily_medium\"/>\n```\n\n**21.** 打开**MainActivity.java**并按照下面的代码做修改。这里你是否注意到setupTabIcon()方法。下面的代码中我已经给每一个选项卡使用了custom_tab.xml布局，。\n\n``` java\nTextView tabOne = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\ntabOne.setText(\"ONE\");\ntabOne.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_favourite, 0, 0);\ntabLayout.getTabAt(0).setCustomView(tabOne);\n```\n\n`MainActivity.java`\n\n``` java\nimport android.os.Bundle;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.LayoutInflater;\nimport android.widget.TextView;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nimport info.androidhive.materialtabs.R;\nimport info.androidhive.materialtabs.fragments.OneFragment;\nimport info.androidhive.materialtabs.fragments.ThreeFragment;\nimport info.androidhive.materialtabs.fragments.TwoFragment;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar toolbar;\n    private TabLayout tabLayout;\n    private ViewPager viewPager;\n    private int[] tabIcons = {\n            R.drawable.ic_tab_favourite,\n            R.drawable.ic_tab_call,\n            R.drawable.ic_tab_contacts\n    };\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n \n        viewPager = (ViewPager) findViewById(R.id.viewpager);\n        setupViewPager(viewPager);\n \n        tabLayout = (TabLayout) findViewById(R.id.tabs);\n        tabLayout.setupWithViewPager(viewPager);\n        setupTabIcons();\n    }\n \n    private void setupTabIcons() {\n \n        TextView tabOne = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\n        tabOne.setText(\"ONE\");\n        tabOne.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_favourite, 0, 0);\n        tabLayout.getTabAt(0).setCustomView(tabOne);\n \n        TextView tabTwo = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\n        tabTwo.setText(\"TWO\");\n        tabTwo.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_call, 0, 0);\n        tabLayout.getTabAt(1).setCustomView(tabTwo);\n \n        TextView tabThree = (TextView) LayoutInflater.from(this).inflate(R.layout.custom_tab, null);\n        tabThree.setText(\"THREE\");\n        tabThree.setCompoundDrawablesWithIntrinsicBounds(0, R.drawable.ic_tab_contacts, 0, 0);\n        tabLayout.getTabAt(2).setCustomView(tabThree);\n    }\n \n    private void setupViewPager(ViewPager viewPager) {\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager());\n        adapter.addFrag(new OneFragment(), \"ONE\");\n        adapter.addFrag(new TwoFragment(), \"TWO\");\n        adapter.addFrag(new ThreeFragment(), \"THREE\");\n        viewPager.setAdapter(adapter);\n    }\n \n    class ViewPagerAdapter extends FragmentPagerAdapter {\n        private final List<Fragment> mFragmentList = new ArrayList<>();\n        private final List<String> mFragmentTitleList = new ArrayList<>();\n \n        public ViewPagerAdapter(FragmentManager manager) {\n            super(manager);\n        }\n \n        @Override\n        public Fragment getItem(int position) {\n            return mFragmentList.get(position);\n        }\n \n        @Override\n        public int getCount() {\n            return mFragmentList.size();\n        }\n \n        public void addFrag(Fragment fragment, String title) {\n            mFragmentList.add(fragment);\n            mFragmentTitleList.add(title);\n        }\n \n        @Override\n        public CharSequence getPageTitle(int position) {\n            return mFragmentTitleList.get(position);\n        }\n    }\n}\n```\n\n现在如果你运行这个程序，你就能看到图标被放置在选项卡标签的上面了。\n\n![android-tab-layout-with-custom-view-icon-and-text](http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-custom-view-icon-and-text.png)\n\n我希望这篇文章对于Material Design支持库的使用，提供了一些非常有用的信息，如果你有任何问题，请在下面回复。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1]: http://android-developers.blogspot.in/2015/05/android-design-support-library.html\n[2]: https://www.google.co.in/design/spec/components/tabs.html#\n[3]: https://youtu.be/6sGhDYYUoBM\n[4]: http://www.androidhive.info/2015/04/android-getting-started-with-material-design/","slug":"Android-Material-Design-Tabs","published":1,"updated":"2016-10-10T06:53:44.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b9400071giyqs9r5g5q","content":"<blockquote>\n<p>原作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/\" target=\"_blank\" rel=\"external\">http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/</a></p>\n</blockquote>\n<p><a href=\"http://android-developers.blogspot.in/2015/05/android-design-support-library.html\" target=\"_blank\" rel=\"external\">Android Design支持库</a> 提供了很好的向后兼容性，在Material Design支持库中的组件中，像Navigation Drawer, FloatingAction Button, Snackbar, Tabs, Floating labels ， animation frameworks。在这里我们将学习怎样实现tabs。</p>\n<p>在进一步深入了解之前，我建议先看一下<a href=\"https://www.google.co.in/design/spec/components/tabs.html#\" target=\"_blank\" rel=\"external\">tabs的文档</a>，它可以告诉你在实现tabs的时候，什么该做什么不该做。</p>\n<p>这里还有yutube的视频：<a href=\"https://youtu.be/6sGhDYYUoBM\" target=\"_blank\" rel=\"external\">到墙外看一看</a></p>\n<h3 id=\"使用Material\"><a href=\"#使用Material\" class=\"headerlink\" title=\"使用Material\"></a>使用Material</h3><p>首先我们创建一个新的项目并且应用Material主题，如果你不知道Material Design，那么可以看看文章<a href=\"http://www.androidhive.info/2015/04/android-getting-started-with-material-design/\" target=\"_blank\" rel=\"external\">Material Design入门</a></p>\n<p><strong>1</strong>.在Android Studio中，<strong>File =&gt; New Project</strong>并且填好其它信息去创建一个新项目。</p>\n<p><strong>2</strong>.打开<strong>build.gradle</strong>然后添加支持库<strong>com.android.support:design:23.0.1</strong></p>\n<p><code>build.gradle</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:23.0.1'</div><div class=\"line\">    compile 'com.android.support:design:23.0.1'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong>3</strong>.打开位于<strong>res =&gt; values</strong>下的<strong>colors.xml</strong>，并且添加以下颜色值：</p>\n<p><code>colors.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>#125688<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>#125688<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"textColorPrimary\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowBackground\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"navigationBarColor\"</span>&gt;</span>#000000<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#c8e8ff<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>4</strong>.在<strong>res =&gt; values</strong>下的<strong>dimens.xml</strong>添加以下代码：</p>\n<p><code>dimens.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Default screen margins, per the Android Design guidelines. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_horizontal_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_vertical_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tab_max_width\"</span>&gt;</span>264dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tab_padding_bottom\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tab_label\"</span>&gt;</span>14sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_tab_layout_height\"</span>&gt;</span>72dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>5</strong>. 打开<strong>res ⇒ values</strong>下的<strong>styles.xml</strong>，并添加以下主题。在<strong>styles.xml</strong>中这个主题是通用于所有安卓版本的。</p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>6.</strong> 在<strong>res</strong>下面创建<strong>values-v21</strong>文件夹，然后创建另外一个<strong>styles.xml</strong>，写入以下主题，这个主题是适用于Android 5.0的。</p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentTransitions\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowEnterTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowReturnTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementEnterTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementExitTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>7.</strong> 最后打开<strong>AndroidManifest.xml</strong>并且修改<strong>android:theme</strong>属性为我们自定义的主题。</p>\n<p><code>AndroidManifest.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"info.androidhive.materialtabs\"</span> &gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/MyMaterialTheme\"</span> &gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.MainActivity\"</span></div><div class=\"line\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行这个应用，通过通知栏的颜色来验证一下Material Design主题。如果你看到通知栏颜色改变了，这就意味着Material Design主题已经被成功使用。</p>\n<p>图例</p>\n<p>现在我们已经有了Material Design主题的应用，接下来让我们开始添加tabs。但是在这之前。我们需要创建一些fragment来协助测试，所有这些fragment只有非常简单的UI，一个TextView而已。</p>\n<p><strong>8.</strong> 在你的包目录下，创建一个fragment，命名为<strong>OneFragment.java</strong>并添加以下代码：</p>\n<p><code>OneFragment.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialtabs.fragments;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.R;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span></span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OneFragment</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                             Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></div><div class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_one, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>9.</strong> 在<strong>res ⇒ layout</strong>下添加<strong>fragment_one.xml</strong>，写入以下代码：</p>\n<p><code>fragment_one.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"info.androidhive.materialtabs.fragments.OneFragment\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/one\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>/&gt;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>10.</strong> 同样的，创建一些其它的fragment，并且写入像<strong>OneFragment.java</strong>一样的代码，我已经创建好了<strong>TwoFragment.java</strong>, <strong>ThreeFragment.java</strong>, <strong>FourFragemnt.java</strong>一直到<strong>TenFragment.java</strong></p>\n<h3 id=\"固定标签\"><a href=\"#固定标签\" class=\"headerlink\" title=\"固定标签\"></a>固定标签</h3><p>当tabs是固定数目的时候，你可以使用这个方式。这些tabs固定在适当的位置。在design支持库中，一些新的元素像<strong>CoordinatorLayout</strong>、<strong>AppBarLayout</strong>、<strong>TabLayout</strong>等介绍了很多。我覆盖不到所有的情况，因为这不是本文的目的。</p>\n<p><strong>11</strong>. 打开布局文件<strong>activity_main.xml</strong>并修改为一下代码：</p>\n<p><code>app:tabMode</code> – 定义tab的形式，在这我们定义为<strong>fixed</strong></p>\n<p><code>activity_main.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/viewpager\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>  /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>12.</strong> 打开<strong>MainActivity.java</strong> 并作以下修改：</p>\n<p><code>tabLayout.setupWithViewPager()</code> – 适配ViewPager给TabLayout</p>\n<p><code>setupViewPager()</code> – 通过添加适当的fragment来设置tabs的数量和tab的名字</p>\n<p><code>ViewPagerAdapter</code> – 自定义适配器类提供了ViewPager需要的额fragment</p>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialtabs.activity;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.R;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.OneFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.ThreeFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.TwoFragment;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\"> </div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFragment(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFragment(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFragment(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFragment</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在运行这个应用，你应该能看到tabs已经显示，并且能够通过滑动在他们之间切换。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-tab-layout.png\" alt=\"swipe\"></p>\n<p><strong>2.1</strong> 屏幕宽度的标签<br>如果你想要标签栏占据整个屏幕的宽度，你需要给TabLayout设置 <strong>app:tabGravity=”fill”</strong>属性。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-landscape-view.png\" alt=\"full\"></p>\n<p><strong>2.2</strong> 中心对齐的标签<br>如果你想要你的标签按照水平居中的形式来显示，你需要给TabLayout设置<strong>app:tabGravity=”center”</strong>的属性。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-gravity-center.png\" alt=\"full\"></p>\n<h3 id=\"滚动标签\"><a href=\"#滚动标签\" class=\"headerlink\" title=\"滚动标签\"></a>滚动标签</h3><p>当你有很多标签时，并且一个屏幕的空间放不下的时候，你可以使用滑动标签。标签可以滚动，给TabLayout设置<strong>app:tabMode=”scrollable”</strong>即可。</p>\n<p><strong>13.</strong> 打开<strong>activity_main.xml</strong>并且修改<strong>app:tabMode</strong>为<strong>scrollable</strong>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"scrollable\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p><strong>14.</strong> 编辑<strong>MainActivity.java</strong>并且添加一些fragment到ViewPager通过<strong>setupViewPager()</strong>方法。我已经添加了10个fragment，这样做之后，你的MainActivity应该像下面这样。</p>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialtabs.activity;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> FourFragment(), <span class=\"string\">\"FOUR\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> FiveFragment(), <span class=\"string\">\"FIVE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> SixFragment(), <span class=\"string\">\"SIX\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> SevenFragment(), <span class=\"string\">\"SEVEN\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> EightFragment(), <span class=\"string\">\"EIGHT\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> NineFragment(), <span class=\"string\">\"NINE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TenFragment(), <span class=\"string\">\"TEN\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFrag</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在如果你再运行你的应用，你就可以看到很多tabs，而且具有欢动功能。 </p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout.png\" alt=\"layout\"><br><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout-horizontal.png\" alt=\"horizontal\"></p>\n<h3 id=\"图文标签\"><a href=\"#图文标签\" class=\"headerlink\" title=\"图文标签\"></a>图文标签</h3><p>有时候你可能想要给标签添加图标。此前给标签添加图标是非常繁琐的过程，但是现在有了Material Design支持库，这就变得很容易了。所以你必须要做的就是调用<strong>setIcon()</strong>方法来设置适当的图标，这个图标就可以显示在标签文字前面了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tabLayout.getTabAt(<span class=\"number\">0</span>).setIcon(tabIcons[<span class=\"number\">0</span>]);</div><div class=\"line\">tabLayout.getTabAt(<span class=\"number\">1</span>).setIcon(tabIcons[<span class=\"number\">1</span>]);</div></pre></td></tr></table></figure>\n<p><strong>15.</strong> 打开<strong>MainActivity.java</strong>并且按照下面来修改代码。在这里我已经添加了一个新的方法<strong>setupTabIcons()</strong>来设置标签的图标。</p>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] tabIcons = &#123;</div><div class=\"line\">            R.drawable.ic_tab_favourite,</div><div class=\"line\">            R.drawable.ic_tab_call,</div><div class=\"line\">            R.drawable.ic_tab_contacts</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">        setupTabIcons();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupTabIcons</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">0</span>).setIcon(tabIcons[<span class=\"number\">0</span>]);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">1</span>).setIcon(tabIcons[<span class=\"number\">1</span>]);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">2</span>).setIcon(tabIcons[<span class=\"number\">2</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFrag</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-icon-and-text.png\" alt=\"android-tab-layout-with-icon-and-text\"></p>\n<h3 id=\"图标标签\"><a href=\"#图标标签\" class=\"headerlink\" title=\"图标标签\"></a>图标标签</h3><p>仅仅设置图标的选项卡是和图文的选项卡是一样的，只是ViewPagerAdapter类的<strong>getPageTitle()</strong>方法返回值为null即可。</p>\n<p><strong>16.</strong> 打开<strong>MainActivity.java</strong>并按照下面的代码修改<strong>getPageTitle()</strong>方法，接着运行项目。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">// return null to display only the icon</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-only-icons.png\" alt=\"android-tab-layout-with-only-icons\"></p>\n<h3 id=\"自定义图文选项卡\"><a href=\"#自定义图文选项卡\" class=\"headerlink\" title=\"自定义图文选项卡\"></a>自定义图文选项卡</h3><p>当默认的选项卡布局不能达到你预期的输出效果时，自定义选项卡就非常实用了。在你自定义选项卡试图的时候，请务必遵循Android选项卡的规范建议。</p>\n<p>当我们设置了图文选项卡时，你能够看到图标和文字是水平居中的，但是如果你想要放置图标在选项卡标签之上，你就必须使用一个自定义的view来完成它。</p>\n<p><strong>17.</strong> 在<strong>res ⇒ values</strong>下面,创建<strong>fonts.xml</strong>文件，并且添加以下字符串值。这个xml文件定义了选项卡中文字所使用的字体。</p>\n<p><code>fonts.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"font_fontFamily_medium\"</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>18.</strong> 在<strong>res ⇒ values-v21下面，创建另一个</strong>fonts.xml**文件。</p>\n<p><code>fonts.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"font_fontFamily_medium\"</span>&gt;</span>sans-serif-medium<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>19.</strong> 打开<strong>activity_main.xml</strong>并且给TabLayout设置自定义的高度。设置这个高度显得非常重要，因为在选项卡标签上面放置图标需要更多的空间。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">           <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">           <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/custom_tab_layout_height\"</span></div><div class=\"line\">           <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></div><div class=\"line\">           <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p><strong>20.</strong> 在<strong>res ⇒ layout</strong>下新建的一个xml文件<strong>custom_tab.xml</strong>，这个文件是用来自定义选项卡布局的。</p>\n<p><code>custom_tab.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tab\"</span></div><div class=\"line\">    <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">    <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"@dimen/tab_label\"</span></div><div class=\"line\">    <span class=\"attr\">android:fontFamily</span>=<span class=\"string\">\"@string/font_fontFamily_medium\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p><strong>21.</strong> 打开<strong>MainActivity.java</strong>并按照下面的代码做修改。这里你是否注意到setupTabIcon()方法。下面的代码中我已经给每一个选项卡使用了custom_tab.xml布局，。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">TextView tabOne = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">tabOne.setText(<span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">tabOne.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_favourite, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">tabLayout.getTabAt(<span class=\"number\">0</span>).setCustomView(tabOne);</div></pre></td></tr></table></figure>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.R;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.OneFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.ThreeFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.TwoFragment;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] tabIcons = &#123;</div><div class=\"line\">            R.drawable.ic_tab_favourite,</div><div class=\"line\">            R.drawable.ic_tab_call,</div><div class=\"line\">            R.drawable.ic_tab_contacts</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">        setupTabIcons();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupTabIcons</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        TextView tabOne = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">        tabOne.setText(<span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        tabOne.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_favourite, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">0</span>).setCustomView(tabOne);</div><div class=\"line\"> </div><div class=\"line\">        TextView tabTwo = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">        tabTwo.setText(<span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        tabTwo.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_call, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">1</span>).setCustomView(tabTwo);</div><div class=\"line\"> </div><div class=\"line\">        TextView tabThree = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">        tabThree.setText(<span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        tabThree.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_contacts, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">2</span>).setCustomView(tabThree);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFrag</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在如果你运行这个程序，你就能看到图标被放置在选项卡标签的上面了。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-custom-view-icon-and-text.png\" alt=\"android-tab-layout-with-custom-view-icon-and-text\"></p>\n<p>我希望这篇文章对于Material Design支持库的使用，提供了一些非常有用的信息，如果你有任何问题，请在下面回复。</p>\n","excerpt":"<blockquote>\n<p>原作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/\">http://www.androidhive.info/2015/09/android-material-design-working-with-tabs/</a></p>\n</blockquote>\n<p><a href=\"http://android-developers.blogspot.in/2015/05/android-design-support-library.html\">Android Design支持库</a> 提供了很好的向后兼容性，在Material Design支持库中的组件中，像Navigation Drawer, FloatingAction Button, Snackbar, Tabs, Floating labels ， animation frameworks。在这里我们将学习怎样实现tabs。</p>\n<p>在进一步深入了解之前，我建议先看一下<a href=\"https://www.google.co.in/design/spec/components/tabs.html#\">tabs的文档</a>，它可以告诉你在实现tabs的时候，什么该做什么不该做。</p>\n<p>这里还有yutube的视频：<a href=\"https://youtu.be/6sGhDYYUoBM\">到墙外看一看</a></p>\n<h3 id=\"使用Material\"><a href=\"#使用Material\" class=\"headerlink\" title=\"使用Material\"></a>使用Material</h3><p>首先我们创建一个新的项目并且应用Material主题，如果你不知道Material Design，那么可以看看文章<a href=\"http://www.androidhive.info/2015/04/android-getting-started-with-material-design/\">Material Design入门</a></p>\n<p><strong>1</strong>.在Android Studio中，<strong>File =&gt; New Project</strong>并且填好其它信息去创建一个新项目。</p>\n<p><strong>2</strong>.打开<strong>build.gradle</strong>然后添加支持库<strong>com.android.support:design:23.0.1</strong></p>\n<p><code>build.gradle</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:23.0.1'</div><div class=\"line\">    compile 'com.android.support:design:23.0.1'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p><strong>3</strong>.打开位于<strong>res =&gt; values</strong>下的<strong>colors.xml</strong>，并且添加以下颜色值：</p>\n<p><code>colors.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>#125688<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>#125688<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"textColorPrimary\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowBackground\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"navigationBarColor\"</span>&gt;</span>#000000<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#c8e8ff<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>4</strong>.在<strong>res =&gt; values</strong>下的<strong>dimens.xml</strong>添加以下代码：</p>\n<p><code>dimens.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Default screen margins, per the Android Design guidelines. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_horizontal_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_vertical_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tab_max_width\"</span>&gt;</span>264dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tab_padding_bottom\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tab_label\"</span>&gt;</span>14sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_tab_layout_height\"</span>&gt;</span>72dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>5</strong>. 打开<strong>res ⇒ values</strong>下的<strong>styles.xml</strong>，并添加以下主题。在<strong>styles.xml</strong>中这个主题是通用于所有安卓版本的。</p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\"> </div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>6.</strong> 在<strong>res</strong>下面创建<strong>values-v21</strong>文件夹，然后创建另外一个<strong>styles.xml</strong>，写入以下主题，这个主题是适用于Android 5.0的。</p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentTransitions\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowEnterTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowReturnTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementEnterTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementExitTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>7.</strong> 最后打开<strong>AndroidManifest.xml</strong>并且修改<strong>android:theme</strong>属性为我们自定义的主题。</p>\n<p><code>AndroidManifest.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"info.androidhive.materialtabs\"</span> &gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/MyMaterialTheme\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.MainActivity\"</span></div><div class=\"line\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行这个应用，通过通知栏的颜色来验证一下Material Design主题。如果你看到通知栏颜色改变了，这就意味着Material Design主题已经被成功使用。</p>\n<p>图例</p>\n<p>现在我们已经有了Material Design主题的应用，接下来让我们开始添加tabs。但是在这之前。我们需要创建一些fragment来协助测试，所有这些fragment只有非常简单的UI，一个TextView而已。</p>\n<p><strong>8.</strong> 在你的包目录下，创建一个fragment，命名为<strong>OneFragment.java</strong>并添加以下代码：</p>\n<p><code>OneFragment.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialtabs.fragments;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.R;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span></span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OneFragment</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</div><div class=\"line\">                             Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></div><div class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_one, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>9.</strong> 在<strong>res ⇒ layout</strong>下添加<strong>fragment_one.xml</strong>，写入以下代码：</p>\n<p><code>fragment_one.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"info.androidhive.materialtabs.fragments.OneFragment\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/one\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>10.</strong> 同样的，创建一些其它的fragment，并且写入像<strong>OneFragment.java</strong>一样的代码，我已经创建好了<strong>TwoFragment.java</strong>, <strong>ThreeFragment.java</strong>, <strong>FourFragemnt.java</strong>一直到<strong>TenFragment.java</strong></p>\n<h3 id=\"固定标签\"><a href=\"#固定标签\" class=\"headerlink\" title=\"固定标签\"></a>固定标签</h3><p>当tabs是固定数目的时候，你可以使用这个方式。这些tabs固定在适当的位置。在design支持库中，一些新的元素像<strong>CoordinatorLayout</strong>、<strong>AppBarLayout</strong>、<strong>TabLayout</strong>等介绍了很多。我覆盖不到所有的情况，因为这不是本文的目的。</p>\n<p><strong>11</strong>. 打开布局文件<strong>activity_main.xml</strong>并修改为一下代码：</p>\n<p><code>app:tabMode</code> – 定义tab的形式，在这我们定义为<strong>fixed</strong></p>\n<p><code>activity_main.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.view.ViewPager</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/viewpager\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>  /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>12.</strong> 打开<strong>MainActivity.java</strong> 并作以下修改：</p>\n<p><code>tabLayout.setupWithViewPager()</code> – 适配ViewPager给TabLayout</p>\n<p><code>setupViewPager()</code> – 通过添加适当的fragment来设置tabs的数量和tab的名字</p>\n<p><code>ViewPagerAdapter</code> – 自定义适配器类提供了ViewPager需要的额fragment</p>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialtabs.activity;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.R;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.OneFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.ThreeFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.TwoFragment;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\"> </div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFragment(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFragment(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFragment(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFragment</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在运行这个应用，你应该能看到tabs已经显示，并且能够通过滑动在他们之间切换。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-tab-layout.png\" alt=\"swipe\"></p>\n<p><strong>2.1</strong> 屏幕宽度的标签<br>如果你想要标签栏占据整个屏幕的宽度，你需要给TabLayout设置 <strong>app:tabGravity=”fill”</strong>属性。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-landscape-view.png\" alt=\"full\"></p>\n<p><strong>2.2</strong> 中心对齐的标签<br>如果你想要你的标签按照水平居中的形式来显示，你需要给TabLayout设置<strong>app:tabGravity=”center”</strong>的属性。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-gravity-center.png\" alt=\"full\"></p>\n<h3 id=\"滚动标签\"><a href=\"#滚动标签\" class=\"headerlink\" title=\"滚动标签\"></a>滚动标签</h3><p>当你有很多标签时，并且一个屏幕的空间放不下的时候，你可以使用滑动标签。标签可以滚动，给TabLayout设置<strong>app:tabMode=”scrollable”</strong>即可。</p>\n<p><strong>13.</strong> 打开<strong>activity_main.xml</strong>并且修改<strong>app:tabMode</strong>为<strong>scrollable</strong>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"scrollable\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>14.</strong> 编辑<strong>MainActivity.java</strong>并且添加一些fragment到ViewPager通过<strong>setupViewPager()</strong>方法。我已经添加了10个fragment，这样做之后，你的MainActivity应该像下面这样。</p>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialtabs.activity;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> FourFragment(), <span class=\"string\">\"FOUR\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> FiveFragment(), <span class=\"string\">\"FIVE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> SixFragment(), <span class=\"string\">\"SIX\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> SevenFragment(), <span class=\"string\">\"SEVEN\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> EightFragment(), <span class=\"string\">\"EIGHT\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> NineFragment(), <span class=\"string\">\"NINE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TenFragment(), <span class=\"string\">\"TEN\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFrag</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在如果你再运行你的应用，你就可以看到很多tabs，而且具有欢动功能。 </p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout.png\" alt=\"layout\"><br><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-scrollable-tab-layout-horizontal.png\" alt=\"horizontal\"></p>\n<h3 id=\"图文标签\"><a href=\"#图文标签\" class=\"headerlink\" title=\"图文标签\"></a>图文标签</h3><p>有时候你可能想要给标签添加图标。此前给标签添加图标是非常繁琐的过程，但是现在有了Material Design支持库，这就变得很容易了。所以你必须要做的就是调用<strong>setIcon()</strong>方法来设置适当的图标，这个图标就可以显示在标签文字前面了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tabLayout.getTabAt(<span class=\"number\">0</span>).setIcon(tabIcons[<span class=\"number\">0</span>]);</div><div class=\"line\">tabLayout.getTabAt(<span class=\"number\">1</span>).setIcon(tabIcons[<span class=\"number\">1</span>]);</div></pre></td></tr></table></figure>\n<p><strong>15.</strong> 打开<strong>MainActivity.java</strong>并且按照下面来修改代码。在这里我已经添加了一个新的方法<strong>setupTabIcons()</strong>来设置标签的图标。</p>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] tabIcons = &#123;</div><div class=\"line\">            R.drawable.ic_tab_favourite,</div><div class=\"line\">            R.drawable.ic_tab_call,</div><div class=\"line\">            R.drawable.ic_tab_contacts</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">        setupTabIcons();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupTabIcons</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">0</span>).setIcon(tabIcons[<span class=\"number\">0</span>]);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">1</span>).setIcon(tabIcons[<span class=\"number\">1</span>]);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">2</span>).setIcon(tabIcons[<span class=\"number\">2</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFrag</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-icon-and-text.png\" alt=\"android-tab-layout-with-icon-and-text\"></p>\n<h3 id=\"图标标签\"><a href=\"#图标标签\" class=\"headerlink\" title=\"图标标签\"></a>图标标签</h3><p>仅仅设置图标的选项卡是和图文的选项卡是一样的，只是ViewPagerAdapter类的<strong>getPageTitle()</strong>方法返回值为null即可。</p>\n<p><strong>16.</strong> 打开<strong>MainActivity.java</strong>并按照下面的代码修改<strong>getPageTitle()</strong>方法，接着运行项目。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">// return null to display only the icon</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-only-icons.png\" alt=\"android-tab-layout-with-only-icons\"></p>\n<h3 id=\"自定义图文选项卡\"><a href=\"#自定义图文选项卡\" class=\"headerlink\" title=\"自定义图文选项卡\"></a>自定义图文选项卡</h3><p>当默认的选项卡布局不能达到你预期的输出效果时，自定义选项卡就非常实用了。在你自定义选项卡试图的时候，请务必遵循Android选项卡的规范建议。</p>\n<p>当我们设置了图文选项卡时，你能够看到图标和文字是水平居中的，但是如果你想要放置图标在选项卡标签之上，你就必须使用一个自定义的view来完成它。</p>\n<p><strong>17.</strong> 在<strong>res ⇒ values</strong>下面,创建<strong>fonts.xml</strong>文件，并且添加以下字符串值。这个xml文件定义了选项卡中文字所使用的字体。</p>\n<p><code>fonts.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"font_fontFamily_medium\"</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>18.</strong> 在<strong>res ⇒ values-v21下面，创建另一个</strong>fonts.xml**文件。</p>\n<p><code>fonts.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"font_fontFamily_medium\"</span>&gt;</span>sans-serif-medium<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>19.</strong> 打开<strong>activity_main.xml</strong>并且给TabLayout设置自定义的高度。设置这个高度显得非常重要，因为在选项卡标签上面放置图标需要更多的空间。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></div><div class=\"line\">           <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tabs\"</span></div><div class=\"line\">           <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/custom_tab_layout_height\"</span></div><div class=\"line\">           <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></div><div class=\"line\">           <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>20.</strong> 在<strong>res ⇒ layout</strong>下新建的一个xml文件<strong>custom_tab.xml</strong>，这个文件是用来自定义选项卡布局的。</p>\n<p><code>custom_tab.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tab\"</span></div><div class=\"line\">    <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorAccent\"</span></div><div class=\"line\">    <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"@dimen/tab_label\"</span></div><div class=\"line\">    <span class=\"attr\">android:fontFamily</span>=<span class=\"string\">\"@string/font_fontFamily_medium\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>21.</strong> 打开<strong>MainActivity.java</strong>并按照下面的代码做修改。这里你是否注意到setupTabIcon()方法。下面的代码中我已经给每一个选项卡使用了custom_tab.xml布局，。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">TextView tabOne = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">tabOne.setText(<span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">tabOne.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_favourite, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">tabLayout.getTabAt(<span class=\"number\">0</span>).setCustomView(tabOne);</div></pre></td></tr></table></figure>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.TabLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentPagerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewPager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.R;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.OneFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.ThreeFragment;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialtabs.fragments.TwoFragment;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> TabLayout tabLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> ViewPager viewPager;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] tabIcons = &#123;</div><div class=\"line\">            R.drawable.ic_tab_favourite,</div><div class=\"line\">            R.drawable.ic_tab_call,</div><div class=\"line\">            R.drawable.ic_tab_contacts</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class=\"line\">        setupViewPager(viewPager);</div><div class=\"line\"> </div><div class=\"line\">        tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class=\"line\">        tabLayout.setupWithViewPager(viewPager);</div><div class=\"line\">        setupTabIcons();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupTabIcons</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        TextView tabOne = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">        tabOne.setText(<span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        tabOne.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_favourite, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">0</span>).setCustomView(tabOne);</div><div class=\"line\"> </div><div class=\"line\">        TextView tabTwo = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">        tabTwo.setText(<span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        tabTwo.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_call, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">1</span>).setCustomView(tabTwo);</div><div class=\"line\"> </div><div class=\"line\">        TextView tabThree = (TextView) LayoutInflater.from(<span class=\"keyword\">this</span>).inflate(R.layout.custom_tab, <span class=\"keyword\">null</span>);</div><div class=\"line\">        tabThree.setText(<span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        tabThree.setCompoundDrawablesWithIntrinsicBounds(<span class=\"number\">0</span>, R.drawable.ic_tab_contacts, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        tabLayout.getTabAt(<span class=\"number\">2</span>).setCustomView(tabThree);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupViewPager</span><span class=\"params\">(ViewPager viewPager)</span> </span>&#123;</div><div class=\"line\">        ViewPagerAdapter adapter = <span class=\"keyword\">new</span> ViewPagerAdapter(getSupportFragmentManager());</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> OneFragment(), <span class=\"string\">\"ONE\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> TwoFragment(), <span class=\"string\">\"TWO\"</span>);</div><div class=\"line\">        adapter.addFrag(<span class=\"keyword\">new</span> ThreeFragment(), <span class=\"string\">\"THREE\"</span>);</div><div class=\"line\">        viewPager.setAdapter(adapter);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Fragment&gt; mFragmentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mFragmentTitleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager manager)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(manager);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentList.size();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFrag</span><span class=\"params\">(Fragment fragment, String title)</span> </span>&#123;</div><div class=\"line\">            mFragmentList.add(fragment);</div><div class=\"line\">            mFragmentTitleList.add(title);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> CharSequence <span class=\"title\">getPageTitle</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mFragmentTitleList.get(position);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在如果你运行这个程序，你就能看到图标被放置在选项卡标签的上面了。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-tab-layout-with-custom-view-icon-and-text.png\" alt=\"android-tab-layout-with-custom-view-icon-and-text\"></p>\n<p>我希望这篇文章对于Material Design支持库的使用，提供了一些非常有用的信息，如果你有任何问题，请在下面回复。</p>"},{"title":"Android Studio 2.2 新特性","date":"2016-10-11T09:54:42.000Z","_content":"\n## 序言\n\n![as2.2_character](https://static.oschina.net/uploads/space/2016/0924/070554_J51U_2720166.png)\n今年的 I/O 2016 Google 放出了 Android Studio 2.2 的预览版，透露改进了多项功能，现在已经发布了 Android Studio 2.2 的正式版，按照 Google 的说法，此版本包含增强功能，主要面向三大主题：速度、智能和 Android 平台支持。通过新增的布局编辑器等功能加快开发速度，快速而直观地创建应用用户界面。利用新增的 APK 分析器、增强的布局检查器、扩展的代码分析、IntelliJ 的 2016.1.3 功能等，进行更智能的开发。\n<!-- more -->\n\n作为正式版 Android 应用开发 IDE，Android Studio 2.2 支持 Android 7.0 Nougat 中所有最新的开发者功能（例如代码自动完成），可帮助您添加多种 Android 平台功能，例如多窗口支持、Quick Settings API 或重新设计的通知，当然还有用于测试这些功能的内置 Android Emulator。 \n\n在此版本中，我们将 Android Frameworks 与 IDE 整合到一起创建约束布局。这个全新的布局管理器功能强大，可帮助您以扁平的流线型层次结构设计庞大而复杂的布局。ConstraintLayout 是与新的布局编辑器同时构建的，可像标准 Android 支持库那样集成到您的应用中。\n\n![new_character](https://static.oschina.net/uploads/space/2016/0924/070632_pSbD_2720166.png)\n\nAndroid Studio 2.2 新增了 20 多项功能，涉及开发流程的每个主要阶段：设计、开发、构建和测试。从使用新的 ConstraintLayout 设计 UI，到使用 Android NDK 开发 C++ 代码，到使用最新的 Jack 编译器进行构建，再到为应用创建 Espresso 测试案例，Android Studio 2.2 都是您不容错过的最新版本。\n\n\n## 新特性\n\n### 设计\n\n#### Layout Editor(布局编辑器)\n\n本次更新带来了全新的布局编辑器，我们以后调 UI 将更方便。打开一个 XML 文件，默认的 Design 模式如下图所示，主要包含 Palette、Component Tree、Toolbar、Design Editor、Properties 五部分，直接可视化的操作使布局更加方便易操作。\n\n![layout_editor](http://stormzhang.com/image/layout-editor-callouts_2-2_2x.png)\n\n当然对于习惯写 XML 代码的同学来说可以点击左下角的 Text 切换到代码格式，但是右边依然可以实时预览。Text 模式下的截图如下：\n\n![text_mode](http://stormzhang.com/image/layout-editor-text_2-2_2x.png)\n\n这里有个小技巧，可以操作快捷键 Control+Shift+Right/Left 来进行左右切换。然后我们可以通过 Toolbar 那一栏来配置我们预览的主题外观\n\n![text_mode](http://stormzhang.com/image/layout-editor-toolbar1-callouts_2-2_2x.png)\n\n#### Constraint Layout(约束布局)\n\nConstraint Layout 翻译过来我把它叫约束布局，它也是今年 Google 全新推出的一种布局，它更强大，简单来说，用 Constraint Layout 可以实现之前需要各种嵌套才能实现的效果，我们知道过多的布局嵌套对性能影响是很大的，因为 Constraint Layout 更强大，所以属性也就特别多，不过 Google 完全提供了一种可视化的操作，一张动图你们感受下：\n\n![text_mode](http://stormzhang.com/image/image00.gif)\n\n关于 Constraint Layout 的详细用法 Google 官方有个教程，想学习的可以看一下：\n\n[Using ConstraintLayout to design your views](https://codelabs.developers.google.com/codelabs/constraint-layout/)\n\n上面链接需要科学上网，英文阅读有困难的不妨看下这篇博客：\n\n[Android ConstraintLayout详解](http://www.jianshu.com/p/a8b49ff64cd3)\n\n### 开发\n\n#### Samples Browser\n\nGitHub 上 Google 有个叫 Google Samples 的组织，罗列了 Google 的上百个关于一些代码的示例，而这其中大部分都是 Android 相关的，比如 NavigationDrawer 不会用了，google 有个 android-NavigationDrawer 的示例。而这次 Google 直接把他关联到 Android Stduio 了，你可以在 Android Studio 选中一个类直接右键点击 Find Sample Code ，神奇的事情发生了：\n\n![sample-code](http://stormzhang.com/image/code_sample.png)\n\n上图可以看到以选中 PackageManager 为例，下面直接出现了一些 Google Sample 相关的代码，方便你快速查找该用法，而且还有个链接直接指向到 Android Developer 官网该类的详细介绍\n\n#### Improved C++ Support（改进的 C++ 支持）\n\n现在可以使用 CMake 或 ndk-build 从 Gradle 编译 C++ 项目。现在可将项目从 CMake 构建系统无缝迁移到 Android Studio。Android Studio 中的新项目向导对 C++ 提供了支持，此外，还对 C++ 编辑和调试体验进行了大量的问题修复。\n\n![C_plus_plus-code](https://2.bp.blogspot.com/-fN7u1isHtDg/V-ATulF2JdI/AAAAAAAADZs/pLfGX_85NXomeFgfiIP3sGolu3QdiYQsgCLcB/s640/C_plus_plus.png)\n\n### 构建\n\n#### Instant Run Improvements(Instant Run改进)\n\nInstant Run 的推出确实很不错，但是第一次编译会比较慢。我们先来看下 Google 官方的更新说明：\n\n在此版本中，我们对 Instant Run 的稳定性和可靠性进行了大量的改进。如果您之前禁用了 Instant Run，建议重新启用，如果今后仍遇到问题，请告诉我们。（Settings → Build, Execution, Deployment → Instant Run [适用于 Windows/Linux], Preferences → Build, Execution, Deployment → Instant Run [适用于 OS X]）。打开方法见下图：\n\n![instant-run](http://stormzhang.com/image/image05.png)\n\n#### Build cache (Experimental)(缓存构建)\n\n升级2.2之后会提示升级gradle\n![gradle](http://stormzhang.com/image/as2.2.png)\n\n为了加快 Gradle 的编译速度，Google 新增了一个编译缓存的功能，不过目前还是实验性的，具体用法就是在你的 gradle.properties 文件里加上这么一行代码：\n\n``` xml\nandroid.enableBuildCache=true\n```\n\n总体来说升级了 Gradle，加上这么一句代码，确实感觉编译快了些，大家可以自行感受下。每次编译生成的缓存在 ~/users/.android/build-cache 目录下，如果缓存过多可以手动删除该目录进行清除。\n\n\n#### APK Analyzer（apk解析器）\n\nGoogle 推出了一个 APK 分析器，现在可以很方便的使用 Android Studio 进行 APK 分析。具体用法点击 Build -> Analyze APK 然后选择你要分析的 APK 文件就可以了。\n\n- 可以方便的查看全部文件和大小\n\n![apk-file-sizes_2x](http://stormzhang.com/image/apk-file-sizes_2x.png)\n\n\n- 可以直接查看 AndroidManifest.xml 文件\n\n![apk-manifest-error_2x](http://stormzhang.com/image/apk-manifest-error_2x.png)\n\n- 可以直接查看资源文件\n\n![preview_2x](http://stormzhang.com/image/apk-image-preview_2x.png)\n\n![strings_2x](http://stormzhang.com/image/apk-strings_2x.png)\n\n- 可以直接查看 dex 文件\n\n![multidex_2x](http://stormzhang.com/image/apk-multidex_2x.png)\n\n- 两个 apk 进行比较\n\n![compare_2x](http://stormzhang.com/image/apk-compare_2x.png)\n\n以后人人都会逆向 APK 了。\n\n\n### 测试\n\n#### Virtual Sensors in the Android Emulator（虚拟传感器）\n\nGoogle 这次同样改进了模拟器，这次让模拟器支持虚拟传感器，你们感受下。\n\n![image02](http://stormzhang.com/image/image02.gif)\n\n#### Espresso Test Recorder (Beta)（测试记录器（测试版））\n\nGoogle 为测试新增了一个功能，就是我们可以对操作进行录像，然后根据我们的操作生成一些测试脚本，而且配合 Firebase 将更方便。\n\n![image10](http://stormzhang.com/image/image10.png)\n\n理论上来说此功能很不错，可以解放了测试人员的双手，只不过该功能还是测试，应该很不稳定，而且国内行情结合 Firebase 很困难，对开发意义不大，可以持续关注。\n\n#### GPU Debugger (Beta)（GPU 调试程序（测试版））\n\nGPU 调试程序现在为测试版。现在，您可捕获 Android 设备上的 OpenGL ES 命令流，然后在 Android Studio 内重播该命令流以便对其进行分析。也可全面检查任何指定 OpenGL ES 命令的 GPU 状态，以更好地了解和调试您的图形输出。\n\n![image11](https://1.bp.blogspot.com/-2IprWPLlQcs/V-AWAlo-SlI/AAAAAAAADaQ/0ppF6MZ8CaQTHpYX7qXV-zrRk28IOlzBQCLcB/s640/image11.png)\n\n## 总结\n\n除以上之外，此次更新还包括对 Java 8 的支持，Jack 编译器的改进，可以调试 GPU，改进了对 C++ 的支持等，总体来说此次更新推出了不少提升 Android 开发效率的工具，性能上也做了优化，值得大家更新！\n\n1. [官方更新说明](http://android-developers.blogspot.jp/2016/09/android-studio-2-2.html)\n2. [官方各版本描述](https://developer.android.com/studio/releases/index.html)","source":"_posts/Android-Studio-2-2-新特性.md","raw":"title: Android Studio 2.2 新特性\ndate: 2016-10-11 17:54:42\ncategories: [Android Studio]\ntags: [Android Studio2.2]\n---\n\n## 序言\n\n![as2.2_character](https://static.oschina.net/uploads/space/2016/0924/070554_J51U_2720166.png)\n今年的 I/O 2016 Google 放出了 Android Studio 2.2 的预览版，透露改进了多项功能，现在已经发布了 Android Studio 2.2 的正式版，按照 Google 的说法，此版本包含增强功能，主要面向三大主题：速度、智能和 Android 平台支持。通过新增的布局编辑器等功能加快开发速度，快速而直观地创建应用用户界面。利用新增的 APK 分析器、增强的布局检查器、扩展的代码分析、IntelliJ 的 2016.1.3 功能等，进行更智能的开发。\n<!-- more -->\n\n作为正式版 Android 应用开发 IDE，Android Studio 2.2 支持 Android 7.0 Nougat 中所有最新的开发者功能（例如代码自动完成），可帮助您添加多种 Android 平台功能，例如多窗口支持、Quick Settings API 或重新设计的通知，当然还有用于测试这些功能的内置 Android Emulator。 \n\n在此版本中，我们将 Android Frameworks 与 IDE 整合到一起创建约束布局。这个全新的布局管理器功能强大，可帮助您以扁平的流线型层次结构设计庞大而复杂的布局。ConstraintLayout 是与新的布局编辑器同时构建的，可像标准 Android 支持库那样集成到您的应用中。\n\n![new_character](https://static.oschina.net/uploads/space/2016/0924/070632_pSbD_2720166.png)\n\nAndroid Studio 2.2 新增了 20 多项功能，涉及开发流程的每个主要阶段：设计、开发、构建和测试。从使用新的 ConstraintLayout 设计 UI，到使用 Android NDK 开发 C++ 代码，到使用最新的 Jack 编译器进行构建，再到为应用创建 Espresso 测试案例，Android Studio 2.2 都是您不容错过的最新版本。\n\n\n## 新特性\n\n### 设计\n\n#### Layout Editor(布局编辑器)\n\n本次更新带来了全新的布局编辑器，我们以后调 UI 将更方便。打开一个 XML 文件，默认的 Design 模式如下图所示，主要包含 Palette、Component Tree、Toolbar、Design Editor、Properties 五部分，直接可视化的操作使布局更加方便易操作。\n\n![layout_editor](http://stormzhang.com/image/layout-editor-callouts_2-2_2x.png)\n\n当然对于习惯写 XML 代码的同学来说可以点击左下角的 Text 切换到代码格式，但是右边依然可以实时预览。Text 模式下的截图如下：\n\n![text_mode](http://stormzhang.com/image/layout-editor-text_2-2_2x.png)\n\n这里有个小技巧，可以操作快捷键 Control+Shift+Right/Left 来进行左右切换。然后我们可以通过 Toolbar 那一栏来配置我们预览的主题外观\n\n![text_mode](http://stormzhang.com/image/layout-editor-toolbar1-callouts_2-2_2x.png)\n\n#### Constraint Layout(约束布局)\n\nConstraint Layout 翻译过来我把它叫约束布局，它也是今年 Google 全新推出的一种布局，它更强大，简单来说，用 Constraint Layout 可以实现之前需要各种嵌套才能实现的效果，我们知道过多的布局嵌套对性能影响是很大的，因为 Constraint Layout 更强大，所以属性也就特别多，不过 Google 完全提供了一种可视化的操作，一张动图你们感受下：\n\n![text_mode](http://stormzhang.com/image/image00.gif)\n\n关于 Constraint Layout 的详细用法 Google 官方有个教程，想学习的可以看一下：\n\n[Using ConstraintLayout to design your views](https://codelabs.developers.google.com/codelabs/constraint-layout/)\n\n上面链接需要科学上网，英文阅读有困难的不妨看下这篇博客：\n\n[Android ConstraintLayout详解](http://www.jianshu.com/p/a8b49ff64cd3)\n\n### 开发\n\n#### Samples Browser\n\nGitHub 上 Google 有个叫 Google Samples 的组织，罗列了 Google 的上百个关于一些代码的示例，而这其中大部分都是 Android 相关的，比如 NavigationDrawer 不会用了，google 有个 android-NavigationDrawer 的示例。而这次 Google 直接把他关联到 Android Stduio 了，你可以在 Android Studio 选中一个类直接右键点击 Find Sample Code ，神奇的事情发生了：\n\n![sample-code](http://stormzhang.com/image/code_sample.png)\n\n上图可以看到以选中 PackageManager 为例，下面直接出现了一些 Google Sample 相关的代码，方便你快速查找该用法，而且还有个链接直接指向到 Android Developer 官网该类的详细介绍\n\n#### Improved C++ Support（改进的 C++ 支持）\n\n现在可以使用 CMake 或 ndk-build 从 Gradle 编译 C++ 项目。现在可将项目从 CMake 构建系统无缝迁移到 Android Studio。Android Studio 中的新项目向导对 C++ 提供了支持，此外，还对 C++ 编辑和调试体验进行了大量的问题修复。\n\n![C_plus_plus-code](https://2.bp.blogspot.com/-fN7u1isHtDg/V-ATulF2JdI/AAAAAAAADZs/pLfGX_85NXomeFgfiIP3sGolu3QdiYQsgCLcB/s640/C_plus_plus.png)\n\n### 构建\n\n#### Instant Run Improvements(Instant Run改进)\n\nInstant Run 的推出确实很不错，但是第一次编译会比较慢。我们先来看下 Google 官方的更新说明：\n\n在此版本中，我们对 Instant Run 的稳定性和可靠性进行了大量的改进。如果您之前禁用了 Instant Run，建议重新启用，如果今后仍遇到问题，请告诉我们。（Settings → Build, Execution, Deployment → Instant Run [适用于 Windows/Linux], Preferences → Build, Execution, Deployment → Instant Run [适用于 OS X]）。打开方法见下图：\n\n![instant-run](http://stormzhang.com/image/image05.png)\n\n#### Build cache (Experimental)(缓存构建)\n\n升级2.2之后会提示升级gradle\n![gradle](http://stormzhang.com/image/as2.2.png)\n\n为了加快 Gradle 的编译速度，Google 新增了一个编译缓存的功能，不过目前还是实验性的，具体用法就是在你的 gradle.properties 文件里加上这么一行代码：\n\n``` xml\nandroid.enableBuildCache=true\n```\n\n总体来说升级了 Gradle，加上这么一句代码，确实感觉编译快了些，大家可以自行感受下。每次编译生成的缓存在 ~/users/.android/build-cache 目录下，如果缓存过多可以手动删除该目录进行清除。\n\n\n#### APK Analyzer（apk解析器）\n\nGoogle 推出了一个 APK 分析器，现在可以很方便的使用 Android Studio 进行 APK 分析。具体用法点击 Build -> Analyze APK 然后选择你要分析的 APK 文件就可以了。\n\n- 可以方便的查看全部文件和大小\n\n![apk-file-sizes_2x](http://stormzhang.com/image/apk-file-sizes_2x.png)\n\n\n- 可以直接查看 AndroidManifest.xml 文件\n\n![apk-manifest-error_2x](http://stormzhang.com/image/apk-manifest-error_2x.png)\n\n- 可以直接查看资源文件\n\n![preview_2x](http://stormzhang.com/image/apk-image-preview_2x.png)\n\n![strings_2x](http://stormzhang.com/image/apk-strings_2x.png)\n\n- 可以直接查看 dex 文件\n\n![multidex_2x](http://stormzhang.com/image/apk-multidex_2x.png)\n\n- 两个 apk 进行比较\n\n![compare_2x](http://stormzhang.com/image/apk-compare_2x.png)\n\n以后人人都会逆向 APK 了。\n\n\n### 测试\n\n#### Virtual Sensors in the Android Emulator（虚拟传感器）\n\nGoogle 这次同样改进了模拟器，这次让模拟器支持虚拟传感器，你们感受下。\n\n![image02](http://stormzhang.com/image/image02.gif)\n\n#### Espresso Test Recorder (Beta)（测试记录器（测试版））\n\nGoogle 为测试新增了一个功能，就是我们可以对操作进行录像，然后根据我们的操作生成一些测试脚本，而且配合 Firebase 将更方便。\n\n![image10](http://stormzhang.com/image/image10.png)\n\n理论上来说此功能很不错，可以解放了测试人员的双手，只不过该功能还是测试，应该很不稳定，而且国内行情结合 Firebase 很困难，对开发意义不大，可以持续关注。\n\n#### GPU Debugger (Beta)（GPU 调试程序（测试版））\n\nGPU 调试程序现在为测试版。现在，您可捕获 Android 设备上的 OpenGL ES 命令流，然后在 Android Studio 内重播该命令流以便对其进行分析。也可全面检查任何指定 OpenGL ES 命令的 GPU 状态，以更好地了解和调试您的图形输出。\n\n![image11](https://1.bp.blogspot.com/-2IprWPLlQcs/V-AWAlo-SlI/AAAAAAAADaQ/0ppF6MZ8CaQTHpYX7qXV-zrRk28IOlzBQCLcB/s640/image11.png)\n\n## 总结\n\n除以上之外，此次更新还包括对 Java 8 的支持，Jack 编译器的改进，可以调试 GPU，改进了对 C++ 的支持等，总体来说此次更新推出了不少提升 Android 开发效率的工具，性能上也做了优化，值得大家更新！\n\n1. [官方更新说明](http://android-developers.blogspot.jp/2016/09/android-studio-2-2.html)\n2. [官方各版本描述](https://developer.android.com/studio/releases/index.html)","slug":"Android-Studio-2-2-新特性","published":1,"updated":"2016-10-11T09:56:18.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b9d000b1giyj8l39eho","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p><img src=\"https://static.oschina.net/uploads/space/2016/0924/070554_J51U_2720166.png\" alt=\"as2.2_character\"><br>今年的 I/O 2016 Google 放出了 Android Studio 2.2 的预览版，透露改进了多项功能，现在已经发布了 Android Studio 2.2 的正式版，按照 Google 的说法，此版本包含增强功能，主要面向三大主题：速度、智能和 Android 平台支持。通过新增的布局编辑器等功能加快开发速度，快速而直观地创建应用用户界面。利用新增的 APK 分析器、增强的布局检查器、扩展的代码分析、IntelliJ 的 2016.1.3 功能等，进行更智能的开发。<br><a id=\"more\"></a></p>\n<p>作为正式版 Android 应用开发 IDE，Android Studio 2.2 支持 Android 7.0 Nougat 中所有最新的开发者功能（例如代码自动完成），可帮助您添加多种 Android 平台功能，例如多窗口支持、Quick Settings API 或重新设计的通知，当然还有用于测试这些功能的内置 Android Emulator。 </p>\n<p>在此版本中，我们将 Android Frameworks 与 IDE 整合到一起创建约束布局。这个全新的布局管理器功能强大，可帮助您以扁平的流线型层次结构设计庞大而复杂的布局。ConstraintLayout 是与新的布局编辑器同时构建的，可像标准 Android 支持库那样集成到您的应用中。</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2016/0924/070632_pSbD_2720166.png\" alt=\"new_character\"></p>\n<p>Android Studio 2.2 新增了 20 多项功能，涉及开发流程的每个主要阶段：设计、开发、构建和测试。从使用新的 ConstraintLayout 设计 UI，到使用 Android NDK 开发 C++ 代码，到使用最新的 Jack 编译器进行构建，再到为应用创建 Espresso 测试案例，Android Studio 2.2 都是您不容错过的最新版本。</p>\n<h2 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h2><h3 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h3><h4 id=\"Layout-Editor-布局编辑器\"><a href=\"#Layout-Editor-布局编辑器\" class=\"headerlink\" title=\"Layout Editor(布局编辑器)\"></a>Layout Editor(布局编辑器)</h4><p>本次更新带来了全新的布局编辑器，我们以后调 UI 将更方便。打开一个 XML 文件，默认的 Design 模式如下图所示，主要包含 Palette、Component Tree、Toolbar、Design Editor、Properties 五部分，直接可视化的操作使布局更加方便易操作。</p>\n<p><img src=\"http://stormzhang.com/image/layout-editor-callouts_2-2_2x.png\" alt=\"layout_editor\"></p>\n<p>当然对于习惯写 XML 代码的同学来说可以点击左下角的 Text 切换到代码格式，但是右边依然可以实时预览。Text 模式下的截图如下：</p>\n<p><img src=\"http://stormzhang.com/image/layout-editor-text_2-2_2x.png\" alt=\"text_mode\"></p>\n<p>这里有个小技巧，可以操作快捷键 Control+Shift+Right/Left 来进行左右切换。然后我们可以通过 Toolbar 那一栏来配置我们预览的主题外观</p>\n<p><img src=\"http://stormzhang.com/image/layout-editor-toolbar1-callouts_2-2_2x.png\" alt=\"text_mode\"></p>\n<h4 id=\"Constraint-Layout-约束布局\"><a href=\"#Constraint-Layout-约束布局\" class=\"headerlink\" title=\"Constraint Layout(约束布局)\"></a>Constraint Layout(约束布局)</h4><p>Constraint Layout 翻译过来我把它叫约束布局，它也是今年 Google 全新推出的一种布局，它更强大，简单来说，用 Constraint Layout 可以实现之前需要各种嵌套才能实现的效果，我们知道过多的布局嵌套对性能影响是很大的，因为 Constraint Layout 更强大，所以属性也就特别多，不过 Google 完全提供了一种可视化的操作，一张动图你们感受下：</p>\n<p><img src=\"http://stormzhang.com/image/image00.gif\" alt=\"text_mode\"></p>\n<p>关于 Constraint Layout 的详细用法 Google 官方有个教程，想学习的可以看一下：</p>\n<p><a href=\"https://codelabs.developers.google.com/codelabs/constraint-layout/\" target=\"_blank\" rel=\"external\">Using ConstraintLayout to design your views</a></p>\n<p>上面链接需要科学上网，英文阅读有困难的不妨看下这篇博客：</p>\n<p><a href=\"http://www.jianshu.com/p/a8b49ff64cd3\" target=\"_blank\" rel=\"external\">Android ConstraintLayout详解</a></p>\n<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><h4 id=\"Samples-Browser\"><a href=\"#Samples-Browser\" class=\"headerlink\" title=\"Samples Browser\"></a>Samples Browser</h4><p>GitHub 上 Google 有个叫 Google Samples 的组织，罗列了 Google 的上百个关于一些代码的示例，而这其中大部分都是 Android 相关的，比如 NavigationDrawer 不会用了，google 有个 android-NavigationDrawer 的示例。而这次 Google 直接把他关联到 Android Stduio 了，你可以在 Android Studio 选中一个类直接右键点击 Find Sample Code ，神奇的事情发生了：</p>\n<p><img src=\"http://stormzhang.com/image/code_sample.png\" alt=\"sample-code\"></p>\n<p>上图可以看到以选中 PackageManager 为例，下面直接出现了一些 Google Sample 相关的代码，方便你快速查找该用法，而且还有个链接直接指向到 Android Developer 官网该类的详细介绍</p>\n<h4 id=\"Improved-C-Support（改进的-C-支持）\"><a href=\"#Improved-C-Support（改进的-C-支持）\" class=\"headerlink\" title=\"Improved C++ Support（改进的 C++ 支持）\"></a>Improved C++ Support（改进的 C++ 支持）</h4><p>现在可以使用 CMake 或 ndk-build 从 Gradle 编译 C++ 项目。现在可将项目从 CMake 构建系统无缝迁移到 Android Studio。Android Studio 中的新项目向导对 C++ 提供了支持，此外，还对 C++ 编辑和调试体验进行了大量的问题修复。</p>\n<p><img src=\"https://2.bp.blogspot.com/-fN7u1isHtDg/V-ATulF2JdI/AAAAAAAADZs/pLfGX_85NXomeFgfiIP3sGolu3QdiYQsgCLcB/s640/C_plus_plus.png\" alt=\"C_plus_plus-code\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><h4 id=\"Instant-Run-Improvements-Instant-Run改进\"><a href=\"#Instant-Run-Improvements-Instant-Run改进\" class=\"headerlink\" title=\"Instant Run Improvements(Instant Run改进)\"></a>Instant Run Improvements(Instant Run改进)</h4><p>Instant Run 的推出确实很不错，但是第一次编译会比较慢。我们先来看下 Google 官方的更新说明：</p>\n<p>在此版本中，我们对 Instant Run 的稳定性和可靠性进行了大量的改进。如果您之前禁用了 Instant Run，建议重新启用，如果今后仍遇到问题，请告诉我们。（Settings → Build, Execution, Deployment → Instant Run [适用于 Windows/Linux], Preferences → Build, Execution, Deployment → Instant Run [适用于 OS X]）。打开方法见下图：</p>\n<p><img src=\"http://stormzhang.com/image/image05.png\" alt=\"instant-run\"></p>\n<h4 id=\"Build-cache-Experimental-缓存构建\"><a href=\"#Build-cache-Experimental-缓存构建\" class=\"headerlink\" title=\"Build cache (Experimental)(缓存构建)\"></a>Build cache (Experimental)(缓存构建)</h4><p>升级2.2之后会提示升级gradle<br><img src=\"http://stormzhang.com/image/as2.2.png\" alt=\"gradle\"></p>\n<p>为了加快 Gradle 的编译速度，Google 新增了一个编译缓存的功能，不过目前还是实验性的，具体用法就是在你的 gradle.properties 文件里加上这么一行代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.enableBuildCache=true</div></pre></td></tr></table></figure>\n<p>总体来说升级了 Gradle，加上这么一句代码，确实感觉编译快了些，大家可以自行感受下。每次编译生成的缓存在 ~/users/.android/build-cache 目录下，如果缓存过多可以手动删除该目录进行清除。</p>\n<h4 id=\"APK-Analyzer（apk解析器）\"><a href=\"#APK-Analyzer（apk解析器）\" class=\"headerlink\" title=\"APK Analyzer（apk解析器）\"></a>APK Analyzer（apk解析器）</h4><p>Google 推出了一个 APK 分析器，现在可以很方便的使用 Android Studio 进行 APK 分析。具体用法点击 Build -&gt; Analyze APK 然后选择你要分析的 APK 文件就可以了。</p>\n<ul>\n<li>可以方便的查看全部文件和大小</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-file-sizes_2x.png\" alt=\"apk-file-sizes_2x\"></p>\n<ul>\n<li>可以直接查看 AndroidManifest.xml 文件</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-manifest-error_2x.png\" alt=\"apk-manifest-error_2x\"></p>\n<ul>\n<li>可以直接查看资源文件</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-image-preview_2x.png\" alt=\"preview_2x\"></p>\n<p><img src=\"http://stormzhang.com/image/apk-strings_2x.png\" alt=\"strings_2x\"></p>\n<ul>\n<li>可以直接查看 dex 文件</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-multidex_2x.png\" alt=\"multidex_2x\"></p>\n<ul>\n<li>两个 apk 进行比较</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-compare_2x.png\" alt=\"compare_2x\"></p>\n<p>以后人人都会逆向 APK 了。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"Virtual-Sensors-in-the-Android-Emulator（虚拟传感器）\"><a href=\"#Virtual-Sensors-in-the-Android-Emulator（虚拟传感器）\" class=\"headerlink\" title=\"Virtual Sensors in the Android Emulator（虚拟传感器）\"></a>Virtual Sensors in the Android Emulator（虚拟传感器）</h4><p>Google 这次同样改进了模拟器，这次让模拟器支持虚拟传感器，你们感受下。</p>\n<p><img src=\"http://stormzhang.com/image/image02.gif\" alt=\"image02\"></p>\n<h4 id=\"Espresso-Test-Recorder-Beta-（测试记录器（测试版））\"><a href=\"#Espresso-Test-Recorder-Beta-（测试记录器（测试版））\" class=\"headerlink\" title=\"Espresso Test Recorder (Beta)（测试记录器（测试版））\"></a>Espresso Test Recorder (Beta)（测试记录器（测试版））</h4><p>Google 为测试新增了一个功能，就是我们可以对操作进行录像，然后根据我们的操作生成一些测试脚本，而且配合 Firebase 将更方便。</p>\n<p><img src=\"http://stormzhang.com/image/image10.png\" alt=\"image10\"></p>\n<p>理论上来说此功能很不错，可以解放了测试人员的双手，只不过该功能还是测试，应该很不稳定，而且国内行情结合 Firebase 很困难，对开发意义不大，可以持续关注。</p>\n<h4 id=\"GPU-Debugger-Beta-（GPU-调试程序（测试版））\"><a href=\"#GPU-Debugger-Beta-（GPU-调试程序（测试版））\" class=\"headerlink\" title=\"GPU Debugger (Beta)（GPU 调试程序（测试版））\"></a>GPU Debugger (Beta)（GPU 调试程序（测试版））</h4><p>GPU 调试程序现在为测试版。现在，您可捕获 Android 设备上的 OpenGL ES 命令流，然后在 Android Studio 内重播该命令流以便对其进行分析。也可全面检查任何指定 OpenGL ES 命令的 GPU 状态，以更好地了解和调试您的图形输出。</p>\n<p><img src=\"https://1.bp.blogspot.com/-2IprWPLlQcs/V-AWAlo-SlI/AAAAAAAADaQ/0ppF6MZ8CaQTHpYX7qXV-zrRk28IOlzBQCLcB/s640/image11.png\" alt=\"image11\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>除以上之外，此次更新还包括对 Java 8 的支持，Jack 编译器的改进，可以调试 GPU，改进了对 C++ 的支持等，总体来说此次更新推出了不少提升 Android 开发效率的工具，性能上也做了优化，值得大家更新！</p>\n<ol>\n<li><a href=\"http://android-developers.blogspot.jp/2016/09/android-studio-2-2.html\" target=\"_blank\" rel=\"external\">官方更新说明</a></li>\n<li><a href=\"https://developer.android.com/studio/releases/index.html\" target=\"_blank\" rel=\"external\">官方各版本描述</a></li>\n</ol>\n","excerpt":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p><img src=\"https://static.oschina.net/uploads/space/2016/0924/070554_J51U_2720166.png\" alt=\"as2.2_character\"><br>今年的 I/O 2016 Google 放出了 Android Studio 2.2 的预览版，透露改进了多项功能，现在已经发布了 Android Studio 2.2 的正式版，按照 Google 的说法，此版本包含增强功能，主要面向三大主题：速度、智能和 Android 平台支持。通过新增的布局编辑器等功能加快开发速度，快速而直观地创建应用用户界面。利用新增的 APK 分析器、增强的布局检查器、扩展的代码分析、IntelliJ 的 2016.1.3 功能等，进行更智能的开发。<br>","more":"</p>\n<p>作为正式版 Android 应用开发 IDE，Android Studio 2.2 支持 Android 7.0 Nougat 中所有最新的开发者功能（例如代码自动完成），可帮助您添加多种 Android 平台功能，例如多窗口支持、Quick Settings API 或重新设计的通知，当然还有用于测试这些功能的内置 Android Emulator。 </p>\n<p>在此版本中，我们将 Android Frameworks 与 IDE 整合到一起创建约束布局。这个全新的布局管理器功能强大，可帮助您以扁平的流线型层次结构设计庞大而复杂的布局。ConstraintLayout 是与新的布局编辑器同时构建的，可像标准 Android 支持库那样集成到您的应用中。</p>\n<p><img src=\"https://static.oschina.net/uploads/space/2016/0924/070632_pSbD_2720166.png\" alt=\"new_character\"></p>\n<p>Android Studio 2.2 新增了 20 多项功能，涉及开发流程的每个主要阶段：设计、开发、构建和测试。从使用新的 ConstraintLayout 设计 UI，到使用 Android NDK 开发 C++ 代码，到使用最新的 Jack 编译器进行构建，再到为应用创建 Espresso 测试案例，Android Studio 2.2 都是您不容错过的最新版本。</p>\n<h2 id=\"新特性\"><a href=\"#新特性\" class=\"headerlink\" title=\"新特性\"></a>新特性</h2><h3 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h3><h4 id=\"Layout-Editor-布局编辑器\"><a href=\"#Layout-Editor-布局编辑器\" class=\"headerlink\" title=\"Layout Editor(布局编辑器)\"></a>Layout Editor(布局编辑器)</h4><p>本次更新带来了全新的布局编辑器，我们以后调 UI 将更方便。打开一个 XML 文件，默认的 Design 模式如下图所示，主要包含 Palette、Component Tree、Toolbar、Design Editor、Properties 五部分，直接可视化的操作使布局更加方便易操作。</p>\n<p><img src=\"http://stormzhang.com/image/layout-editor-callouts_2-2_2x.png\" alt=\"layout_editor\"></p>\n<p>当然对于习惯写 XML 代码的同学来说可以点击左下角的 Text 切换到代码格式，但是右边依然可以实时预览。Text 模式下的截图如下：</p>\n<p><img src=\"http://stormzhang.com/image/layout-editor-text_2-2_2x.png\" alt=\"text_mode\"></p>\n<p>这里有个小技巧，可以操作快捷键 Control+Shift+Right/Left 来进行左右切换。然后我们可以通过 Toolbar 那一栏来配置我们预览的主题外观</p>\n<p><img src=\"http://stormzhang.com/image/layout-editor-toolbar1-callouts_2-2_2x.png\" alt=\"text_mode\"></p>\n<h4 id=\"Constraint-Layout-约束布局\"><a href=\"#Constraint-Layout-约束布局\" class=\"headerlink\" title=\"Constraint Layout(约束布局)\"></a>Constraint Layout(约束布局)</h4><p>Constraint Layout 翻译过来我把它叫约束布局，它也是今年 Google 全新推出的一种布局，它更强大，简单来说，用 Constraint Layout 可以实现之前需要各种嵌套才能实现的效果，我们知道过多的布局嵌套对性能影响是很大的，因为 Constraint Layout 更强大，所以属性也就特别多，不过 Google 完全提供了一种可视化的操作，一张动图你们感受下：</p>\n<p><img src=\"http://stormzhang.com/image/image00.gif\" alt=\"text_mode\"></p>\n<p>关于 Constraint Layout 的详细用法 Google 官方有个教程，想学习的可以看一下：</p>\n<p><a href=\"https://codelabs.developers.google.com/codelabs/constraint-layout/\">Using ConstraintLayout to design your views</a></p>\n<p>上面链接需要科学上网，英文阅读有困难的不妨看下这篇博客：</p>\n<p><a href=\"http://www.jianshu.com/p/a8b49ff64cd3\">Android ConstraintLayout详解</a></p>\n<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><h4 id=\"Samples-Browser\"><a href=\"#Samples-Browser\" class=\"headerlink\" title=\"Samples Browser\"></a>Samples Browser</h4><p>GitHub 上 Google 有个叫 Google Samples 的组织，罗列了 Google 的上百个关于一些代码的示例，而这其中大部分都是 Android 相关的，比如 NavigationDrawer 不会用了，google 有个 android-NavigationDrawer 的示例。而这次 Google 直接把他关联到 Android Stduio 了，你可以在 Android Studio 选中一个类直接右键点击 Find Sample Code ，神奇的事情发生了：</p>\n<p><img src=\"http://stormzhang.com/image/code_sample.png\" alt=\"sample-code\"></p>\n<p>上图可以看到以选中 PackageManager 为例，下面直接出现了一些 Google Sample 相关的代码，方便你快速查找该用法，而且还有个链接直接指向到 Android Developer 官网该类的详细介绍</p>\n<h4 id=\"Improved-C-Support（改进的-C-支持）\"><a href=\"#Improved-C-Support（改进的-C-支持）\" class=\"headerlink\" title=\"Improved C++ Support（改进的 C++ 支持）\"></a>Improved C++ Support（改进的 C++ 支持）</h4><p>现在可以使用 CMake 或 ndk-build 从 Gradle 编译 C++ 项目。现在可将项目从 CMake 构建系统无缝迁移到 Android Studio。Android Studio 中的新项目向导对 C++ 提供了支持，此外，还对 C++ 编辑和调试体验进行了大量的问题修复。</p>\n<p><img src=\"https://2.bp.blogspot.com/-fN7u1isHtDg/V-ATulF2JdI/AAAAAAAADZs/pLfGX_85NXomeFgfiIP3sGolu3QdiYQsgCLcB/s640/C_plus_plus.png\" alt=\"C_plus_plus-code\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><h4 id=\"Instant-Run-Improvements-Instant-Run改进\"><a href=\"#Instant-Run-Improvements-Instant-Run改进\" class=\"headerlink\" title=\"Instant Run Improvements(Instant Run改进)\"></a>Instant Run Improvements(Instant Run改进)</h4><p>Instant Run 的推出确实很不错，但是第一次编译会比较慢。我们先来看下 Google 官方的更新说明：</p>\n<p>在此版本中，我们对 Instant Run 的稳定性和可靠性进行了大量的改进。如果您之前禁用了 Instant Run，建议重新启用，如果今后仍遇到问题，请告诉我们。（Settings → Build, Execution, Deployment → Instant Run [适用于 Windows/Linux], Preferences → Build, Execution, Deployment → Instant Run [适用于 OS X]）。打开方法见下图：</p>\n<p><img src=\"http://stormzhang.com/image/image05.png\" alt=\"instant-run\"></p>\n<h4 id=\"Build-cache-Experimental-缓存构建\"><a href=\"#Build-cache-Experimental-缓存构建\" class=\"headerlink\" title=\"Build cache (Experimental)(缓存构建)\"></a>Build cache (Experimental)(缓存构建)</h4><p>升级2.2之后会提示升级gradle<br><img src=\"http://stormzhang.com/image/as2.2.png\" alt=\"gradle\"></p>\n<p>为了加快 Gradle 的编译速度，Google 新增了一个编译缓存的功能，不过目前还是实验性的，具体用法就是在你的 gradle.properties 文件里加上这么一行代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android.enableBuildCache=true</div></pre></td></tr></table></figure>\n<p>总体来说升级了 Gradle，加上这么一句代码，确实感觉编译快了些，大家可以自行感受下。每次编译生成的缓存在 ~/users/.android/build-cache 目录下，如果缓存过多可以手动删除该目录进行清除。</p>\n<h4 id=\"APK-Analyzer（apk解析器）\"><a href=\"#APK-Analyzer（apk解析器）\" class=\"headerlink\" title=\"APK Analyzer（apk解析器）\"></a>APK Analyzer（apk解析器）</h4><p>Google 推出了一个 APK 分析器，现在可以很方便的使用 Android Studio 进行 APK 分析。具体用法点击 Build -&gt; Analyze APK 然后选择你要分析的 APK 文件就可以了。</p>\n<ul>\n<li>可以方便的查看全部文件和大小</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-file-sizes_2x.png\" alt=\"apk-file-sizes_2x\"></p>\n<ul>\n<li>可以直接查看 AndroidManifest.xml 文件</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-manifest-error_2x.png\" alt=\"apk-manifest-error_2x\"></p>\n<ul>\n<li>可以直接查看资源文件</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-image-preview_2x.png\" alt=\"preview_2x\"></p>\n<p><img src=\"http://stormzhang.com/image/apk-strings_2x.png\" alt=\"strings_2x\"></p>\n<ul>\n<li>可以直接查看 dex 文件</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-multidex_2x.png\" alt=\"multidex_2x\"></p>\n<ul>\n<li>两个 apk 进行比较</li>\n</ul>\n<p><img src=\"http://stormzhang.com/image/apk-compare_2x.png\" alt=\"compare_2x\"></p>\n<p>以后人人都会逆向 APK 了。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"Virtual-Sensors-in-the-Android-Emulator（虚拟传感器）\"><a href=\"#Virtual-Sensors-in-the-Android-Emulator（虚拟传感器）\" class=\"headerlink\" title=\"Virtual Sensors in the Android Emulator（虚拟传感器）\"></a>Virtual Sensors in the Android Emulator（虚拟传感器）</h4><p>Google 这次同样改进了模拟器，这次让模拟器支持虚拟传感器，你们感受下。</p>\n<p><img src=\"http://stormzhang.com/image/image02.gif\" alt=\"image02\"></p>\n<h4 id=\"Espresso-Test-Recorder-Beta-（测试记录器（测试版））\"><a href=\"#Espresso-Test-Recorder-Beta-（测试记录器（测试版））\" class=\"headerlink\" title=\"Espresso Test Recorder (Beta)（测试记录器（测试版））\"></a>Espresso Test Recorder (Beta)（测试记录器（测试版））</h4><p>Google 为测试新增了一个功能，就是我们可以对操作进行录像，然后根据我们的操作生成一些测试脚本，而且配合 Firebase 将更方便。</p>\n<p><img src=\"http://stormzhang.com/image/image10.png\" alt=\"image10\"></p>\n<p>理论上来说此功能很不错，可以解放了测试人员的双手，只不过该功能还是测试，应该很不稳定，而且国内行情结合 Firebase 很困难，对开发意义不大，可以持续关注。</p>\n<h4 id=\"GPU-Debugger-Beta-（GPU-调试程序（测试版））\"><a href=\"#GPU-Debugger-Beta-（GPU-调试程序（测试版））\" class=\"headerlink\" title=\"GPU Debugger (Beta)（GPU 调试程序（测试版））\"></a>GPU Debugger (Beta)（GPU 调试程序（测试版））</h4><p>GPU 调试程序现在为测试版。现在，您可捕获 Android 设备上的 OpenGL ES 命令流，然后在 Android Studio 内重播该命令流以便对其进行分析。也可全面检查任何指定 OpenGL ES 命令的 GPU 状态，以更好地了解和调试您的图形输出。</p>\n<p><img src=\"https://1.bp.blogspot.com/-2IprWPLlQcs/V-AWAlo-SlI/AAAAAAAADaQ/0ppF6MZ8CaQTHpYX7qXV-zrRk28IOlzBQCLcB/s640/image11.png\" alt=\"image11\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>除以上之外，此次更新还包括对 Java 8 的支持，Jack 编译器的改进，可以调试 GPU，改进了对 C++ 的支持等，总体来说此次更新推出了不少提升 Android 开发效率的工具，性能上也做了优化，值得大家更新！</p>\n<ol>\n<li><a href=\"http://android-developers.blogspot.jp/2016/09/android-studio-2-2.html\">官方更新说明</a></li>\n<li><a href=\"https://developer.android.com/studio/releases/index.html\">官方各版本描述</a></li>\n</ol>"},{"title":"Android Material Design - Snackbar","date":"2015-12-24T08:49:57.000Z","_content":"\n> 原作者：Ravi Tamada\n> 原文地址：[http://www.androidhive.info/...example/](http://www.androidhive.info/2015/09/android-material-design-snackbar-example/)\n\nMaterial Design中一个有趣的组件介绍就是**[Snackbar][1]**。Snackbar就像**Toast**消息，只是它提供了动作交互。Snackbar在屏幕底部显示，并且可以滑动关闭。\n\n这篇文章讲述的是关于Snackbar和一些不同场景下的例子。\n\n#### 源码下载\n\n[戳我下载](http://download.androidhive.info/)\n\n#### 1.简单的Snackbar\n\n下面是一个简单的Snackbar语法。**make**方法接收三个参数：View、显示的信息、消息显示的持续时间。\n\n通常传递 **CoordinatorLayout** 作为view参数是最好的选择，因为它允许Snackbar一些特性，像滑动取消、像FloatingActionButton控件的自动移动。\n\n并且显示的持续时间应该是**LENGTH_SHORT**, **LENGTH_LONG**或者**LENGTH_INDEFINITE**。当**LENGTH_INDEFINITE**被使用时，snackbar显示的时间将是不确定的，而且可以滑动删除。\n\n``` java\nSnackbar snackbar = Snackbar\n        .make(coordinatorLayout, \"Welcome to AndroidHive\", Snackbar.LENGTH_LONG);\n \nsnackbar.show();\n```\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-example.png)\n<!-- more -->\n\n\n#### 2.Snackbar与动作回调\n\n你也可以使用一个回调方法_setAction()_，使得它可以和我们有一些动作交互。\n\n``` java\nSnackbar snackbar = Snackbar\n        .make(coordinatorLayout, \"Message is deleted\", Snackbar.LENGTH_LONG)\n        .setAction(\"UNDO\", new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, \"Message is restored!\", Snackbar.LENGTH_SHORT);\n                snackbar1.show();\n            }\n        });\n \nsnackbar.show();\n```\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-with-action-callback-undo.png)\n\n#### 3.自定义Snackbar\n\nSnackbar默认文字颜色 **white**、默认背景是 **#323232**。你可以按照下面的方式修改：\n``` java\nSnackbar snackbar = Snackbar\n        .make(coordinatorLayout, \"No internet connection!\", Snackbar.LENGTH_LONG)\n        .setAction(\"RETRY\", new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n            }\n        });\n \n// Changing message text color\nsnackbar.setActionTextColor(Color.RED);\n \n// Changing action button text color\nView sbView = snackbar.getView();\nTextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);\ntextView.setTextColor(Color.YELLOW);\nsnackbar.show();\n\n```\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-custom-color-view-text-color.png)\n\n\n#### 4.创建新项目\n\n现在我们创建一个demo来看看Snackbar动作，而且应用用**CoordinatorLayout **和**FloatingActionButton**。\n\n1.在Android Studio中，执行**File => New Project**，然后填上所有的信息来创建一个新工程。\n\n2.打开**Build.gradle**然后添加库的依赖\n`build.gradle`\n``` java\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.android.support:design:23.0.1'\n}\n```\n3.可选项，你可以应用**material design**的主题，通过[这里][2]的步骤。\n\n4.打开布局文件，然后我添加了以下代码，是包含**CoordinatorLayout**、**FloatingActionButton**。\n\n`activity_main.xml`\n``` java\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/coordinatorLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n \n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|enterAlways\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n    </android.support.design.widget.AppBarLayout>\n \n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:paddingLeft=\"20dp\"\n        android:paddingRight=\"20dp\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n \n        <Button\n            android:id=\"@+id/btnSimpleSnackbar\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"Simple Snackbar\" />\n \n        <Button\n            android:id=\"@+id/btnActionCallback\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"10dp\"\n            android:text=\"With Action Callback\" />\n \n        <Button\n            android:id=\"@+id/btnCustomSnackbar\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"10dp\"\n            android:text=\"Custom Color\" />\n \n    </LinearLayout>\n \n    <android.support.design.widget.FloatingActionButton\n        android:id=\"@+id/fab\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_dialog_email\" />\n \n</android.support.design.widget.CoordinatorLayout>\n```\n5.现在打开**MainActivity.java**然后按照下面的修改，这个activity包含了三个按钮及点击事件，实现了上面提到的不同样式的Snackbar。\n\n`MainActivity.java`\n``` java\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.support.design.widget.CoordinatorLayout;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar mToolbar;\n    private CoordinatorLayout coordinatorLayout;\n    private Button btnSimpleSnackbar, btnActionCallback, btnCustomView;\n    private FloatingActionButton fab;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        coordinatorLayout = (CoordinatorLayout) findViewById(R.id\n                .coordinatorLayout);\n \n        fab = (FloatingActionButton) findViewById(R.id.fab);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n \n        btnSimpleSnackbar = (Button) findViewById(R.id.btnSimpleSnackbar);\n        btnActionCallback = (Button) findViewById(R.id.btnActionCallback);\n        btnCustomView = (Button) findViewById(R.id.btnCustomSnackbar);\n \n        btnSimpleSnackbar.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar = Snackbar\n                        .make(coordinatorLayout, \"Welcome to AndroidHive\", Snackbar.LENGTH_LONG);\n \n                snackbar.show();\n            }\n        });\n \n        btnActionCallback.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar = Snackbar\n                        .make(coordinatorLayout, \"Message is deleted\", Snackbar.LENGTH_LONG)\n                        .setAction(\"UNDO\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, \"Message is restored!\", Snackbar.LENGTH_SHORT);\n                                snackbar1.show();\n                            }\n                        });\n \n                snackbar.show();\n            }\n        });\n \n        btnCustomView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar = Snackbar\n                        .make(coordinatorLayout, \"No internet connection!\", Snackbar.LENGTH_LONG)\n                        .setAction(\"RETRY\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                            }\n                        });\n \n                // Changing message text color\n                snackbar.setActionTextColor(Color.RED);\n \n                // Changing action button text color\n                View sbView = snackbar.getView();\n                TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);\n                textView.setTextColor(Color.YELLOW);\n \n                snackbar.show();\n            }\n        });\n    }\n}\n```\n\n6.运行这个项目，可以测试这几种效果。\n\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-snackbar-example.png)\n\n\n\n\n\n\n\n\n\n[1]: https://www.google.co.in/design/spec/components/snackbars-toasts.html\n[2]: http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/","source":"_posts/Android-Material-Design-Snackbar.md","raw":"title: Android Material Design - Snackbar\ndate: 2015-12-24 16:49:57\ncategories: [Android]\ntags: [Material Design, Snackbar]\n---\n\n> 原作者：Ravi Tamada\n> 原文地址：[http://www.androidhive.info/...example/](http://www.androidhive.info/2015/09/android-material-design-snackbar-example/)\n\nMaterial Design中一个有趣的组件介绍就是**[Snackbar][1]**。Snackbar就像**Toast**消息，只是它提供了动作交互。Snackbar在屏幕底部显示，并且可以滑动关闭。\n\n这篇文章讲述的是关于Snackbar和一些不同场景下的例子。\n\n#### 源码下载\n\n[戳我下载](http://download.androidhive.info/)\n\n#### 1.简单的Snackbar\n\n下面是一个简单的Snackbar语法。**make**方法接收三个参数：View、显示的信息、消息显示的持续时间。\n\n通常传递 **CoordinatorLayout** 作为view参数是最好的选择，因为它允许Snackbar一些特性，像滑动取消、像FloatingActionButton控件的自动移动。\n\n并且显示的持续时间应该是**LENGTH_SHORT**, **LENGTH_LONG**或者**LENGTH_INDEFINITE**。当**LENGTH_INDEFINITE**被使用时，snackbar显示的时间将是不确定的，而且可以滑动删除。\n\n``` java\nSnackbar snackbar = Snackbar\n        .make(coordinatorLayout, \"Welcome to AndroidHive\", Snackbar.LENGTH_LONG);\n \nsnackbar.show();\n```\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-example.png)\n<!-- more -->\n\n\n#### 2.Snackbar与动作回调\n\n你也可以使用一个回调方法_setAction()_，使得它可以和我们有一些动作交互。\n\n``` java\nSnackbar snackbar = Snackbar\n        .make(coordinatorLayout, \"Message is deleted\", Snackbar.LENGTH_LONG)\n        .setAction(\"UNDO\", new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, \"Message is restored!\", Snackbar.LENGTH_SHORT);\n                snackbar1.show();\n            }\n        });\n \nsnackbar.show();\n```\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-with-action-callback-undo.png)\n\n#### 3.自定义Snackbar\n\nSnackbar默认文字颜色 **white**、默认背景是 **#323232**。你可以按照下面的方式修改：\n``` java\nSnackbar snackbar = Snackbar\n        .make(coordinatorLayout, \"No internet connection!\", Snackbar.LENGTH_LONG)\n        .setAction(\"RETRY\", new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n            }\n        });\n \n// Changing message text color\nsnackbar.setActionTextColor(Color.RED);\n \n// Changing action button text color\nView sbView = snackbar.getView();\nTextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);\ntextView.setTextColor(Color.YELLOW);\nsnackbar.show();\n\n```\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-custom-color-view-text-color.png)\n\n\n#### 4.创建新项目\n\n现在我们创建一个demo来看看Snackbar动作，而且应用用**CoordinatorLayout **和**FloatingActionButton**。\n\n1.在Android Studio中，执行**File => New Project**，然后填上所有的信息来创建一个新工程。\n\n2.打开**Build.gradle**然后添加库的依赖\n`build.gradle`\n``` java\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:23.0.1'\n    compile 'com.android.support:design:23.0.1'\n}\n```\n3.可选项，你可以应用**material design**的主题，通过[这里][2]的步骤。\n\n4.打开布局文件，然后我添加了以下代码，是包含**CoordinatorLayout**、**FloatingActionButton**。\n\n`activity_main.xml`\n``` java\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/coordinatorLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n \n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:layout_scrollFlags=\"scroll|enterAlways\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n    </android.support.design.widget.AppBarLayout>\n \n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:paddingLeft=\"20dp\"\n        android:paddingRight=\"20dp\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n \n        <Button\n            android:id=\"@+id/btnSimpleSnackbar\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"Simple Snackbar\" />\n \n        <Button\n            android:id=\"@+id/btnActionCallback\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"10dp\"\n            android:text=\"With Action Callback\" />\n \n        <Button\n            android:id=\"@+id/btnCustomSnackbar\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"10dp\"\n            android:text=\"Custom Color\" />\n \n    </LinearLayout>\n \n    <android.support.design.widget.FloatingActionButton\n        android:id=\"@+id/fab\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_dialog_email\" />\n \n</android.support.design.widget.CoordinatorLayout>\n```\n5.现在打开**MainActivity.java**然后按照下面的修改，这个activity包含了三个按钮及点击事件，实现了上面提到的不同样式的Snackbar。\n\n`MainActivity.java`\n``` java\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.support.design.widget.CoordinatorLayout;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.TextView;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar mToolbar;\n    private CoordinatorLayout coordinatorLayout;\n    private Button btnSimpleSnackbar, btnActionCallback, btnCustomView;\n    private FloatingActionButton fab;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        coordinatorLayout = (CoordinatorLayout) findViewById(R.id\n                .coordinatorLayout);\n \n        fab = (FloatingActionButton) findViewById(R.id.fab);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n \n        btnSimpleSnackbar = (Button) findViewById(R.id.btnSimpleSnackbar);\n        btnActionCallback = (Button) findViewById(R.id.btnActionCallback);\n        btnCustomView = (Button) findViewById(R.id.btnCustomSnackbar);\n \n        btnSimpleSnackbar.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar = Snackbar\n                        .make(coordinatorLayout, \"Welcome to AndroidHive\", Snackbar.LENGTH_LONG);\n \n                snackbar.show();\n            }\n        });\n \n        btnActionCallback.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar = Snackbar\n                        .make(coordinatorLayout, \"Message is deleted\", Snackbar.LENGTH_LONG)\n                        .setAction(\"UNDO\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, \"Message is restored!\", Snackbar.LENGTH_SHORT);\n                                snackbar1.show();\n                            }\n                        });\n \n                snackbar.show();\n            }\n        });\n \n        btnCustomView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar snackbar = Snackbar\n                        .make(coordinatorLayout, \"No internet connection!\", Snackbar.LENGTH_LONG)\n                        .setAction(\"RETRY\", new View.OnClickListener() {\n                            @Override\n                            public void onClick(View view) {\n                            }\n                        });\n \n                // Changing message text color\n                snackbar.setActionTextColor(Color.RED);\n \n                // Changing action button text color\n                View sbView = snackbar.getView();\n                TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);\n                textView.setTextColor(Color.YELLOW);\n \n                snackbar.show();\n            }\n        });\n    }\n}\n```\n\n6.运行这个项目，可以测试这几种效果。\n\n![example](http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-snackbar-example.png)\n\n\n\n\n\n\n\n\n\n[1]: https://www.google.co.in/design/spec/components/snackbars-toasts.html\n[2]: http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/","slug":"Android-Material-Design-Snackbar","published":1,"updated":"2016-10-10T06:53:44.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b9f000d1giyb9c858cy","content":"<blockquote>\n<p>原作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/09/android-material-design-snackbar-example/\" target=\"_blank\" rel=\"external\">http://www.androidhive.info/…example/</a></p>\n</blockquote>\n<p>Material Design中一个有趣的组件介绍就是<strong><a href=\"https://www.google.co.in/design/spec/components/snackbars-toasts.html\" target=\"_blank\" rel=\"external\">Snackbar</a></strong>。Snackbar就像<strong>Toast</strong>消息，只是它提供了动作交互。Snackbar在屏幕底部显示，并且可以滑动关闭。</p>\n<p>这篇文章讲述的是关于Snackbar和一些不同场景下的例子。</p>\n<h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p><a href=\"http://download.androidhive.info/\" target=\"_blank\" rel=\"external\">戳我下载</a></p>\n<h4 id=\"1-简单的Snackbar\"><a href=\"#1-简单的Snackbar\" class=\"headerlink\" title=\"1.简单的Snackbar\"></a>1.简单的Snackbar</h4><p>下面是一个简单的Snackbar语法。<strong>make</strong>方法接收三个参数：View、显示的信息、消息显示的持续时间。</p>\n<p>通常传递 <strong>CoordinatorLayout</strong> 作为view参数是最好的选择，因为它允许Snackbar一些特性，像滑动取消、像FloatingActionButton控件的自动移动。</p>\n<p>并且显示的持续时间应该是<strong>LENGTH_SHORT</strong>, <strong>LENGTH_LONG</strong>或者<strong>LENGTH_INDEFINITE</strong>。当<strong>LENGTH_INDEFINITE</strong>被使用时，snackbar显示的时间将是不确定的，而且可以滑动删除。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar snackbar = Snackbar</div><div class=\"line\">        .make(coordinatorLayout, <span class=\"string\">\"Welcome to AndroidHive\"</span>, Snackbar.LENGTH_LONG);</div><div class=\"line\"> </div><div class=\"line\">snackbar.show();</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-example.png\" alt=\"example\"><br><a id=\"more\"></a></p>\n<h4 id=\"2-Snackbar与动作回调\"><a href=\"#2-Snackbar与动作回调\" class=\"headerlink\" title=\"2.Snackbar与动作回调\"></a>2.Snackbar与动作回调</h4><p>你也可以使用一个回调方法<em>setAction()</em>，使得它可以和我们有一些动作交互。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar snackbar = Snackbar</div><div class=\"line\">        .make(coordinatorLayout, <span class=\"string\">\"Message is deleted\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">        .setAction(<span class=\"string\">\"UNDO\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, <span class=\"string\">\"Message is restored!\"</span>, Snackbar.LENGTH_SHORT);</div><div class=\"line\">                snackbar1.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">snackbar.show();</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-with-action-callback-undo.png\" alt=\"example\"></p>\n<h4 id=\"3-自定义Snackbar\"><a href=\"#3-自定义Snackbar\" class=\"headerlink\" title=\"3.自定义Snackbar\"></a>3.自定义Snackbar</h4><p>Snackbar默认文字颜色 <strong>white</strong>、默认背景是 <strong>#323232</strong>。你可以按照下面的方式修改：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar snackbar = Snackbar</div><div class=\"line\">        .make(coordinatorLayout, <span class=\"string\">\"No internet connection!\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">        .setAction(<span class=\"string\">\"RETRY\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Changing message text color</span></div><div class=\"line\">snackbar.setActionTextColor(Color.RED);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Changing action button text color</span></div><div class=\"line\">View sbView = snackbar.getView();</div><div class=\"line\">TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);</div><div class=\"line\">textView.setTextColor(Color.YELLOW);</div><div class=\"line\">snackbar.show();</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-custom-color-view-text-color.png\" alt=\"example\"></p>\n<h4 id=\"4-创建新项目\"><a href=\"#4-创建新项目\" class=\"headerlink\" title=\"4.创建新项目\"></a>4.创建新项目</h4><p>现在我们创建一个demo来看看Snackbar动作，而且应用用<strong>CoordinatorLayout </strong>和<strong>FloatingActionButton</strong>。</p>\n<p>1.在Android Studio中，执行<strong>File =&gt; New Project</strong>，然后填上所有的信息来创建一个新工程。</p>\n<p>2.打开<strong>Build.gradle</strong>然后添加库的依赖<br><code>build.gradle</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span></span></div><div class=\"line\">    compile 'com.android.support:appcompat-v7:23.0.1'</div><div class=\"line\">    compile 'com.android.support:design:23.0.1'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.可选项，你可以应用<strong>material design</strong>的主题，通过<a href=\"http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/\" target=\"_blank\" rel=\"external\">这里</a>的步骤。</p>\n<p>4.打开布局文件，然后我添加了以下代码，是包含<strong>CoordinatorLayout</strong>、<strong>FloatingActionButton</strong>。</p>\n<p><code>activity_main.xml</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    android:id=\"@+id/coordinatorLayout\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\"</div><div class=\"line\">    tools:context=\".MainActivity\"&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;android.support.design.widget.AppBarLayout</div><div class=\"line\">        android:layout_width=\"match_parent\"</div><div class=\"line\">        android:layout_height=\"wrap_content\"</div><div class=\"line\">        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;android.support.v7.widget.Toolbar</div><div class=\"line\">            android:id=\"@+id/toolbar\"</div><div class=\"line\">            android:layout_width=\"match_parent\"</div><div class=\"line\">            android:layout_height=\"?attr/actionBarSize\"</div><div class=\"line\">            android:background=\"?attr/colorPrimary\"</div><div class=\"line\">            app:layout_scrollFlags=\"scroll|enterAlways\"</div><div class=\"line\">            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt;</div><div class=\"line\">    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">        android:layout_width=\"fill_parent\"</div><div class=\"line\">        android:layout_height=\"wrap_content\"</div><div class=\"line\">        android:orientation=\"vertical\"</div><div class=\"line\">        android:paddingLeft=\"20dp\"</div><div class=\"line\">        android:paddingRight=\"20dp\"</div><div class=\"line\">        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;Button</div><div class=\"line\">            android:id=\"@+id/btnSimpleSnackbar\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:layout_marginTop=\"30dp\"</div><div class=\"line\">            android:text=\"Simple Snackbar\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;Button</div><div class=\"line\">            android:id=\"@+id/btnActionCallback\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:layout_marginTop=\"10dp\"</div><div class=\"line\">            android:text=\"With Action Callback\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;Button</div><div class=\"line\">            android:id=\"@+id/btnCustomSnackbar\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:layout_marginTop=\"10dp\"</div><div class=\"line\">            android:text=\"Custom Color\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;android.support.design.widget.FloatingActionButton</div><div class=\"line\">        android:id=\"@+id/fab\"</div><div class=\"line\">        android:layout_width=\"wrap_content\"</div><div class=\"line\">        android:layout_height=\"wrap_content\"</div><div class=\"line\">        android:layout_gravity=\"end|bottom\"</div><div class=\"line\">        android:layout_margin=\"16dp\"</div><div class=\"line\">        android:src=\"@android:drawable/ic_dialog_email\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>5.现在打开<strong>MainActivity.java</strong>然后按照下面的修改，这个activity包含了三个按钮及点击事件，实现了上面提到的不同样式的Snackbar。</p>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.CoordinatorLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.FloatingActionButton;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.Snackbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> CoordinatorLayout coordinatorLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> Button btnSimpleSnackbar, btnActionCallback, btnCustomView;</div><div class=\"line\">    <span class=\"keyword\">private</span> FloatingActionButton fab;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        coordinatorLayout = (CoordinatorLayout) findViewById(R.id</div><div class=\"line\">                .coordinatorLayout);</div><div class=\"line\"> </div><div class=\"line\">        fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\"> </div><div class=\"line\">        btnSimpleSnackbar = (Button) findViewById(R.id.btnSimpleSnackbar);</div><div class=\"line\">        btnActionCallback = (Button) findViewById(R.id.btnActionCallback);</div><div class=\"line\">        btnCustomView = (Button) findViewById(R.id.btnCustomSnackbar);</div><div class=\"line\"> </div><div class=\"line\">        btnSimpleSnackbar.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar = Snackbar</div><div class=\"line\">                        .make(coordinatorLayout, <span class=\"string\">\"Welcome to AndroidHive\"</span>, Snackbar.LENGTH_LONG);</div><div class=\"line\"> </div><div class=\"line\">                snackbar.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        btnActionCallback.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar = Snackbar</div><div class=\"line\">                        .make(coordinatorLayout, <span class=\"string\">\"Message is deleted\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">                        .setAction(<span class=\"string\">\"UNDO\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, <span class=\"string\">\"Message is restored!\"</span>, Snackbar.LENGTH_SHORT);</div><div class=\"line\">                                snackbar1.show();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\"> </div><div class=\"line\">                snackbar.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        btnCustomView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar = Snackbar</div><div class=\"line\">                        .make(coordinatorLayout, <span class=\"string\">\"No internet connection!\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">                        .setAction(<span class=\"string\">\"RETRY\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"comment\">// Changing message text color</span></div><div class=\"line\">                snackbar.setActionTextColor(Color.RED);</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"comment\">// Changing action button text color</span></div><div class=\"line\">                View sbView = snackbar.getView();</div><div class=\"line\">                TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);</div><div class=\"line\">                textView.setTextColor(Color.YELLOW);</div><div class=\"line\"> </div><div class=\"line\">                snackbar.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.运行这个项目，可以测试这几种效果。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-snackbar-example.png\" alt=\"example\"></p>\n","excerpt":"<blockquote>\n<p>原作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/09/android-material-design-snackbar-example/\">http://www.androidhive.info/…example/</a></p>\n</blockquote>\n<p>Material Design中一个有趣的组件介绍就是<strong><a href=\"https://www.google.co.in/design/spec/components/snackbars-toasts.html\">Snackbar</a></strong>。Snackbar就像<strong>Toast</strong>消息，只是它提供了动作交互。Snackbar在屏幕底部显示，并且可以滑动关闭。</p>\n<p>这篇文章讲述的是关于Snackbar和一些不同场景下的例子。</p>\n<h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p><a href=\"http://download.androidhive.info/\">戳我下载</a></p>\n<h4 id=\"1-简单的Snackbar\"><a href=\"#1-简单的Snackbar\" class=\"headerlink\" title=\"1.简单的Snackbar\"></a>1.简单的Snackbar</h4><p>下面是一个简单的Snackbar语法。<strong>make</strong>方法接收三个参数：View、显示的信息、消息显示的持续时间。</p>\n<p>通常传递 <strong>CoordinatorLayout</strong> 作为view参数是最好的选择，因为它允许Snackbar一些特性，像滑动取消、像FloatingActionButton控件的自动移动。</p>\n<p>并且显示的持续时间应该是<strong>LENGTH_SHORT</strong>, <strong>LENGTH_LONG</strong>或者<strong>LENGTH_INDEFINITE</strong>。当<strong>LENGTH_INDEFINITE</strong>被使用时，snackbar显示的时间将是不确定的，而且可以滑动删除。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar snackbar = Snackbar</div><div class=\"line\">        .make(coordinatorLayout, <span class=\"string\">\"Welcome to AndroidHive\"</span>, Snackbar.LENGTH_LONG);</div><div class=\"line\"> </div><div class=\"line\">snackbar.show();</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-example.png\" alt=\"example\"><br>","more":"</p>\n<h4 id=\"2-Snackbar与动作回调\"><a href=\"#2-Snackbar与动作回调\" class=\"headerlink\" title=\"2.Snackbar与动作回调\"></a>2.Snackbar与动作回调</h4><p>你也可以使用一个回调方法<em>setAction()</em>，使得它可以和我们有一些动作交互。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar snackbar = Snackbar</div><div class=\"line\">        .make(coordinatorLayout, <span class=\"string\">\"Message is deleted\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">        .setAction(<span class=\"string\">\"UNDO\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, <span class=\"string\">\"Message is restored!\"</span>, Snackbar.LENGTH_SHORT);</div><div class=\"line\">                snackbar1.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">snackbar.show();</div></pre></td></tr></table></figure>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-with-action-callback-undo.png\" alt=\"example\"></p>\n<h4 id=\"3-自定义Snackbar\"><a href=\"#3-自定义Snackbar\" class=\"headerlink\" title=\"3.自定义Snackbar\"></a>3.自定义Snackbar</h4><p>Snackbar默认文字颜色 <strong>white</strong>、默认背景是 <strong>#323232</strong>。你可以按照下面的方式修改：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Snackbar snackbar = Snackbar</div><div class=\"line\">        .make(coordinatorLayout, <span class=\"string\">\"No internet connection!\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">        .setAction(<span class=\"string\">\"RETRY\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Changing message text color</span></div><div class=\"line\">snackbar.setActionTextColor(Color.RED);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Changing action button text color</span></div><div class=\"line\">View sbView = snackbar.getView();</div><div class=\"line\">TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);</div><div class=\"line\">textView.setTextColor(Color.YELLOW);</div><div class=\"line\">snackbar.show();</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-snackbar-custom-color-view-text-color.png\" alt=\"example\"></p>\n<h4 id=\"4-创建新项目\"><a href=\"#4-创建新项目\" class=\"headerlink\" title=\"4.创建新项目\"></a>4.创建新项目</h4><p>现在我们创建一个demo来看看Snackbar动作，而且应用用<strong>CoordinatorLayout </strong>和<strong>FloatingActionButton</strong>。</p>\n<p>1.在Android Studio中，执行<strong>File =&gt; New Project</strong>，然后填上所有的信息来创建一个新工程。</p>\n<p>2.打开<strong>Build.gradle</strong>然后添加库的依赖<br><code>build.gradle</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    <span class=\"function\">compile <span class=\"title\">fileTree</span><span class=\"params\">(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span></div><div class=\"line\">    compile 'com.android.support:appcompat-v7:23.0.1'</div><div class=\"line\">    compile 'com.android.support:design:23.0.1'</div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>3.可选项，你可以应用<strong>material design</strong>的主题，通过<a href=\"http://tips.androidhive.info/2015/09/android-how-to-apply-material-design-theme/\">这里</a>的步骤。</p>\n<p>4.打开布局文件，然后我添加了以下代码，是包含<strong>CoordinatorLayout</strong>、<strong>FloatingActionButton</strong>。</p>\n<p><code>activity_main.xml</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    android:id=\"@+id/coordinatorLayout\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\"</div><div class=\"line\">    tools:context=\".MainActivity\"&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;android.support.design.widget.AppBarLayout</div><div class=\"line\">        android:layout_width=\"match_parent\"</div><div class=\"line\">        android:layout_height=\"wrap_content\"</div><div class=\"line\">        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;android.support.v7.widget.Toolbar</div><div class=\"line\">            android:id=\"@+id/toolbar\"</div><div class=\"line\">            android:layout_width=\"match_parent\"</div><div class=\"line\">            android:layout_height=\"?attr/actionBarSize\"</div><div class=\"line\">            android:background=\"?attr/colorPrimary\"</div><div class=\"line\">            app:layout_scrollFlags=\"scroll|enterAlways\"</div><div class=\"line\">            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt;</div><div class=\"line\">    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">        android:layout_width=\"fill_parent\"</div><div class=\"line\">        android:layout_height=\"wrap_content\"</div><div class=\"line\">        android:orientation=\"vertical\"</div><div class=\"line\">        android:paddingLeft=\"20dp\"</div><div class=\"line\">        android:paddingRight=\"20dp\"</div><div class=\"line\">        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;Button</div><div class=\"line\">            android:id=\"@+id/btnSimpleSnackbar\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:layout_marginTop=\"30dp\"</div><div class=\"line\">            android:text=\"Simple Snackbar\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;Button</div><div class=\"line\">            android:id=\"@+id/btnActionCallback\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:layout_marginTop=\"10dp\"</div><div class=\"line\">            android:text=\"With Action Callback\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;Button</div><div class=\"line\">            android:id=\"@+id/btnCustomSnackbar\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:layout_marginTop=\"10dp\"</div><div class=\"line\">            android:text=\"Custom Color\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;android.support.design.widget.FloatingActionButton</div><div class=\"line\">        android:id=\"@+id/fab\"</div><div class=\"line\">        android:layout_width=\"wrap_content\"</div><div class=\"line\">        android:layout_height=\"wrap_content\"</div><div class=\"line\">        android:layout_gravity=\"end|bottom\"</div><div class=\"line\">        android:layout_margin=\"16dp\"</div><div class=\"line\">        android:src=\"@android:drawable/ic_dialog_email\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>5.现在打开<strong>MainActivity.java</strong>然后按照下面的修改，这个activity包含了三个按钮及点击事件，实现了上面提到的不同样式的Snackbar。</p>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.CoordinatorLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.FloatingActionButton;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.design.widget.Snackbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> CoordinatorLayout coordinatorLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> Button btnSimpleSnackbar, btnActionCallback, btnCustomView;</div><div class=\"line\">    <span class=\"keyword\">private</span> FloatingActionButton fab;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        coordinatorLayout = (CoordinatorLayout) findViewById(R.id</div><div class=\"line\">                .coordinatorLayout);</div><div class=\"line\"> </div><div class=\"line\">        fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\"> </div><div class=\"line\">        btnSimpleSnackbar = (Button) findViewById(R.id.btnSimpleSnackbar);</div><div class=\"line\">        btnActionCallback = (Button) findViewById(R.id.btnActionCallback);</div><div class=\"line\">        btnCustomView = (Button) findViewById(R.id.btnCustomSnackbar);</div><div class=\"line\"> </div><div class=\"line\">        btnSimpleSnackbar.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar = Snackbar</div><div class=\"line\">                        .make(coordinatorLayout, <span class=\"string\">\"Welcome to AndroidHive\"</span>, Snackbar.LENGTH_LONG);</div><div class=\"line\"> </div><div class=\"line\">                snackbar.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        btnActionCallback.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar = Snackbar</div><div class=\"line\">                        .make(coordinatorLayout, <span class=\"string\">\"Message is deleted\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">                        .setAction(<span class=\"string\">\"UNDO\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                                Snackbar snackbar1 = Snackbar.make(coordinatorLayout, <span class=\"string\">\"Message is restored!\"</span>, Snackbar.LENGTH_SHORT);</div><div class=\"line\">                                snackbar1.show();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\"> </div><div class=\"line\">                snackbar.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">        btnCustomView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                Snackbar snackbar = Snackbar</div><div class=\"line\">                        .make(coordinatorLayout, <span class=\"string\">\"No internet connection!\"</span>, Snackbar.LENGTH_LONG)</div><div class=\"line\">                        .setAction(<span class=\"string\">\"RETRY\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                            <span class=\"meta\">@Override</span></div><div class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;);</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"comment\">// Changing message text color</span></div><div class=\"line\">                snackbar.setActionTextColor(Color.RED);</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"comment\">// Changing action button text color</span></div><div class=\"line\">                View sbView = snackbar.getView();</div><div class=\"line\">                TextView textView = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);</div><div class=\"line\">                textView.setTextColor(Color.YELLOW);</div><div class=\"line\"> </div><div class=\"line\">                snackbar.show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.运行这个项目，可以测试这几种效果。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/09/android-material-design-snackbar-example.png\" alt=\"example\"></p>"},{"title":"Android Material Design入门","date":"2015-12-31T01:41:32.000Z","_content":"\n>原作者：Ravi Tamada\n>原文地址：[http://www.androidhive.info/...with-material-design/](http://www.androidhive.info/2015/04/android-getting-started-with-material-design/)\n\n你可能听说了在Android Lollipop（棒棒糖）版本中有关Material Design的介绍。在Material Design中，介绍了许多新的东西，像Material主题、新的widget、自定义阴影、矢量图片和自定义动画。如果你还没有使用过Material Design，那么这篇文章会给你一个好的开始。\n\n在这个教程中，我们将学习Material Design开发基础的步骤，比如编写自定义主题、使用RecyclerView实现导航抽屉。\n\n通过下面的链接获取更多的关于Material Design的知识：\n\n>[Material Design Specifications](http://www.google.com/design/spec/material-design/introduction.html#)\n>[Creating Apps with Material Design](http://developer.android.com/intl/zh-tw/training/material/index.html)\n\n本文资源链接：\n\n>源码下载：[点击获取](http://download.androidhive.info/download?code=WPSkdrdZprHT0KLCZS3ClafgXBikGqM4r7FnNYdsdUTmlAkK6%2F2mkT0heOlNOq4U82rzqbod%2F14yU2uk5TWY4Zp%2FAYx6oiD7SKI%2FEgtUapzQUqkqcWEXX1bmw%3D%3DvqARiMEKqkqsXGbVf3vVUoffTqQcD2qfqZo)\n>视频演示地址：[Yutube](https://youtu.be/jDXX_wDvarM)\n<!-- more -->\n\n\n## 1. 下载Android Studio\n\n在进一步了解之前,下载Android Studio并且进行必须的设置，因为之后我将使用Android Studio做教程讲解。如果你是第一次尝试Android Studio，通过[概述文档][1]了一下Android Studio。\n\n\n\n\n\n## 2. Material Design颜色自定义\n\nMaterial Design提供了一些其颜色主题的自定义属性，但是我们使用主要的五种，来自定义整个主题：\n\n- `colorPrimaryDark` – 应用于通知栏的背景色\n\n- `colorPrimary` – 这是应用最主要的颜色，应用于toolbar的背景色\n\n- `textColorPrimary` – 这是文字的颜色，应用于toolbar的标题\n\n- `windowBackground` – 这是应用默认的背景色\n\n- `navigationBarColor` – 这个颜色定义了底部导航按钮的背景色\n\n![android-material-design-color-schema](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-color-schema.png)\n\n你可以通过Material Design颜色模型，去选择适合你应用的一套颜色\n\n\n## 3. 创建 Material Design 主题\n\n\n**1.** 在Android Studio中，通过**File ⇒ New Project`**并且填写其他需要的选项，来创建一个新的工程，当被提示选择默认的Activity时，选择**Blank Activity**即可\n\n**2.** 打开**res ⇒ values ⇒ strings.xml**并且添加以下文字：\n\n`strings.xml`\n``` xml\n<resources>\n    <string name=\"app_name\">Material Design</string>\n    <string name=\"action_settings\">Settings</string>\n    <string name=\"action_search\">Search</string>\n    <string name=\"drawer_open\">Open</string>\n    <string name=\"drawer_close\">Close</string>\n \n    <string name=\"nav_item_home\">Home</string>\n    <string name=\"nav_item_friends\">Friends</string>\n    <string name=\"nav_item_notifications\">Messages</string>\n \n    <!-- navigation drawer item labels  -->\n    <string-array name=\"nav_drawer_labels\">\n        <item>@string/nav_item_home</item>\n        <item>@string/nav_item_friends</item>\n        <item>@string/nav_item_notifications</item>\n    </string-array>\n \n    <string name=\"title_messages\">Messages</string>\n    <string name=\"title_friends\">Friends</string>\n    <string name=\"title_home\">Home</string>\n</resources>\n```\n\n**3.** 打开**res ⇒ values ⇒ colors.xml**并且添加以下颜色值，如果你没有找到`colors.xml`，就新建一个文件即可\n\n`colors.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimary\">#F50057</color>\n    <color name=\"colorPrimaryDark\">#C51162</color>\n    <color name=\"textColorPrimary\">#FFFFFF</color>\n    <color name=\"windowBackground\">#FFFFFF</color>\n    <color name=\"navigationBarColor\">#000000</color>\n    <color name=\"colorAccent\">#FF80AB</color>\n</resources>\n```\n\n**4.** 打开**res ⇒ values ⇒ dimens.xml**并添加以下尺寸值\n\n`dimens.xml`\n``` xml\n<resources>\n    <!-- Default screen margins, per the Android Design guidelines. -->\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n    <dimen name=\"nav_drawer_width\">260dp</dimen>\n</resources>\n```\n\n**5.** 打开**res ⇒ values ⇒ styles.xml**并添加以下样式。这些样式适用于所有的安卓版本，这里我定义主题的名字为：**MyMaterialTheme**\n\n`styles.xml`\n``` xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n \n    </style>\n \n    <style name=\"MyMaterialTheme.Base\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <item name=\"windowNoTitle\">true</item>\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n     \n</resources>\n```\n\n**6.** 在**res**下新建一个文件夹：**values-v21**，在这下面新建另外一个**styles.xml**天下一下样式，这些延时只适用于**Android Lollipop**版本\n\n`styles.xml`\n```xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n        <item name=\"android:windowContentTransitions\">true</item>\n        <item name=\"android:windowAllowEnterTransitionOverlap\">true</item>\n        <item name=\"android:windowAllowReturnTransitionOverlap\">true</item>\n        <item name=\"android:windowSharedElementEnterTransition\">@android:transition/move</item>\n        <item name=\"android:windowSharedElementExitTransition\">@android:transition/move</item>\n    </style>\n \n</resources>\n```\n\n**7.** 现在我们已经准备好了基本的Material Design样式，为了应用这个主题，打开**AndroidManifest.xml**并通过<application>标签下的**android:theme attribute of**属性为应用设置该主题\n\n`android:theme=\"@style/MyMaterialTheme\"`\n\n在设置了该主题之后，你的**AndroidManifest.xml**应该是下面的样子：\n\n`AndroidManifest.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"info.androidhive.materialdesign\" >\n \n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/MyMaterialTheme\" >\n        <activity\n            android:name=\".activity.MainActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n \n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n \n</manifest>\n```\n\n现在运行你的应用，你可以看到通知栏的颜色已经是我们设置的样式的颜色了。\n\n![android-material-design-notification-bar](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-notification-bar.png)\n\n\n**3.1** 添加Toolbar(Action Bar)\n\n添加toolbar是非常容易的，你需要做的就是，为toolbar创建一个单独的layout，在其他layout中需要显示的地方使用。\n\n**8.** 新建一个xml文件**res ⇒ layout ⇒ toolbar.xml**并添加`android.support.v7.widget.Toolbar`控件，这个toolbar具有特定的宽度和主题\n\n`toolbar.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.Toolbar xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:local=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/toolbar\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:minHeight=\"?attr/actionBarSize\"\n    android:background=\"?attr/colorPrimary\"\n    local:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n    local:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n```\n\n**9.** 打开主Activity的布局文件(activity_main.xml)，并通过`<include/>`来添加对toolbar的使用\n\n`activity_main.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n \n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentTop=\"true\"\n        android:orientation=\"vertical\">\n \n        <include\n            android:id=\"@+id/toolbar\"\n            layout=\"@layout/toolbar\" />\n    </LinearLayout>\n \n \n</RelativeLayout>\n```\n\n运行这个应用，并且看看toolbar是不是显示在屏幕上\n\n![android-material-design-toolbar](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar1.png)\n\n现在让我们试着给toolbar添加标题和交互\n\n**10.** 下载这个[搜索图标][2]，在Android Studio中通过Image Asset来引用它\n\n**11.** 右键**res ⇒ New ⇒ Image Asset**，会显示一个弹窗来引入资源，找到你下载的搜索图标，Asset Type选择**Action Bar and Tab Icons**，并命名为**ic_search_action**\n\n![android-studio-importing-image-asset](http://www.androidhive.info/wp-content/uploads/2015/04/android-studio-importing-image-asset.png)\n\n**12.** 图标导入完成之后，打开**res ⇒ menu ⇒ menu_main.xml**并且添加下面的搜索菜单：\n\n`menu_main.xml`\n``` xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:context=\".MainActivity\">\n \n    <item\n        android:id=\"@+id/action_search\"\n        android:title=\"@string/action_search\"\n        android:orderInCategory=\"100\"\n        android:icon=\"@drawable/ic_action_search\"\n        app:showAsAction=\"ifRoom\" />\n \n    <item\n        android:id=\"@+id/action_settings\"\n        android:title=\"@string/action_settings\"\n        android:orderInCategory=\"100\"\n        app:showAsAction=\"never\" />\n</menu>\n```\n\n**13.** 现在打开**MainActivity.java**并且做如下修改：\n\n- 1.继承的activity是**AppCompatActivity**\n\n- 2.调用`setSupportActionBar()`并传递toolbar对象，以设置toolbar为可用状态\n\n- 3. 复写**onCreateOptionsMenu()**和**onOptionsItemSelected()**方法来设置toolbar的交互行为\n\n`MainActivity.java`\n\n``` java\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.Menu;\nimport android.view.MenuItem;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar mToolbar;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n    }\n \n \n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n \n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n \n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n \n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n在做了以上修改之后，如果你运行应用，你应该能够在toolbar中看到搜索图标和更多菜单选项了\n\n![android-material-design-toolbar-action-items](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar-action-items.png)\n\n**3.2** 添加导航抽屉\n\n添加导航抽屉，同样是按照之前lollipop的方式，但是如果菜单项使用列表视图，在Material design中要使用**RecyclerView**。因此让我们看看怎样实现**RecyclerView**导航抽屉。\n\n**14.** 在你项目的java文件夹中，新建三个包：_activity_、_adapter_、_model_，并且把_MainActivity.java_移动到_activity_包下，这样来保证项目的条理性\n\n**15.** 打开model下的**build.gradle**，添加下面的依赖，然后执行**Build ⇒ Rebuild Project**来下载必须的库\n\n`build.gradle`\n``` xml\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.2.0'\n    compile 'com.android.support:recyclerview-v7:22.2.+'\n}\n```\n\n**16.** 在_model_包下，新建一个class文件，命名为**NavDrawerItem.java**，添加以下代码，这个class是一个实体类，它定义了导航抽屉里每一行的菜单项\n\n`NavDrawerItem.java`\n\n``` java\npackage info.androidhive.materialdesign.model;\n \n/**\n * Created by Ravi on 29/07/15.\n */\npublic class NavDrawerItem {\n    private boolean showNotify;\n    private String title;\n \n \n    public NavDrawerItem() {\n \n    }\n \n    public NavDrawerItem(boolean showNotify, String title) {\n        this.showNotify = showNotify;\n        this.title = title;\n    }\n \n    public boolean isShowNotify() {\n        return showNotify;\n    }\n \n    public void setShowNotify(boolean showNotify) {\n        this.showNotify = showNotify;\n    }\n \n    public String getTitle() {\n        return title;\n    }\n \n    public void setTitle(String title) {\n        this.title = title;\n    }\n}\n```\n\n**17.** 在**res ⇒ layout**之下，新建一个布局文件，叫做**nav_draw_row.xml**添加以下代码。这个layout渲染的导航抽屉每一行的视图，如果你想要自定义导航抽屉菜单项，你应该修改这个文件，现在只有一个TextView\n\n`nav_drawer_row.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:clickable=\"true\">\n \n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingLeft=\"30dp\"\n        android:paddingTop=\"10dp\"\n        android:paddingBottom=\"10dp\"\n        android:textSize=\"15dp\"\n        android:textStyle=\"bold\" />\n \n</RelativeLayout>\n```\n\n**18.** 下载这个[个人信息][3]的图标，并把它粘贴到_drawable_ 文件夹下，这一步是可选的，但是这个图标在导航抽屉的header中有使用到\n\n**19.** 新建一个layout命名**fragment_navigation_drawer.xml**，并且添加以下代码。这个layout呈现了整个导航抽屉的视图，它包含了头部部分，用于展示用户信息、RecyclerView来展示列表视图\n\n`fragment_navigation_drawer.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/white\">\n \n \n    <RelativeLayout\n        android:id=\"@+id/nav_header_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"140dp\"\n        android:layout_alignParentTop=\"true\"\n        android:background=\"@color/colorPrimary\">\n \n        <ImageView\n            android:layout_width=\"70dp\"\n            android:layout_height=\"70dp\"\n            android:src=\"@drawable/ic_profile\"\n            android:scaleType=\"fitCenter\"\n            android:layout_centerInParent=\"true\" />\n \n    </RelativeLayout>\n \n \n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/drawerList\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/nav_header_container\"\n        android:layout_marginTop=\"15dp\" />\n \n \n</RelativeLayout>\n```\n\n**20.** 因为**RecyclerView**是自定义的，我们需要一个adapter类去渲染自定义xml布局，因此，在adapter包下，创建一个适配器类**NavigationDrawerAdapter.java**，然后粘贴下面的代码。这个适配器类适配nav_drawer_row.xml布局并呈现RecycleView抽屉菜单\n\n``` java\nimport android.content.Context;\nimport android.support.v7.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n \nimport java.util.Collections;\nimport java.util.List;\n \n/**\n * Created by Ravi Tamada on 12-03-2015.\n */\npublic class NavigationDrawerAdapter extends RecyclerView.Adapter<NavigationDrawerAdapter.MyViewHolder> {\n    List<NavDrawerItem> data = Collections.emptyList();\n    private LayoutInflater inflater;\n    private Context context;\n \n    public NavigationDrawerAdapter(Context context, List<NavDrawerItem> data) {\n        this.context = context;\n        inflater = LayoutInflater.from(context);\n        this.data = data;\n    }\n \n    public void delete(int position) {\n        data.remove(position);\n        notifyItemRemoved(position);\n    }\n \n    @Override\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view = inflater.inflate(R.layout.nav_drawer_row, parent, false);\n        MyViewHolder holder = new MyViewHolder(view);\n        return holder;\n    }\n \n    @Override\n    public void onBindViewHolder(MyViewHolder holder, int position) {\n        NavDrawerItem current = data.get(position);\n        holder.title.setText(current.getTitle());\n    }\n \n    @Override\n    public int getItemCount() {\n        return data.size();\n    }\n \n    class MyViewHolder extends RecyclerView.ViewHolder {\n        TextView title;\n \n        public MyViewHolder(View itemView) {\n            super(itemView);\n            title = (TextView) itemView.findViewById(R.id.title);\n        }\n    }\n}\n```\n\n**21.** 在activity包下，新建一个fragment叫做**FragmentDrawer.java**。在Android Studio中，新建fragment：_右键activity ⇒ New ⇒ Fragment ⇒ Fragment (Blank)_，并且给出你的fragment的名称\n\n`FragmentDrawer.java`\n``` java\n/**\n * Created by Ravi on 29/07/15.\n */\n \nimport android.content.Context;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.Toolbar;\nimport android.view.GestureDetector;\nimport android.view.LayoutInflater;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nimport info.androidhive.materialdesign.R;\nimport info.androidhive.materialdesign.adapter.NavigationDrawerAdapter;\nimport info.androidhive.materialdesign.model.NavDrawerItem;\n \npublic class FragmentDrawer extends Fragment {\n \n    private static String TAG = FragmentDrawer.class.getSimpleName();\n \n    private RecyclerView recyclerView;\n    private ActionBarDrawerToggle mDrawerToggle;\n    private DrawerLayout mDrawerLayout;\n    private NavigationDrawerAdapter adapter;\n    private View containerView;\n    private static String[] titles = null;\n    private FragmentDrawerListener drawerListener;\n \n    public FragmentDrawer() {\n \n    }\n \n    public void setDrawerListener(FragmentDrawerListener listener) {\n        this.drawerListener = listener;\n    }\n \n    public static List<NavDrawerItem> getData() {\n        List<NavDrawerItem> data = new ArrayList<>();\n \n \n        // preparing navigation drawer items\n        for (int i = 0; i < titles.length; i++) {\n            NavDrawerItem navItem = new NavDrawerItem();\n            navItem.setTitle(titles[i]);\n            data.add(navItem);\n        }\n        return data;\n    }\n \n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n \n        // drawer labels\n        titles = getActivity().getResources().getStringArray(R.array.nav_drawer_labels);\n    }\n \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflating view layout\n        View layout = inflater.inflate(R.layout.fragment_navigation_drawer, container, false);\n        recyclerView = (RecyclerView) layout.findViewById(R.id.drawerList);\n \n        adapter = new NavigationDrawerAdapter(getActivity(), getData());\n        recyclerView.setAdapter(adapter);\n        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n        recyclerView.addOnItemTouchListener(new RecyclerTouchListener(getActivity(), recyclerView, new ClickListener() {\n            @Override\n            public void onClick(View view, int position) {\n                drawerListener.onDrawerItemSelected(view, position);\n                mDrawerLayout.closeDrawer(containerView);\n            }\n \n            @Override\n            public void onLongClick(View view, int position) {\n \n            }\n        }));\n \n        return layout;\n    }\n \n \n    public void setUp(int fragmentId, DrawerLayout drawerLayout, final Toolbar toolbar) {\n        containerView = getActivity().findViewById(fragmentId);\n        mDrawerLayout = drawerLayout;\n        mDrawerToggle = new ActionBarDrawerToggle(getActivity(), drawerLayout, toolbar, R.string.drawer_open, R.string.drawer_close) {\n            @Override\n            public void onDrawerOpened(View drawerView) {\n                super.onDrawerOpened(drawerView);\n                getActivity().invalidateOptionsMenu();\n            }\n \n            @Override\n            public void onDrawerClosed(View drawerView) {\n                super.onDrawerClosed(drawerView);\n                getActivity().invalidateOptionsMenu();\n            }\n \n            @Override\n            public void onDrawerSlide(View drawerView, float slideOffset) {\n                super.onDrawerSlide(drawerView, slideOffset);\n                toolbar.setAlpha(1 - slideOffset / 2);\n            }\n        };\n \n        mDrawerLayout.setDrawerListener(mDrawerToggle);\n        mDrawerLayout.post(new Runnable() {\n            @Override\n            public void run() {\n                mDrawerToggle.syncState();\n            }\n        });\n \n    }\n \n    public static interface ClickListener {\n        public void onClick(View view, int position);\n \n        public void onLongClick(View view, int position);\n    }\n \n    static class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {\n \n        private GestureDetector gestureDetector;\n        private ClickListener clickListener;\n \n        public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener) {\n            this.clickListener = clickListener;\n            gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {\n                @Override\n                public boolean onSingleTapUp(MotionEvent e) {\n                    return true;\n                }\n \n                @Override\n                public void onLongPress(MotionEvent e) {\n                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());\n                    if (child != null && clickListener != null) {\n                        clickListener.onLongClick(child, recyclerView.getChildPosition(child));\n                    }\n                }\n            });\n        }\n \n        @Override\n        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {\n \n            View child = rv.findChildViewUnder(e.getX(), e.getY());\n            if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {\n                clickListener.onClick(child, rv.getChildPosition(child));\n            }\n            return false;\n        }\n \n        @Override\n        public void onTouchEvent(RecyclerView rv, MotionEvent e) {\n        }\n \n        @Override\n        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {\n \n        }\n \n \n    }\n \n    public interface FragmentDrawerListener {\n        public void onDrawerItemSelected(View view, int position);\n    }\n}\n```\n\n**22.** 最后，打开首页activity的布局文件**activity_main.xml**，按照下面这样修改。在这个布局中，我们添加了**android.support.v4.widget.DrawerLayout**，来显示导航抽屉菜单\n\n你也必须写出你的fragment下**FragmentDrawer**的正确路径\n\n`actiivty_main.xml`\n``` java\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n \n \n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n \n        <LinearLayout\n            android:id=\"@+id/container_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\">\n \n            <include\n                android:id=\"@+id/toolbar\"\n                layout=\"@layout/toolbar\" />\n        </LinearLayout>\n \n        <FrameLayout\n            android:id=\"@+id/container_body\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\" />\n \n \n    </LinearLayout>\n \n \n    <fragment\n        android:id=\"@+id/fragment_navigation_drawer\"\n        android:name=\"info.androidhive.materialdesign.activity.FragmentDrawer\"\n        android:layout_width=\"@dimen/nav_drawer_width\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:layout=\"@layout/fragment_navigation_drawer\"\n        tools:layout=\"@layout/fragment_navigation_drawer\" />\n \n</android.support.v4.widget.DrawerLayout>\n```\n\n现在，我们已经准备好所有的layout和class，让我们在**MainActivity**中做一些必要的修改，使得导航抽屉可以正常运行\n\n**23.** 打开**MainActivity.java**并且做如下修改\n\n- activity需要实现FragmentDrawer.FragmentDrawerListener**并且复写**onDrawerItemSelected()**方法\n\n- 创建一个**FragmentDrawer的实例，并设置这个菜单选择的监听器\n\n`MainActivity.java`\n``` java\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.support.v7.widget.Toolbar;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\n \npublic class MainActivity extends AppCompatActivity implements FragmentDrawer.FragmentDrawerListener {\n \n    private Toolbar mToolbar;\n    private FragmentDrawer drawerFragment;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n \n        drawerFragment = (FragmentDrawer)\n                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);\n        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);\n        drawerFragment.setDrawerListener(this);\n    }\n \n \n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n \n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n \n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n \n        return super.onOptionsItemSelected(item);\n    }\n \n    @Override\n    public void onDrawerItemSelected(View view, int position) {\n \n    }\n}\n```\n\n现在，如果你运行这个应用，你能够看到这个导航抽屉，包含一个header和列表\n\n![androd-material-design-navigation-drawer](http://www.androidhive.info/wp-content/uploads/2015/04/androd-material-design-navigation-drawer.png)\n\nandrod-material-design-navigation-drawer\n\n**3.3** 实现导航抽屉的选择事件\n尽管导航抽屉成功运行了，但是你看到菜单的点击事件没有正常运行，这是因为我们也需要实现RecyclerView的click监听事件\n\n因为我们有三个菜单项（Home, Friends & Messages）在导航抽屉中，因此我们需要创建三个独立的fragment类为每一个菜单\n\n**24.** 在res下面，新建一个xml文件叫做**fragment_home.xml**并添加以下代码\n\n`fragment_home.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"info.androidhive.materialdesign.activity.HomeFragment\">\n \n \n    <TextView\n        android:id=\"@+id/label\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_marginTop=\"100dp\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center_horizontal\"\n        android:textSize=\"45dp\"\n        android:text=\"HOME\"\n        android:textStyle=\"bold\"/>\n \n    <TextView\n        android:layout_below=\"@id/label\"\n        android:layout_centerInParent=\"true\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"12dp\"\n        android:layout_marginTop=\"10dp\"\n        android:gravity=\"center_horizontal\"\n        android:text=\"Edit fragment_home.xml to change the appearance\" />\n \n</RelativeLayout>\n```\n\n**25.** 在activity包下，新建一个fragment类，叫做**HomeFragment.java**并且添加以下代码\n\n`HomeFragment.java`\n``` java\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n \n \npublic class HomeFragment extends Fragment {\n \n    public HomeFragment() {\n        // Required empty public constructor\n    }\n \n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n \n    }\n \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View rootView = inflater.inflate(R.layout.fragment_home, container, false);\n \n \n        // Inflate the layout for this fragment\n        return rootView;\n    }\n \n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n    }\n \n    @Override\n    public void onDetach() {\n        super.onDetach();\n    }\n}\n```\n\n**26.** 新建两个fragment类分别叫做：**FriendsFragment.java**、**MessagesFragment.java**，同样新建两个xml：**fragment_friends.xml**、**fragment_messages.xml**，按照上面步骤添加代码\n\n**27.** 现在打开**MainActivity.java**，做以下修改\n\n- _displayView()_方法显示fragment，这个方法在**onDrawerItemSelected()**中被调用，当菜单被选择的时候，来渲染对应的布局\n\n`MainActivity.java`\n``` java\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentTransaction;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Toast;\n \npublic class MainActivity extends ActionBarActivity implements FragmentDrawer.FragmentDrawerListener {\n \n    private static String TAG = MainActivity.class.getSimpleName();\n \n    private Toolbar mToolbar;\n    private FragmentDrawer drawerFragment;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n \n        drawerFragment = (FragmentDrawer)\n                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);\n        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);\n        drawerFragment.setDrawerListener(this);\n \n        // display the first navigation drawer view on app launch\n        displayView(0);\n    }\n \n \n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n \n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n \n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n \n        if(id == R.id.action_search){\n            Toast.makeText(getApplicationContext(), \"Search action is selected!\", Toast.LENGTH_SHORT).show();\n            return true;\n        }\n \n        return super.onOptionsItemSelected(item);\n    }\n \n    @Override\n    public void onDrawerItemSelected(View view, int position) {\n            displayView(position);\n    }\n \n    private void displayView(int position) {\n        Fragment fragment = null;\n        String title = getString(R.string.app_name);\n        switch (position) {\n            case 0:\n                fragment = new HomeFragment();\n                title = getString(R.string.title_home);\n                break;\n            case 1:\n                fragment = new FriendsFragment();\n                title = getString(R.string.title_friends);\n                break;\n            case 2:\n                fragment = new MessagesFragment();\n                title = getString(R.string.title_messages);\n                break;\n            default:\n                break;\n        }\n \n        if (fragment != null) {\n            FragmentManager fragmentManager = getSupportFragmentManager();\n            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n            fragmentTransaction.replace(R.id.container_body, fragment);\n            fragmentTransaction.commit();\n \n            // set the toolbar title\n            getSupportActionBar().setTitle(title);\n        }\n    }\n}\n```\n\n现在再来运行你的应用，你能够看到导航抽屉菜单的选择事件可以正常实现，并且对应的布局显示在toolbar下面\n\n\n![android-material-design-navigation-drawer-1](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-1.png)\n\n![android-material-design-navigation-drawer-2](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-2.png)\n\n![android-material-design-navigation-drawer-3](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-3.png)\n\n\n\n[1]: http://developer.android.com/intl/zh-tw/tools/studio/index.html\n[2]: http://api.androidhive.info/images/ic_action_search.png\n[3]: http://api.androidhive.info/images/ic_profile.png\n","source":"_posts/Android-Material-Design入门.md","raw":"title: Android Material Design入门\ndate: 2015-12-31 09:41:32\ncategories: [Android]\ntags: [Material Design]\n---\n\n>原作者：Ravi Tamada\n>原文地址：[http://www.androidhive.info/...with-material-design/](http://www.androidhive.info/2015/04/android-getting-started-with-material-design/)\n\n你可能听说了在Android Lollipop（棒棒糖）版本中有关Material Design的介绍。在Material Design中，介绍了许多新的东西，像Material主题、新的widget、自定义阴影、矢量图片和自定义动画。如果你还没有使用过Material Design，那么这篇文章会给你一个好的开始。\n\n在这个教程中，我们将学习Material Design开发基础的步骤，比如编写自定义主题、使用RecyclerView实现导航抽屉。\n\n通过下面的链接获取更多的关于Material Design的知识：\n\n>[Material Design Specifications](http://www.google.com/design/spec/material-design/introduction.html#)\n>[Creating Apps with Material Design](http://developer.android.com/intl/zh-tw/training/material/index.html)\n\n本文资源链接：\n\n>源码下载：[点击获取](http://download.androidhive.info/download?code=WPSkdrdZprHT0KLCZS3ClafgXBikGqM4r7FnNYdsdUTmlAkK6%2F2mkT0heOlNOq4U82rzqbod%2F14yU2uk5TWY4Zp%2FAYx6oiD7SKI%2FEgtUapzQUqkqcWEXX1bmw%3D%3DvqARiMEKqkqsXGbVf3vVUoffTqQcD2qfqZo)\n>视频演示地址：[Yutube](https://youtu.be/jDXX_wDvarM)\n<!-- more -->\n\n\n## 1. 下载Android Studio\n\n在进一步了解之前,下载Android Studio并且进行必须的设置，因为之后我将使用Android Studio做教程讲解。如果你是第一次尝试Android Studio，通过[概述文档][1]了一下Android Studio。\n\n\n\n\n\n## 2. Material Design颜色自定义\n\nMaterial Design提供了一些其颜色主题的自定义属性，但是我们使用主要的五种，来自定义整个主题：\n\n- `colorPrimaryDark` – 应用于通知栏的背景色\n\n- `colorPrimary` – 这是应用最主要的颜色，应用于toolbar的背景色\n\n- `textColorPrimary` – 这是文字的颜色，应用于toolbar的标题\n\n- `windowBackground` – 这是应用默认的背景色\n\n- `navigationBarColor` – 这个颜色定义了底部导航按钮的背景色\n\n![android-material-design-color-schema](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-color-schema.png)\n\n你可以通过Material Design颜色模型，去选择适合你应用的一套颜色\n\n\n## 3. 创建 Material Design 主题\n\n\n**1.** 在Android Studio中，通过**File ⇒ New Project`**并且填写其他需要的选项，来创建一个新的工程，当被提示选择默认的Activity时，选择**Blank Activity**即可\n\n**2.** 打开**res ⇒ values ⇒ strings.xml**并且添加以下文字：\n\n`strings.xml`\n``` xml\n<resources>\n    <string name=\"app_name\">Material Design</string>\n    <string name=\"action_settings\">Settings</string>\n    <string name=\"action_search\">Search</string>\n    <string name=\"drawer_open\">Open</string>\n    <string name=\"drawer_close\">Close</string>\n \n    <string name=\"nav_item_home\">Home</string>\n    <string name=\"nav_item_friends\">Friends</string>\n    <string name=\"nav_item_notifications\">Messages</string>\n \n    <!-- navigation drawer item labels  -->\n    <string-array name=\"nav_drawer_labels\">\n        <item>@string/nav_item_home</item>\n        <item>@string/nav_item_friends</item>\n        <item>@string/nav_item_notifications</item>\n    </string-array>\n \n    <string name=\"title_messages\">Messages</string>\n    <string name=\"title_friends\">Friends</string>\n    <string name=\"title_home\">Home</string>\n</resources>\n```\n\n**3.** 打开**res ⇒ values ⇒ colors.xml**并且添加以下颜色值，如果你没有找到`colors.xml`，就新建一个文件即可\n\n`colors.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimary\">#F50057</color>\n    <color name=\"colorPrimaryDark\">#C51162</color>\n    <color name=\"textColorPrimary\">#FFFFFF</color>\n    <color name=\"windowBackground\">#FFFFFF</color>\n    <color name=\"navigationBarColor\">#000000</color>\n    <color name=\"colorAccent\">#FF80AB</color>\n</resources>\n```\n\n**4.** 打开**res ⇒ values ⇒ dimens.xml**并添加以下尺寸值\n\n`dimens.xml`\n``` xml\n<resources>\n    <!-- Default screen margins, per the Android Design guidelines. -->\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\n    <dimen name=\"nav_drawer_width\">260dp</dimen>\n</resources>\n```\n\n**5.** 打开**res ⇒ values ⇒ styles.xml**并添加以下样式。这些样式适用于所有的安卓版本，这里我定义主题的名字为：**MyMaterialTheme**\n\n`styles.xml`\n``` xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n \n    </style>\n \n    <style name=\"MyMaterialTheme.Base\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <item name=\"windowNoTitle\">true</item>\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n     \n</resources>\n```\n\n**6.** 在**res**下新建一个文件夹：**values-v21**，在这下面新建另外一个**styles.xml**天下一下样式，这些延时只适用于**Android Lollipop**版本\n\n`styles.xml`\n```xml\n<resources>\n \n    <style name=\"MyMaterialTheme\" parent=\"MyMaterialTheme.Base\">\n        <item name=\"android:windowContentTransitions\">true</item>\n        <item name=\"android:windowAllowEnterTransitionOverlap\">true</item>\n        <item name=\"android:windowAllowReturnTransitionOverlap\">true</item>\n        <item name=\"android:windowSharedElementEnterTransition\">@android:transition/move</item>\n        <item name=\"android:windowSharedElementExitTransition\">@android:transition/move</item>\n    </style>\n \n</resources>\n```\n\n**7.** 现在我们已经准备好了基本的Material Design样式，为了应用这个主题，打开**AndroidManifest.xml**并通过<application>标签下的**android:theme attribute of**属性为应用设置该主题\n\n`android:theme=\"@style/MyMaterialTheme\"`\n\n在设置了该主题之后，你的**AndroidManifest.xml**应该是下面的样子：\n\n`AndroidManifest.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"info.androidhive.materialdesign\" >\n \n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/MyMaterialTheme\" >\n        <activity\n            android:name=\".activity.MainActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n \n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n \n</manifest>\n```\n\n现在运行你的应用，你可以看到通知栏的颜色已经是我们设置的样式的颜色了。\n\n![android-material-design-notification-bar](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-notification-bar.png)\n\n\n**3.1** 添加Toolbar(Action Bar)\n\n添加toolbar是非常容易的，你需要做的就是，为toolbar创建一个单独的layout，在其他layout中需要显示的地方使用。\n\n**8.** 新建一个xml文件**res ⇒ layout ⇒ toolbar.xml**并添加`android.support.v7.widget.Toolbar`控件，这个toolbar具有特定的宽度和主题\n\n`toolbar.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.Toolbar xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:local=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/toolbar\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:minHeight=\"?attr/actionBarSize\"\n    android:background=\"?attr/colorPrimary\"\n    local:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n    local:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n```\n\n**9.** 打开主Activity的布局文件(activity_main.xml)，并通过`<include/>`来添加对toolbar的使用\n\n`activity_main.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n \n    <LinearLayout\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentTop=\"true\"\n        android:orientation=\"vertical\">\n \n        <include\n            android:id=\"@+id/toolbar\"\n            layout=\"@layout/toolbar\" />\n    </LinearLayout>\n \n \n</RelativeLayout>\n```\n\n运行这个应用，并且看看toolbar是不是显示在屏幕上\n\n![android-material-design-toolbar](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar1.png)\n\n现在让我们试着给toolbar添加标题和交互\n\n**10.** 下载这个[搜索图标][2]，在Android Studio中通过Image Asset来引用它\n\n**11.** 右键**res ⇒ New ⇒ Image Asset**，会显示一个弹窗来引入资源，找到你下载的搜索图标，Asset Type选择**Action Bar and Tab Icons**，并命名为**ic_search_action**\n\n![android-studio-importing-image-asset](http://www.androidhive.info/wp-content/uploads/2015/04/android-studio-importing-image-asset.png)\n\n**12.** 图标导入完成之后，打开**res ⇒ menu ⇒ menu_main.xml**并且添加下面的搜索菜单：\n\n`menu_main.xml`\n``` xml\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:context=\".MainActivity\">\n \n    <item\n        android:id=\"@+id/action_search\"\n        android:title=\"@string/action_search\"\n        android:orderInCategory=\"100\"\n        android:icon=\"@drawable/ic_action_search\"\n        app:showAsAction=\"ifRoom\" />\n \n    <item\n        android:id=\"@+id/action_settings\"\n        android:title=\"@string/action_settings\"\n        android:orderInCategory=\"100\"\n        app:showAsAction=\"never\" />\n</menu>\n```\n\n**13.** 现在打开**MainActivity.java**并且做如下修改：\n\n- 1.继承的activity是**AppCompatActivity**\n\n- 2.调用`setSupportActionBar()`并传递toolbar对象，以设置toolbar为可用状态\n\n- 3. 复写**onCreateOptionsMenu()**和**onOptionsItemSelected()**方法来设置toolbar的交互行为\n\n`MainActivity.java`\n\n``` java\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.Menu;\nimport android.view.MenuItem;\n \npublic class MainActivity extends AppCompatActivity {\n \n    private Toolbar mToolbar;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n    }\n \n \n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n \n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n \n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n \n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n在做了以上修改之后，如果你运行应用，你应该能够在toolbar中看到搜索图标和更多菜单选项了\n\n![android-material-design-toolbar-action-items](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar-action-items.png)\n\n**3.2** 添加导航抽屉\n\n添加导航抽屉，同样是按照之前lollipop的方式，但是如果菜单项使用列表视图，在Material design中要使用**RecyclerView**。因此让我们看看怎样实现**RecyclerView**导航抽屉。\n\n**14.** 在你项目的java文件夹中，新建三个包：_activity_、_adapter_、_model_，并且把_MainActivity.java_移动到_activity_包下，这样来保证项目的条理性\n\n**15.** 打开model下的**build.gradle**，添加下面的依赖，然后执行**Build ⇒ Rebuild Project**来下载必须的库\n\n`build.gradle`\n``` xml\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.2.0'\n    compile 'com.android.support:recyclerview-v7:22.2.+'\n}\n```\n\n**16.** 在_model_包下，新建一个class文件，命名为**NavDrawerItem.java**，添加以下代码，这个class是一个实体类，它定义了导航抽屉里每一行的菜单项\n\n`NavDrawerItem.java`\n\n``` java\npackage info.androidhive.materialdesign.model;\n \n/**\n * Created by Ravi on 29/07/15.\n */\npublic class NavDrawerItem {\n    private boolean showNotify;\n    private String title;\n \n \n    public NavDrawerItem() {\n \n    }\n \n    public NavDrawerItem(boolean showNotify, String title) {\n        this.showNotify = showNotify;\n        this.title = title;\n    }\n \n    public boolean isShowNotify() {\n        return showNotify;\n    }\n \n    public void setShowNotify(boolean showNotify) {\n        this.showNotify = showNotify;\n    }\n \n    public String getTitle() {\n        return title;\n    }\n \n    public void setTitle(String title) {\n        this.title = title;\n    }\n}\n```\n\n**17.** 在**res ⇒ layout**之下，新建一个布局文件，叫做**nav_draw_row.xml**添加以下代码。这个layout渲染的导航抽屉每一行的视图，如果你想要自定义导航抽屉菜单项，你应该修改这个文件，现在只有一个TextView\n\n`nav_drawer_row.xml`\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:clickable=\"true\">\n \n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingLeft=\"30dp\"\n        android:paddingTop=\"10dp\"\n        android:paddingBottom=\"10dp\"\n        android:textSize=\"15dp\"\n        android:textStyle=\"bold\" />\n \n</RelativeLayout>\n```\n\n**18.** 下载这个[个人信息][3]的图标，并把它粘贴到_drawable_ 文件夹下，这一步是可选的，但是这个图标在导航抽屉的header中有使用到\n\n**19.** 新建一个layout命名**fragment_navigation_drawer.xml**，并且添加以下代码。这个layout呈现了整个导航抽屉的视图，它包含了头部部分，用于展示用户信息、RecyclerView来展示列表视图\n\n`fragment_navigation_drawer.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/white\">\n \n \n    <RelativeLayout\n        android:id=\"@+id/nav_header_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"140dp\"\n        android:layout_alignParentTop=\"true\"\n        android:background=\"@color/colorPrimary\">\n \n        <ImageView\n            android:layout_width=\"70dp\"\n            android:layout_height=\"70dp\"\n            android:src=\"@drawable/ic_profile\"\n            android:scaleType=\"fitCenter\"\n            android:layout_centerInParent=\"true\" />\n \n    </RelativeLayout>\n \n \n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/drawerList\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/nav_header_container\"\n        android:layout_marginTop=\"15dp\" />\n \n \n</RelativeLayout>\n```\n\n**20.** 因为**RecyclerView**是自定义的，我们需要一个adapter类去渲染自定义xml布局，因此，在adapter包下，创建一个适配器类**NavigationDrawerAdapter.java**，然后粘贴下面的代码。这个适配器类适配nav_drawer_row.xml布局并呈现RecycleView抽屉菜单\n\n``` java\nimport android.content.Context;\nimport android.support.v7.widget.RecyclerView;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n \nimport java.util.Collections;\nimport java.util.List;\n \n/**\n * Created by Ravi Tamada on 12-03-2015.\n */\npublic class NavigationDrawerAdapter extends RecyclerView.Adapter<NavigationDrawerAdapter.MyViewHolder> {\n    List<NavDrawerItem> data = Collections.emptyList();\n    private LayoutInflater inflater;\n    private Context context;\n \n    public NavigationDrawerAdapter(Context context, List<NavDrawerItem> data) {\n        this.context = context;\n        inflater = LayoutInflater.from(context);\n        this.data = data;\n    }\n \n    public void delete(int position) {\n        data.remove(position);\n        notifyItemRemoved(position);\n    }\n \n    @Override\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view = inflater.inflate(R.layout.nav_drawer_row, parent, false);\n        MyViewHolder holder = new MyViewHolder(view);\n        return holder;\n    }\n \n    @Override\n    public void onBindViewHolder(MyViewHolder holder, int position) {\n        NavDrawerItem current = data.get(position);\n        holder.title.setText(current.getTitle());\n    }\n \n    @Override\n    public int getItemCount() {\n        return data.size();\n    }\n \n    class MyViewHolder extends RecyclerView.ViewHolder {\n        TextView title;\n \n        public MyViewHolder(View itemView) {\n            super(itemView);\n            title = (TextView) itemView.findViewById(R.id.title);\n        }\n    }\n}\n```\n\n**21.** 在activity包下，新建一个fragment叫做**FragmentDrawer.java**。在Android Studio中，新建fragment：_右键activity ⇒ New ⇒ Fragment ⇒ Fragment (Blank)_，并且给出你的fragment的名称\n\n`FragmentDrawer.java`\n``` java\n/**\n * Created by Ravi on 29/07/15.\n */\n \nimport android.content.Context;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarDrawerToggle;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.Toolbar;\nimport android.view.GestureDetector;\nimport android.view.LayoutInflater;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \nimport info.androidhive.materialdesign.R;\nimport info.androidhive.materialdesign.adapter.NavigationDrawerAdapter;\nimport info.androidhive.materialdesign.model.NavDrawerItem;\n \npublic class FragmentDrawer extends Fragment {\n \n    private static String TAG = FragmentDrawer.class.getSimpleName();\n \n    private RecyclerView recyclerView;\n    private ActionBarDrawerToggle mDrawerToggle;\n    private DrawerLayout mDrawerLayout;\n    private NavigationDrawerAdapter adapter;\n    private View containerView;\n    private static String[] titles = null;\n    private FragmentDrawerListener drawerListener;\n \n    public FragmentDrawer() {\n \n    }\n \n    public void setDrawerListener(FragmentDrawerListener listener) {\n        this.drawerListener = listener;\n    }\n \n    public static List<NavDrawerItem> getData() {\n        List<NavDrawerItem> data = new ArrayList<>();\n \n \n        // preparing navigation drawer items\n        for (int i = 0; i < titles.length; i++) {\n            NavDrawerItem navItem = new NavDrawerItem();\n            navItem.setTitle(titles[i]);\n            data.add(navItem);\n        }\n        return data;\n    }\n \n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n \n        // drawer labels\n        titles = getActivity().getResources().getStringArray(R.array.nav_drawer_labels);\n    }\n \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflating view layout\n        View layout = inflater.inflate(R.layout.fragment_navigation_drawer, container, false);\n        recyclerView = (RecyclerView) layout.findViewById(R.id.drawerList);\n \n        adapter = new NavigationDrawerAdapter(getActivity(), getData());\n        recyclerView.setAdapter(adapter);\n        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\n        recyclerView.addOnItemTouchListener(new RecyclerTouchListener(getActivity(), recyclerView, new ClickListener() {\n            @Override\n            public void onClick(View view, int position) {\n                drawerListener.onDrawerItemSelected(view, position);\n                mDrawerLayout.closeDrawer(containerView);\n            }\n \n            @Override\n            public void onLongClick(View view, int position) {\n \n            }\n        }));\n \n        return layout;\n    }\n \n \n    public void setUp(int fragmentId, DrawerLayout drawerLayout, final Toolbar toolbar) {\n        containerView = getActivity().findViewById(fragmentId);\n        mDrawerLayout = drawerLayout;\n        mDrawerToggle = new ActionBarDrawerToggle(getActivity(), drawerLayout, toolbar, R.string.drawer_open, R.string.drawer_close) {\n            @Override\n            public void onDrawerOpened(View drawerView) {\n                super.onDrawerOpened(drawerView);\n                getActivity().invalidateOptionsMenu();\n            }\n \n            @Override\n            public void onDrawerClosed(View drawerView) {\n                super.onDrawerClosed(drawerView);\n                getActivity().invalidateOptionsMenu();\n            }\n \n            @Override\n            public void onDrawerSlide(View drawerView, float slideOffset) {\n                super.onDrawerSlide(drawerView, slideOffset);\n                toolbar.setAlpha(1 - slideOffset / 2);\n            }\n        };\n \n        mDrawerLayout.setDrawerListener(mDrawerToggle);\n        mDrawerLayout.post(new Runnable() {\n            @Override\n            public void run() {\n                mDrawerToggle.syncState();\n            }\n        });\n \n    }\n \n    public static interface ClickListener {\n        public void onClick(View view, int position);\n \n        public void onLongClick(View view, int position);\n    }\n \n    static class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {\n \n        private GestureDetector gestureDetector;\n        private ClickListener clickListener;\n \n        public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener) {\n            this.clickListener = clickListener;\n            gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {\n                @Override\n                public boolean onSingleTapUp(MotionEvent e) {\n                    return true;\n                }\n \n                @Override\n                public void onLongPress(MotionEvent e) {\n                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());\n                    if (child != null && clickListener != null) {\n                        clickListener.onLongClick(child, recyclerView.getChildPosition(child));\n                    }\n                }\n            });\n        }\n \n        @Override\n        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {\n \n            View child = rv.findChildViewUnder(e.getX(), e.getY());\n            if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {\n                clickListener.onClick(child, rv.getChildPosition(child));\n            }\n            return false;\n        }\n \n        @Override\n        public void onTouchEvent(RecyclerView rv, MotionEvent e) {\n        }\n \n        @Override\n        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {\n \n        }\n \n \n    }\n \n    public interface FragmentDrawerListener {\n        public void onDrawerItemSelected(View view, int position);\n    }\n}\n```\n\n**22.** 最后，打开首页activity的布局文件**activity_main.xml**，按照下面这样修改。在这个布局中，我们添加了**android.support.v4.widget.DrawerLayout**，来显示导航抽屉菜单\n\n你也必须写出你的fragment下**FragmentDrawer**的正确路径\n\n`actiivty_main.xml`\n``` java\n<android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n \n \n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n \n        <LinearLayout\n            android:id=\"@+id/container_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\">\n \n            <include\n                android:id=\"@+id/toolbar\"\n                layout=\"@layout/toolbar\" />\n        </LinearLayout>\n \n        <FrameLayout\n            android:id=\"@+id/container_body\"\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\" />\n \n \n    </LinearLayout>\n \n \n    <fragment\n        android:id=\"@+id/fragment_navigation_drawer\"\n        android:name=\"info.androidhive.materialdesign.activity.FragmentDrawer\"\n        android:layout_width=\"@dimen/nav_drawer_width\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"start\"\n        app:layout=\"@layout/fragment_navigation_drawer\"\n        tools:layout=\"@layout/fragment_navigation_drawer\" />\n \n</android.support.v4.widget.DrawerLayout>\n```\n\n现在，我们已经准备好所有的layout和class，让我们在**MainActivity**中做一些必要的修改，使得导航抽屉可以正常运行\n\n**23.** 打开**MainActivity.java**并且做如下修改\n\n- activity需要实现FragmentDrawer.FragmentDrawerListener**并且复写**onDrawerItemSelected()**方法\n\n- 创建一个**FragmentDrawer的实例，并设置这个菜单选择的监听器\n\n`MainActivity.java`\n``` java\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.support.v7.widget.Toolbar;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\n \npublic class MainActivity extends AppCompatActivity implements FragmentDrawer.FragmentDrawerListener {\n \n    private Toolbar mToolbar;\n    private FragmentDrawer drawerFragment;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n \n        drawerFragment = (FragmentDrawer)\n                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);\n        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);\n        drawerFragment.setDrawerListener(this);\n    }\n \n \n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n \n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n \n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n \n        return super.onOptionsItemSelected(item);\n    }\n \n    @Override\n    public void onDrawerItemSelected(View view, int position) {\n \n    }\n}\n```\n\n现在，如果你运行这个应用，你能够看到这个导航抽屉，包含一个header和列表\n\n![androd-material-design-navigation-drawer](http://www.androidhive.info/wp-content/uploads/2015/04/androd-material-design-navigation-drawer.png)\n\nandrod-material-design-navigation-drawer\n\n**3.3** 实现导航抽屉的选择事件\n尽管导航抽屉成功运行了，但是你看到菜单的点击事件没有正常运行，这是因为我们也需要实现RecyclerView的click监听事件\n\n因为我们有三个菜单项（Home, Friends & Messages）在导航抽屉中，因此我们需要创建三个独立的fragment类为每一个菜单\n\n**24.** 在res下面，新建一个xml文件叫做**fragment_home.xml**并添加以下代码\n\n`fragment_home.xml`\n``` xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\"info.androidhive.materialdesign.activity.HomeFragment\">\n \n \n    <TextView\n        android:id=\"@+id/label\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_marginTop=\"100dp\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center_horizontal\"\n        android:textSize=\"45dp\"\n        android:text=\"HOME\"\n        android:textStyle=\"bold\"/>\n \n    <TextView\n        android:layout_below=\"@id/label\"\n        android:layout_centerInParent=\"true\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"12dp\"\n        android:layout_marginTop=\"10dp\"\n        android:gravity=\"center_horizontal\"\n        android:text=\"Edit fragment_home.xml to change the appearance\" />\n \n</RelativeLayout>\n```\n\n**25.** 在activity包下，新建一个fragment类，叫做**HomeFragment.java**并且添加以下代码\n\n`HomeFragment.java`\n``` java\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n \n \npublic class HomeFragment extends Fragment {\n \n    public HomeFragment() {\n        // Required empty public constructor\n    }\n \n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n \n    }\n \n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View rootView = inflater.inflate(R.layout.fragment_home, container, false);\n \n \n        // Inflate the layout for this fragment\n        return rootView;\n    }\n \n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n    }\n \n    @Override\n    public void onDetach() {\n        super.onDetach();\n    }\n}\n```\n\n**26.** 新建两个fragment类分别叫做：**FriendsFragment.java**、**MessagesFragment.java**，同样新建两个xml：**fragment_friends.xml**、**fragment_messages.xml**，按照上面步骤添加代码\n\n**27.** 现在打开**MainActivity.java**，做以下修改\n\n- _displayView()_方法显示fragment，这个方法在**onDrawerItemSelected()**中被调用，当菜单被选择的时候，来渲染对应的布局\n\n`MainActivity.java`\n``` java\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentTransaction;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.ActionBarActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Toast;\n \npublic class MainActivity extends ActionBarActivity implements FragmentDrawer.FragmentDrawerListener {\n \n    private static String TAG = MainActivity.class.getSimpleName();\n \n    private Toolbar mToolbar;\n    private FragmentDrawer drawerFragment;\n \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n \n        mToolbar = (Toolbar) findViewById(R.id.toolbar);\n \n        setSupportActionBar(mToolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n \n        drawerFragment = (FragmentDrawer)\n                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);\n        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);\n        drawerFragment.setDrawerListener(this);\n \n        // display the first navigation drawer view on app launch\n        displayView(0);\n    }\n \n \n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n \n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n \n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n \n        if(id == R.id.action_search){\n            Toast.makeText(getApplicationContext(), \"Search action is selected!\", Toast.LENGTH_SHORT).show();\n            return true;\n        }\n \n        return super.onOptionsItemSelected(item);\n    }\n \n    @Override\n    public void onDrawerItemSelected(View view, int position) {\n            displayView(position);\n    }\n \n    private void displayView(int position) {\n        Fragment fragment = null;\n        String title = getString(R.string.app_name);\n        switch (position) {\n            case 0:\n                fragment = new HomeFragment();\n                title = getString(R.string.title_home);\n                break;\n            case 1:\n                fragment = new FriendsFragment();\n                title = getString(R.string.title_friends);\n                break;\n            case 2:\n                fragment = new MessagesFragment();\n                title = getString(R.string.title_messages);\n                break;\n            default:\n                break;\n        }\n \n        if (fragment != null) {\n            FragmentManager fragmentManager = getSupportFragmentManager();\n            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n            fragmentTransaction.replace(R.id.container_body, fragment);\n            fragmentTransaction.commit();\n \n            // set the toolbar title\n            getSupportActionBar().setTitle(title);\n        }\n    }\n}\n```\n\n现在再来运行你的应用，你能够看到导航抽屉菜单的选择事件可以正常实现，并且对应的布局显示在toolbar下面\n\n\n![android-material-design-navigation-drawer-1](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-1.png)\n\n![android-material-design-navigation-drawer-2](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-2.png)\n\n![android-material-design-navigation-drawer-3](http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-3.png)\n\n\n\n[1]: http://developer.android.com/intl/zh-tw/tools/studio/index.html\n[2]: http://api.androidhive.info/images/ic_action_search.png\n[3]: http://api.androidhive.info/images/ic_profile.png\n","slug":"Android-Material-Design入门","published":1,"updated":"2016-10-10T06:53:44.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b9i000f1giyx95jynyb","content":"<blockquote>\n<p>原作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/04/android-getting-started-with-material-design/\" target=\"_blank\" rel=\"external\">http://www.androidhive.info/…with-material-design/</a></p>\n</blockquote>\n<p>你可能听说了在Android Lollipop（棒棒糖）版本中有关Material Design的介绍。在Material Design中，介绍了许多新的东西，像Material主题、新的widget、自定义阴影、矢量图片和自定义动画。如果你还没有使用过Material Design，那么这篇文章会给你一个好的开始。</p>\n<p>在这个教程中，我们将学习Material Design开发基础的步骤，比如编写自定义主题、使用RecyclerView实现导航抽屉。</p>\n<p>通过下面的链接获取更多的关于Material Design的知识：</p>\n<blockquote>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html#\" target=\"_blank\" rel=\"external\">Material Design Specifications</a><br><a href=\"http://developer.android.com/intl/zh-tw/training/material/index.html\" target=\"_blank\" rel=\"external\">Creating Apps with Material Design</a></p>\n</blockquote>\n<p>本文资源链接：</p>\n<blockquote>\n<p>源码下载：<a href=\"http://download.androidhive.info/download?code=WPSkdrdZprHT0KLCZS3ClafgXBikGqM4r7FnNYdsdUTmlAkK6%2F2mkT0heOlNOq4U82rzqbod%2F14yU2uk5TWY4Zp%2FAYx6oiD7SKI%2FEgtUapzQUqkqcWEXX1bmw%3D%3DvqARiMEKqkqsXGbVf3vVUoffTqQcD2qfqZo\" target=\"_blank\" rel=\"external\">点击获取</a><br>视频演示地址：<a href=\"https://youtu.be/jDXX_wDvarM\" target=\"_blank\" rel=\"external\">Yutube</a><br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"1-下载Android-Studio\"><a href=\"#1-下载Android-Studio\" class=\"headerlink\" title=\"1. 下载Android Studio\"></a>1. 下载Android Studio</h2><p>在进一步了解之前,下载Android Studio并且进行必须的设置，因为之后我将使用Android Studio做教程讲解。如果你是第一次尝试Android Studio，通过<a href=\"http://developer.android.com/intl/zh-tw/tools/studio/index.html\" target=\"_blank\" rel=\"external\">概述文档</a>了一下Android Studio。</p>\n<h2 id=\"2-Material-Design颜色自定义\"><a href=\"#2-Material-Design颜色自定义\" class=\"headerlink\" title=\"2. Material Design颜色自定义\"></a>2. Material Design颜色自定义</h2><p>Material Design提供了一些其颜色主题的自定义属性，但是我们使用主要的五种，来自定义整个主题：</p>\n<ul>\n<li><p><code>colorPrimaryDark</code> – 应用于通知栏的背景色</p>\n</li>\n<li><p><code>colorPrimary</code> – 这是应用最主要的颜色，应用于toolbar的背景色</p>\n</li>\n<li><p><code>textColorPrimary</code> – 这是文字的颜色，应用于toolbar的标题</p>\n</li>\n<li><p><code>windowBackground</code> – 这是应用默认的背景色</p>\n</li>\n<li><p><code>navigationBarColor</code> – 这个颜色定义了底部导航按钮的背景色</p>\n</li>\n</ul>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-color-schema.png\" alt=\"android-material-design-color-schema\"></p>\n<p>你可以通过Material Design颜色模型，去选择适合你应用的一套颜色</p>\n<h2 id=\"3-创建-Material-Design-主题\"><a href=\"#3-创建-Material-Design-主题\" class=\"headerlink\" title=\"3. 创建 Material Design 主题\"></a>3. 创建 Material Design 主题</h2><p><strong>1.</strong> 在Android Studio中，通过<strong>File ⇒ New Project`</strong>并且填写其他需要的选项，来创建一个新的工程，当被提示选择默认的Activity时，选择<strong>Blank Activity</strong>即可</p>\n<p><strong>2.</strong> 打开<strong>res ⇒ values ⇒ strings.xml</strong>并且添加以下文字：</p>\n<p><code>strings.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app_name\"</span>&gt;</span>Material Design<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action_settings\"</span>&gt;</span>Settings<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action_search\"</span>&gt;</span>Search<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"drawer_open\"</span>&gt;</span>Open<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"drawer_close\"</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_item_home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_item_friends\"</span>&gt;</span>Friends<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_item_notifications\"</span>&gt;</span>Messages<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">&lt;!-- navigation drawer item labels  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string-array</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_drawer_labels\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/nav_item_home<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/nav_item_friends<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/nav_item_notifications<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">string-array</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title_messages\"</span>&gt;</span>Messages<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title_friends\"</span>&gt;</span>Friends<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title_home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.</strong> 打开<strong>res ⇒ values ⇒ colors.xml</strong>并且添加以下颜色值，如果你没有找到<code>colors.xml</code>，就新建一个文件即可</p>\n<p><code>colors.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>#F50057<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>#C51162<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"textColorPrimary\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowBackground\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"navigationBarColor\"</span>&gt;</span>#000000<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#FF80AB<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>4.</strong> 打开<strong>res ⇒ values ⇒ dimens.xml</strong>并添加以下尺寸值</p>\n<p><code>dimens.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Default screen margins, per the Android Design guidelines. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_horizontal_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_vertical_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_drawer_width\"</span>&gt;</span>260dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>5.</strong> 打开<strong>res ⇒ values ⇒ styles.xml</strong>并添加以下样式。这些样式适用于所有的安卓版本，这里我定义主题的名字为：<strong>MyMaterialTheme</strong></p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">     </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>6.</strong> 在<strong>res</strong>下新建一个文件夹：<strong>values-v21</strong>，在这下面新建另外一个<strong>styles.xml</strong>天下一下样式，这些延时只适用于<strong>Android Lollipop</strong>版本</p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentTransitions\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowEnterTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowReturnTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementEnterTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementExitTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>7.</strong> 现在我们已经准备好了基本的Material Design样式，为了应用这个主题，打开<strong>AndroidManifest.xml</strong>并通过<application>标签下的<strong>android:theme attribute of</strong>属性为应用设置该主题</application></p>\n<p><code>android:theme=&quot;@style/MyMaterialTheme&quot;</code></p>\n<p>在设置了该主题之后，你的<strong>AndroidManifest.xml</strong>应该是下面的样子：</p>\n<p><code>AndroidManifest.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"info.androidhive.materialdesign\"</span> &gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/MyMaterialTheme\"</span> &gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.MainActivity\"</span></div><div class=\"line\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>现在运行你的应用，你可以看到通知栏的颜色已经是我们设置的样式的颜色了。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-notification-bar.png\" alt=\"android-material-design-notification-bar\"></p>\n<p><strong>3.1</strong> 添加Toolbar(Action Bar)</p>\n<p>添加toolbar是非常容易的，你需要做的就是，为toolbar创建一个单独的layout，在其他layout中需要显示的地方使用。</p>\n<p><strong>8.</strong> 新建一个xml文件<strong>res ⇒ layout ⇒ toolbar.xml</strong>并添加<code>android.support.v7.widget.Toolbar</code>控件，这个toolbar具有特定的宽度和主题</p>\n<p><code>toolbar.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:local</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">    <span class=\"attr\">local:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></div><div class=\"line\">    <span class=\"attr\">local:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>9.</strong> 打开主Activity的布局文件(activity_main.xml)，并通过<code>&lt;include/&gt;</code>来添加对toolbar的使用</p>\n<p><code>activity_main.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/toolbar\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行这个应用，并且看看toolbar是不是显示在屏幕上</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar1.png\" alt=\"android-material-design-toolbar\"></p>\n<p>现在让我们试着给toolbar添加标题和交互</p>\n<p><strong>10.</strong> 下载这个<a href=\"http://api.androidhive.info/images/ic_action_search.png\" target=\"_blank\" rel=\"external\">搜索图标</a>，在Android Studio中通过Image Asset来引用它</p>\n<p><strong>11.</strong> 右键<strong>res ⇒ New ⇒ Image Asset</strong>，会显示一个弹窗来引入资源，找到你下载的搜索图标，Asset Type选择<strong>Action Bar and Tab Icons</strong>，并命名为<strong>ic_search_action</strong></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-studio-importing-image-asset.png\" alt=\"android-studio-importing-image-asset\"></p>\n<p><strong>12.</strong> 图标导入完成之后，打开<strong>res ⇒ menu ⇒ menu_main.xml</strong>并且添加下面的搜索菜单：</p>\n<p><code>menu_main.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/action_search\"</span></div><div class=\"line\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/action_search\"</span></div><div class=\"line\">        <span class=\"attr\">android:orderInCategory</span>=<span class=\"string\">\"100\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_action_search\"</span></div><div class=\"line\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/action_settings\"</span></div><div class=\"line\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/action_settings\"</span></div><div class=\"line\">        <span class=\"attr\">android:orderInCategory</span>=<span class=\"string\">\"100\"</span></div><div class=\"line\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"never\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>13.</strong> 现在打开<strong>MainActivity.java</strong>并且做如下修改：</p>\n<ul>\n<li><p>1.继承的activity是<strong>AppCompatActivity</strong></p>\n</li>\n<li><p>2.调用<code>setSupportActionBar()</code>并传递toolbar对象，以设置toolbar为可用状态</p>\n</li>\n<li><ol>\n<li>复写<strong>onCreateOptionsMenu()</strong>和<strong>onOptionsItemSelected()</strong>方法来设置toolbar的交互行为</li>\n</ol>\n</li>\n</ul>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在做了以上修改之后，如果你运行应用，你应该能够在toolbar中看到搜索图标和更多菜单选项了</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar-action-items.png\" alt=\"android-material-design-toolbar-action-items\"></p>\n<p><strong>3.2</strong> 添加导航抽屉</p>\n<p>添加导航抽屉，同样是按照之前lollipop的方式，但是如果菜单项使用列表视图，在Material design中要使用<strong>RecyclerView</strong>。因此让我们看看怎样实现<strong>RecyclerView</strong>导航抽屉。</p>\n<p><strong>14.</strong> 在你项目的java文件夹中，新建三个包：<em>activity</em>、<em>adapter</em>、<em>model</em>，并且把<em>MainActivity.java</em>移动到<em>activity</em>包下，这样来保证项目的条理性</p>\n<p><strong>15.</strong> 打开model下的<strong>build.gradle</strong>，添加下面的依赖，然后执行<strong>Build ⇒ Rebuild Project</strong>来下载必须的库</p>\n<p><code>build.gradle</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:22.2.0'</div><div class=\"line\">    compile 'com.android.support:recyclerview-v7:22.2.+'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>16.</strong> 在<em>model</em>包下，新建一个class文件，命名为<strong>NavDrawerItem.java</strong>，添加以下代码，这个class是一个实体类，它定义了导航抽屉里每一行的菜单项</p>\n<p><code>NavDrawerItem.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialdesign.model;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by Ravi on 29/07/15.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavDrawerItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> showNotify;</div><div class=\"line\">    <span class=\"keyword\">private</span> String title;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavDrawerItem</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavDrawerItem</span><span class=\"params\">(<span class=\"keyword\">boolean</span> showNotify, String title)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showNotify = showNotify;</div><div class=\"line\">        <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isShowNotify</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> showNotify;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setShowNotify</span><span class=\"params\">(<span class=\"keyword\">boolean</span> showNotify)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showNotify = showNotify;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> title;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>17.</strong> 在<strong>res ⇒ layout</strong>之下，新建一个布局文件，叫做<strong>nav_draw_row.xml</strong>添加以下代码。这个layout渲染的导航抽屉每一行的视图，如果你想要自定义导航抽屉菜单项，你应该修改这个文件，现在只有一个TextView</p>\n<p><code>nav_drawer_row.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"30dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"15dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>18.</strong> 下载这个<a href=\"http://api.androidhive.info/images/ic_profile.png\" target=\"_blank\" rel=\"external\">个人信息</a>的图标，并把它粘贴到<em>drawable</em> 文件夹下，这一步是可选的，但是这个图标在导航抽屉的header中有使用到</p>\n<p><strong>19.</strong> 新建一个layout命名<strong>fragment_navigation_drawer.xml</strong>，并且添加以下代码。这个layout呈现了整个导航抽屉的视图，它包含了头部部分，用于展示用户信息、RecyclerView来展示列表视图</p>\n<p><code>fragment_navigation_drawer.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/white\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_header_container\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"140dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"70dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"70dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_profile\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawerList\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/nav_header_container\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"15dp\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>20.</strong> 因为<strong>RecyclerView</strong>是自定义的，我们需要一个adapter类去渲染自定义xml布局，因此，在adapter包下，创建一个适配器类<strong>NavigationDrawerAdapter.java</strong>，然后粘贴下面的代码。这个适配器类适配nav_drawer_row.xml布局并呈现RecycleView抽屉菜单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.RecyclerView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by Ravi Tamada on 12-03-2015.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavigationDrawerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">NavigationDrawerAdapter</span>.<span class=\"title\">MyViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    List&lt;NavDrawerItem&gt; data = Collections.emptyList();</div><div class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater inflater;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavigationDrawerAdapter</span><span class=\"params\">(Context context, List&lt;NavDrawerItem&gt; data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        inflater = LayoutInflater.from(context);</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        data.remove(position);</div><div class=\"line\">        notifyItemRemoved(position);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MyViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">        View view = inflater.inflate(R.layout.nav_drawer_row, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        MyViewHolder holder = <span class=\"keyword\">new</span> MyViewHolder(view);</div><div class=\"line\">        <span class=\"keyword\">return</span> holder;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(MyViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        NavDrawerItem current = data.get(position);</div><div class=\"line\">        holder.title.setText(current.getTitle());</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data.size();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">        TextView title;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\">            title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>21.</strong> 在activity包下，新建一个fragment叫做<strong>FragmentDrawer.java</strong>。在Android Studio中，新建fragment：<em>右键activity ⇒ New ⇒ Fragment ⇒ Fragment (Blank)</em>，并且给出你的fragment的名称</p>\n<p><code>FragmentDrawer.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by Ravi on 29/07/15.</div><div class=\"line\"> */</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.RecyclerView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.GestureDetector;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialdesign.R;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialdesign.adapter.NavigationDrawerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialdesign.model.NavDrawerItem;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentDrawer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String TAG = FragmentDrawer.class.getSimpleName();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> RecyclerView recyclerView;</div><div class=\"line\">    <span class=\"keyword\">private</span> ActionBarDrawerToggle mDrawerToggle;</div><div class=\"line\">    <span class=\"keyword\">private</span> DrawerLayout mDrawerLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> NavigationDrawerAdapter adapter;</div><div class=\"line\">    <span class=\"keyword\">private</span> View containerView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] titles = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentDrawerListener drawerListener;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FragmentDrawer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDrawerListener</span><span class=\"params\">(FragmentDrawerListener listener)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.drawerListener = listener;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;NavDrawerItem&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        List&lt;NavDrawerItem&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// preparing navigation drawer items</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; titles.length; i++) &#123;</div><div class=\"line\">            NavDrawerItem navItem = <span class=\"keyword\">new</span> NavDrawerItem();</div><div class=\"line\">            navItem.setTitle(titles[i]);</div><div class=\"line\">            data.add(navItem);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// drawer labels</span></div><div class=\"line\">        titles = getActivity().getResources().getStringArray(R.array.nav_drawer_labels);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                             Bundle savedInstanceState) &#123;</div><div class=\"line\">        <span class=\"comment\">// Inflating view layout</span></div><div class=\"line\">        View layout = inflater.inflate(R.layout.fragment_navigation_drawer, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        recyclerView = (RecyclerView) layout.findViewById(R.id.drawerList);</div><div class=\"line\"> </div><div class=\"line\">        adapter = <span class=\"keyword\">new</span> NavigationDrawerAdapter(getActivity(), getData());</div><div class=\"line\">        recyclerView.setAdapter(adapter);</div><div class=\"line\">        recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(getActivity()));</div><div class=\"line\">        recyclerView.addOnItemTouchListener(<span class=\"keyword\">new</span> RecyclerTouchListener(getActivity(), recyclerView, <span class=\"keyword\">new</span> ClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">                drawerListener.onDrawerItemSelected(view, position);</div><div class=\"line\">                mDrawerLayout.closeDrawer(containerView);</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;));</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> layout;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">(<span class=\"keyword\">int</span> fragmentId, DrawerLayout drawerLayout, <span class=\"keyword\">final</span> Toolbar toolbar)</span> </span>&#123;</div><div class=\"line\">        containerView = getActivity().findViewById(fragmentId);</div><div class=\"line\">        mDrawerLayout = drawerLayout;</div><div class=\"line\">        mDrawerToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(getActivity(), drawerLayout, toolbar, R.string.drawer_open, R.string.drawer_close) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerOpened</span><span class=\"params\">(View drawerView)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onDrawerOpened(drawerView);</div><div class=\"line\">                getActivity().invalidateOptionsMenu();</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerClosed</span><span class=\"params\">(View drawerView)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onDrawerClosed(drawerView);</div><div class=\"line\">                getActivity().invalidateOptionsMenu();</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerSlide</span><span class=\"params\">(View drawerView, <span class=\"keyword\">float</span> slideOffset)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onDrawerSlide(drawerView, slideOffset);</div><div class=\"line\">                toolbar.setAlpha(<span class=\"number\">1</span> - slideOffset / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"> </div><div class=\"line\">        mDrawerLayout.setDrawerListener(mDrawerToggle);</div><div class=\"line\">        mDrawerLayout.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                mDrawerToggle.syncState();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerTouchListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">OnItemTouchListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">private</span> GestureDetector gestureDetector;</div><div class=\"line\">        <span class=\"keyword\">private</span> ClickListener clickListener;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerTouchListener</span><span class=\"params\">(Context context, <span class=\"keyword\">final</span> RecyclerView recyclerView, <span class=\"keyword\">final</span> ClickListener clickListener)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.clickListener = clickListener;</div><div class=\"line\">            gestureDetector = <span class=\"keyword\">new</span> GestureDetector(context, <span class=\"keyword\">new</span> GestureDetector.SimpleOnGestureListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onSingleTapUp</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLongPress</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; clickListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        clickListener.onLongClick(child, recyclerView.getChildPosition(child));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(RecyclerView rv, MotionEvent e)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">            View child = rv.findChildViewUnder(e.getX(), e.getY());</div><div class=\"line\">            <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; clickListener != <span class=\"keyword\">null</span> &amp;&amp; gestureDetector.onTouchEvent(e)) &#123;</div><div class=\"line\">                clickListener.onClick(child, rv.getChildPosition(child));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(RecyclerView rv, MotionEvent e)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestDisallowInterceptTouchEvent</span><span class=\"params\">(<span class=\"keyword\">boolean</span> disallowIntercept)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FragmentDrawerListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerItemSelected</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>22.</strong> 最后，打开首页activity的布局文件<strong>activity_main.xml</strong>，按照下面这样修改。在这个布局中，我们添加了<strong>android.support.v4.widget.DrawerLayout</strong>，来显示导航抽屉菜单</p>\n<p>你也必须写出你的fragment下<strong>FragmentDrawer</strong>的正确路径</p>\n<p><code>actiivty_main.xml</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    android:id=\"@+id/drawer_layout\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\"&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">        android:layout_width=\"match_parent\"</div><div class=\"line\">        android:layout_height=\"match_parent\"</div><div class=\"line\">        android:orientation=\"vertical\"&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;LinearLayout</div><div class=\"line\">            android:id=\"@+id/container_toolbar\"</div><div class=\"line\">            android:layout_width=\"match_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:orientation=\"vertical\"&gt;</div><div class=\"line\"> </div><div class=\"line\">            &lt;include</div><div class=\"line\">                android:id=\"@+id/toolbar\"</div><div class=\"line\">                layout=\"@layout/toolbar\" /&gt;</div><div class=\"line\">        &lt;/LinearLayout&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;FrameLayout</div><div class=\"line\">            android:id=\"@+id/container_body\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"0dp\"</div><div class=\"line\">            android:layout_weight=\"1\" /&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &lt;fragment</div><div class=\"line\">        android:id=\"@+id/fragment_navigation_drawer\"</div><div class=\"line\">        android:name=\"info.androidhive.materialdesign.activity.FragmentDrawer\"</div><div class=\"line\">        android:layout_width=\"@dimen/nav_drawer_width\"</div><div class=\"line\">        android:layout_height=\"match_parent\"</div><div class=\"line\">        android:layout_gravity=\"start\"</div><div class=\"line\">        app:layout=\"@layout/fragment_navigation_drawer\"</div><div class=\"line\">        tools:layout=\"@layout/fragment_navigation_drawer\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/android.support.v4.widget.DrawerLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>现在，我们已经准备好所有的layout和class，让我们在<strong>MainActivity</strong>中做一些必要的修改，使得导航抽屉可以正常运行</p>\n<p><strong>23.</strong> 打开<strong>MainActivity.java</strong>并且做如下修改</p>\n<ul>\n<li><p>activity需要实现FragmentDrawer.FragmentDrawerListener<strong>并且复写</strong>onDrawerItemSelected()**方法</p>\n</li>\n<li><p>创建一个**FragmentDrawer的实例，并设置这个菜单选择的监听器</p>\n</li>\n</ul>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">FragmentDrawer</span>.<span class=\"title\">FragmentDrawerListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentDrawer drawerFragment;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        drawerFragment = (FragmentDrawer)</div><div class=\"line\">                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);</div><div class=\"line\">        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);</div><div class=\"line\">        drawerFragment.setDrawerListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerItemSelected</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，如果你运行这个应用，你能够看到这个导航抽屉，包含一个header和列表</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/androd-material-design-navigation-drawer.png\" alt=\"androd-material-design-navigation-drawer\"></p>\n<p>androd-material-design-navigation-drawer</p>\n<p><strong>3.3</strong> 实现导航抽屉的选择事件<br>尽管导航抽屉成功运行了，但是你看到菜单的点击事件没有正常运行，这是因为我们也需要实现RecyclerView的click监听事件</p>\n<p>因为我们有三个菜单项（Home, Friends &amp; Messages）在导航抽屉中，因此我们需要创建三个独立的fragment类为每一个菜单</p>\n<p><strong>24.</strong> 在res下面，新建一个xml文件叫做<strong>fragment_home.xml</strong>并添加以下代码</p>\n<p><code>fragment_home.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"info.androidhive.materialdesign.activity.HomeFragment\"</span>&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/label\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_horizontal\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"45dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"HOME\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span>/&gt;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/label\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"12dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_horizontal\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Edit fragment_home.xml to change the appearance\"</span> /&gt;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>25.</strong> 在activity包下，新建一个fragment类，叫做<strong>HomeFragment.java</strong>并且添加以下代码</p>\n<p><code>HomeFragment.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeFragment</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class=\"line\">                             Bundle savedInstanceState) &#123;</div><div class=\"line\">        View rootView = inflater.inflate(R.layout.fragment_home, container, <span class=\"keyword\">false</span>);</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></div><div class=\"line\">        <span class=\"keyword\">return</span> rootView;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onAttach(activity);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDetach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>26.</strong> 新建两个fragment类分别叫做：<strong>FriendsFragment.java</strong>、<strong>MessagesFragment.java</strong>，同样新建两个xml：<strong>fragment_friends.xml</strong>、<strong>fragment_messages.xml</strong>，按照上面步骤添加代码</p>\n<p><strong>27.</strong> 现在打开<strong>MainActivity.java</strong>，做以下修改</p>\n<ul>\n<li><em>displayView()</em>方法显示fragment，这个方法在<strong>onDrawerItemSelected()</strong>中被调用，当菜单被选择的时候，来渲染对应的布局</li>\n</ul>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentTransaction;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">FragmentDrawer</span>.<span class=\"title\">FragmentDrawerListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentDrawer drawerFragment;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        drawerFragment = (FragmentDrawer)</div><div class=\"line\">                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);</div><div class=\"line\">        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);</div><div class=\"line\">        drawerFragment.setDrawerListener(<span class=\"keyword\">this</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// display the first navigation drawer view on app launch</span></div><div class=\"line\">        displayView(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span>(id == R.id.action_search)&#123;</div><div class=\"line\">            Toast.makeText(getApplicationContext(), <span class=\"string\">\"Search action is selected!\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerItemSelected</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            displayView(position);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">displayView</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        Fragment fragment = <span class=\"keyword\">null</span>;</div><div class=\"line\">        String title = getString(R.string.app_name);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (position) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                fragment = <span class=\"keyword\">new</span> HomeFragment();</div><div class=\"line\">                title = getString(R.string.title_home);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                fragment = <span class=\"keyword\">new</span> FriendsFragment();</div><div class=\"line\">                title = getString(R.string.title_friends);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                fragment = <span class=\"keyword\">new</span> MessagesFragment();</div><div class=\"line\">                title = getString(R.string.title_messages);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (fragment != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            FragmentManager fragmentManager = getSupportFragmentManager();</div><div class=\"line\">            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class=\"line\">            fragmentTransaction.replace(R.id.container_body, fragment);</div><div class=\"line\">            fragmentTransaction.commit();</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"comment\">// set the toolbar title</span></div><div class=\"line\">            getSupportActionBar().setTitle(title);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在再来运行你的应用，你能够看到导航抽屉菜单的选择事件可以正常实现，并且对应的布局显示在toolbar下面</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-1.png\" alt=\"android-material-design-navigation-drawer-1\"></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-2.png\" alt=\"android-material-design-navigation-drawer-2\"></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-3.png\" alt=\"android-material-design-navigation-drawer-3\"></p>\n","excerpt":"<blockquote>\n<p>原作者：Ravi Tamada<br>原文地址：<a href=\"http://www.androidhive.info/2015/04/android-getting-started-with-material-design/\">http://www.androidhive.info/…with-material-design/</a></p>\n</blockquote>\n<p>你可能听说了在Android Lollipop（棒棒糖）版本中有关Material Design的介绍。在Material Design中，介绍了许多新的东西，像Material主题、新的widget、自定义阴影、矢量图片和自定义动画。如果你还没有使用过Material Design，那么这篇文章会给你一个好的开始。</p>\n<p>在这个教程中，我们将学习Material Design开发基础的步骤，比如编写自定义主题、使用RecyclerView实现导航抽屉。</p>\n<p>通过下面的链接获取更多的关于Material Design的知识：</p>\n<blockquote>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html#\">Material Design Specifications</a><br><a href=\"http://developer.android.com/intl/zh-tw/training/material/index.html\">Creating Apps with Material Design</a></p>\n</blockquote>\n<p>本文资源链接：</p>\n<blockquote>\n<p>源码下载：<a href=\"http://download.androidhive.info/download?code=WPSkdrdZprHT0KLCZS3ClafgXBikGqM4r7FnNYdsdUTmlAkK6%2F2mkT0heOlNOq4U82rzqbod%2F14yU2uk5TWY4Zp%2FAYx6oiD7SKI%2FEgtUapzQUqkqcWEXX1bmw%3D%3DvqARiMEKqkqsXGbVf3vVUoffTqQcD2qfqZo\">点击获取</a><br>视频演示地址：<a href=\"https://youtu.be/jDXX_wDvarM\">Yutube</a><br>","more":"</p>\n</blockquote>\n<h2 id=\"1-下载Android-Studio\"><a href=\"#1-下载Android-Studio\" class=\"headerlink\" title=\"1. 下载Android Studio\"></a>1. 下载Android Studio</h2><p>在进一步了解之前,下载Android Studio并且进行必须的设置，因为之后我将使用Android Studio做教程讲解。如果你是第一次尝试Android Studio，通过<a href=\"http://developer.android.com/intl/zh-tw/tools/studio/index.html\">概述文档</a>了一下Android Studio。</p>\n<h2 id=\"2-Material-Design颜色自定义\"><a href=\"#2-Material-Design颜色自定义\" class=\"headerlink\" title=\"2. Material Design颜色自定义\"></a>2. Material Design颜色自定义</h2><p>Material Design提供了一些其颜色主题的自定义属性，但是我们使用主要的五种，来自定义整个主题：</p>\n<ul>\n<li><p><code>colorPrimaryDark</code> – 应用于通知栏的背景色</p>\n</li>\n<li><p><code>colorPrimary</code> – 这是应用最主要的颜色，应用于toolbar的背景色</p>\n</li>\n<li><p><code>textColorPrimary</code> – 这是文字的颜色，应用于toolbar的标题</p>\n</li>\n<li><p><code>windowBackground</code> – 这是应用默认的背景色</p>\n</li>\n<li><p><code>navigationBarColor</code> – 这个颜色定义了底部导航按钮的背景色</p>\n</li>\n</ul>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-color-schema.png\" alt=\"android-material-design-color-schema\"></p>\n<p>你可以通过Material Design颜色模型，去选择适合你应用的一套颜色</p>\n<h2 id=\"3-创建-Material-Design-主题\"><a href=\"#3-创建-Material-Design-主题\" class=\"headerlink\" title=\"3. 创建 Material Design 主题\"></a>3. 创建 Material Design 主题</h2><p><strong>1.</strong> 在Android Studio中，通过<strong>File ⇒ New Project`</strong>并且填写其他需要的选项，来创建一个新的工程，当被提示选择默认的Activity时，选择<strong>Blank Activity</strong>即可</p>\n<p><strong>2.</strong> 打开<strong>res ⇒ values ⇒ strings.xml</strong>并且添加以下文字：</p>\n<p><code>strings.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"app_name\"</span>&gt;</span>Material Design<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action_settings\"</span>&gt;</span>Settings<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action_search\"</span>&gt;</span>Search<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"drawer_open\"</span>&gt;</span>Open<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"drawer_close\"</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_item_home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_item_friends\"</span>&gt;</span>Friends<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_item_notifications\"</span>&gt;</span>Messages<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">&lt;!-- navigation drawer item labels  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string-array</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_drawer_labels\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/nav_item_home<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/nav_item_friends<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span>@string/nav_item_notifications<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">string-array</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title_messages\"</span>&gt;</span>Messages<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title_friends\"</span>&gt;</span>Friends<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title_home\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.</strong> 打开<strong>res ⇒ values ⇒ colors.xml</strong>并且添加以下颜色值，如果你没有找到<code>colors.xml</code>，就新建一个文件即可</p>\n<p><code>colors.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>#F50057<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>#C51162<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"textColorPrimary\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowBackground\"</span>&gt;</span>#FFFFFF<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"navigationBarColor\"</span>&gt;</span>#000000<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">color</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>#FF80AB<span class=\"tag\">&lt;/<span class=\"name\">color</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>4.</strong> 打开<strong>res ⇒ values ⇒ dimens.xml</strong>并添加以下尺寸值</p>\n<p><code>dimens.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- Default screen margins, per the Android Design guidelines. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_horizontal_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"activity_vertical_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nav_drawer_width\"</span>&gt;</span>260dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>5.</strong> 打开<strong>res ⇒ values ⇒ styles.xml</strong>并添加以下样式。这些样式适用于所有的安卓版本，这里我定义主题的名字为：<strong>MyMaterialTheme</strong></p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\"> </div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">     </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>6.</strong> 在<strong>res</strong>下新建一个文件夹：<strong>values-v21</strong>，在这下面新建另外一个<strong>styles.xml</strong>天下一下样式，这些延时只适用于<strong>Android Lollipop</strong>版本</p>\n<p><code>styles.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyMaterialTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"MyMaterialTheme.Base\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentTransitions\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowEnterTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAllowReturnTransitionOverlap\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementEnterTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowSharedElementExitTransition\"</span>&gt;</span>@android:transition/move<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>7.</strong> 现在我们已经准备好了基本的Material Design样式，为了应用这个主题，打开<strong>AndroidManifest.xml</strong>并通过<application>标签下的<strong>android:theme attribute of</strong>属性为应用设置该主题</p>\n<p><code>android:theme=&quot;@style/MyMaterialTheme&quot;</code></p>\n<p>在设置了该主题之后，你的<strong>AndroidManifest.xml</strong>应该是下面的样子：</p>\n<p><code>AndroidManifest.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"info.androidhive.materialdesign\"</span> &gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/MyMaterialTheme\"</span> &gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".activity.MainActivity\"</span></div><div class=\"line\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>现在运行你的应用，你可以看到通知栏的颜色已经是我们设置的样式的颜色了。</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-notification-bar.png\" alt=\"android-material-design-notification-bar\"></p>\n<p><strong>3.1</strong> 添加Toolbar(Action Bar)</p>\n<p>添加toolbar是非常容易的，你需要做的就是，为toolbar创建一个单独的layout，在其他layout中需要显示的地方使用。</p>\n<p><strong>8.</strong> 新建一个xml文件<strong>res ⇒ layout ⇒ toolbar.xml</strong>并添加<code>android.support.v7.widget.Toolbar</code>控件，这个toolbar具有特定的宽度和主题</p>\n<p><code>toolbar.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:local</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">    <span class=\"attr\">local:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></div><div class=\"line\">    <span class=\"attr\">local:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>9.</strong> 打开主Activity的布局文件(activity_main.xml)，并通过<code>&lt;include/&gt;</code>来添加对toolbar的使用</p>\n<p><code>activity_main.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/toolbar\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行这个应用，并且看看toolbar是不是显示在屏幕上</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar1.png\" alt=\"android-material-design-toolbar\"></p>\n<p>现在让我们试着给toolbar添加标题和交互</p>\n<p><strong>10.</strong> 下载这个<a href=\"http://api.androidhive.info/images/ic_action_search.png\">搜索图标</a>，在Android Studio中通过Image Asset来引用它</p>\n<p><strong>11.</strong> 右键<strong>res ⇒ New ⇒ Image Asset</strong>，会显示一个弹窗来引入资源，找到你下载的搜索图标，Asset Type选择<strong>Action Bar and Tab Icons</strong>，并命名为<strong>ic_search_action</strong></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-studio-importing-image-asset.png\" alt=\"android-studio-importing-image-asset\"></p>\n<p><strong>12.</strong> 图标导入完成之后，打开<strong>res ⇒ menu ⇒ menu_main.xml</strong>并且添加下面的搜索菜单：</p>\n<p><code>menu_main.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/action_search\"</span></div><div class=\"line\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/action_search\"</span></div><div class=\"line\">        <span class=\"attr\">android:orderInCategory</span>=<span class=\"string\">\"100\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_action_search\"</span></div><div class=\"line\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"ifRoom\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/action_settings\"</span></div><div class=\"line\">        <span class=\"attr\">android:title</span>=<span class=\"string\">\"@string/action_settings\"</span></div><div class=\"line\">        <span class=\"attr\">android:orderInCategory</span>=<span class=\"string\">\"100\"</span></div><div class=\"line\">        <span class=\"attr\">app:showAsAction</span>=<span class=\"string\">\"never\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>13.</strong> 现在打开<strong>MainActivity.java</strong>并且做如下修改：</p>\n<ul>\n<li><p>1.继承的activity是<strong>AppCompatActivity</strong></p>\n</li>\n<li><p>2.调用<code>setSupportActionBar()</code>并传递toolbar对象，以设置toolbar为可用状态</p>\n</li>\n<li><ol>\n<li>复写<strong>onCreateOptionsMenu()</strong>和<strong>onOptionsItemSelected()</strong>方法来设置toolbar的交互行为</li>\n</ol>\n</li>\n</ul>\n<p><code>MainActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在做了以上修改之后，如果你运行应用，你应该能够在toolbar中看到搜索图标和更多菜单选项了</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-toolbar-action-items.png\" alt=\"android-material-design-toolbar-action-items\"></p>\n<p><strong>3.2</strong> 添加导航抽屉</p>\n<p>添加导航抽屉，同样是按照之前lollipop的方式，但是如果菜单项使用列表视图，在Material design中要使用<strong>RecyclerView</strong>。因此让我们看看怎样实现<strong>RecyclerView</strong>导航抽屉。</p>\n<p><strong>14.</strong> 在你项目的java文件夹中，新建三个包：<em>activity</em>、<em>adapter</em>、<em>model</em>，并且把<em>MainActivity.java</em>移动到<em>activity</em>包下，这样来保证项目的条理性</p>\n<p><strong>15.</strong> 打开model下的<strong>build.gradle</strong>，添加下面的依赖，然后执行<strong>Build ⇒ Rebuild Project</strong>来下载必须的库</p>\n<p><code>build.gradle</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(dir: 'libs', include: ['*.jar'])</div><div class=\"line\">    compile 'com.android.support:appcompat-v7:22.2.0'</div><div class=\"line\">    compile 'com.android.support:recyclerview-v7:22.2.+'</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>16.</strong> 在<em>model</em>包下，新建一个class文件，命名为<strong>NavDrawerItem.java</strong>，添加以下代码，这个class是一个实体类，它定义了导航抽屉里每一行的菜单项</p>\n<p><code>NavDrawerItem.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> info.androidhive.materialdesign.model;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by Ravi on 29/07/15.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavDrawerItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> showNotify;</div><div class=\"line\">    <span class=\"keyword\">private</span> String title;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavDrawerItem</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavDrawerItem</span><span class=\"params\">(<span class=\"keyword\">boolean</span> showNotify, String title)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showNotify = showNotify;</div><div class=\"line\">        <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isShowNotify</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> showNotify;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setShowNotify</span><span class=\"params\">(<span class=\"keyword\">boolean</span> showNotify)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.showNotify = showNotify;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> title;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.title = title;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>17.</strong> 在<strong>res ⇒ layout</strong>之下，新建一个布局文件，叫做<strong>nav_draw_row.xml</strong>添加以下代码。这个layout渲染的导航抽屉每一行的视图，如果你想要自定义导航抽屉菜单项，你应该修改这个文件，现在只有一个TextView</p>\n<p><code>nav_drawer_row.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"30dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"15dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>18.</strong> 下载这个<a href=\"http://api.androidhive.info/images/ic_profile.png\">个人信息</a>的图标，并把它粘贴到<em>drawable</em> 文件夹下，这一步是可选的，但是这个图标在导航抽屉的header中有使用到</p>\n<p><strong>19.</strong> 新建一个layout命名<strong>fragment_navigation_drawer.xml</strong>，并且添加以下代码。这个layout呈现了整个导航抽屉的视图，它包含了头部部分，用于展示用户信息、RecyclerView来展示列表视图</p>\n<p><code>fragment_navigation_drawer.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/white\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_header_container\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"140dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"70dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"70dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/ic_profile\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawerList\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/nav_header_container\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"15dp\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>20.</strong> 因为<strong>RecyclerView</strong>是自定义的，我们需要一个adapter类去渲染自定义xml布局，因此，在adapter包下，创建一个适配器类<strong>NavigationDrawerAdapter.java</strong>，然后粘贴下面的代码。这个适配器类适配nav_drawer_row.xml布局并呈现RecycleView抽屉菜单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.RecyclerView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by Ravi Tamada on 12-03-2015.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NavigationDrawerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">NavigationDrawerAdapter</span>.<span class=\"title\">MyViewHolder</span>&gt; </span>&#123;</div><div class=\"line\">    List&lt;NavDrawerItem&gt; data = Collections.emptyList();</div><div class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater inflater;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context context;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NavigationDrawerAdapter</span><span class=\"params\">(Context context, List&lt;NavDrawerItem&gt; data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        inflater = LayoutInflater.from(context);</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        data.remove(position);</div><div class=\"line\">        notifyItemRemoved(position);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MyViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">        View view = inflater.inflate(R.layout.nav_drawer_row, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        MyViewHolder holder = <span class=\"keyword\">new</span> MyViewHolder(view);</div><div class=\"line\">        <span class=\"keyword\">return</span> holder;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(MyViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        NavDrawerItem current = data.get(position);</div><div class=\"line\">        holder.title.setText(current.getTitle());</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data.size();</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">        TextView title;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\">            title = (TextView) itemView.findViewById(R.id.title);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>21.</strong> 在activity包下，新建一个fragment叫做<strong>FragmentDrawer.java</strong>。在Android Studio中，新建fragment：<em>右键activity ⇒ New ⇒ Fragment ⇒ Fragment (Blank)</em>，并且给出你的fragment的名称</p>\n<p><code>FragmentDrawer.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by Ravi on 29/07/15.</div><div class=\"line\"> */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarDrawerToggle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.RecyclerView;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.GestureDetector;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialdesign.R;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialdesign.adapter.NavigationDrawerAdapter;</div><div class=\"line\"><span class=\"keyword\">import</span> info.androidhive.materialdesign.model.NavDrawerItem;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentDrawer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String TAG = FragmentDrawer.class.getSimpleName();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> RecyclerView recyclerView;</div><div class=\"line\">    <span class=\"keyword\">private</span> ActionBarDrawerToggle mDrawerToggle;</div><div class=\"line\">    <span class=\"keyword\">private</span> DrawerLayout mDrawerLayout;</div><div class=\"line\">    <span class=\"keyword\">private</span> NavigationDrawerAdapter adapter;</div><div class=\"line\">    <span class=\"keyword\">private</span> View containerView;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String[] titles = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentDrawerListener drawerListener;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FragmentDrawer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDrawerListener</span><span class=\"params\">(FragmentDrawerListener listener)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.drawerListener = listener;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;NavDrawerItem&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        List&lt;NavDrawerItem&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// preparing navigation drawer items</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; titles.length; i++) &#123;</div><div class=\"line\">            NavDrawerItem navItem = <span class=\"keyword\">new</span> NavDrawerItem();</div><div class=\"line\">            navItem.setTitle(titles[i]);</div><div class=\"line\">            data.add(navItem);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// drawer labels</span></div><div class=\"line\">        titles = getActivity().getResources().getStringArray(R.array.nav_drawer_labels);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</div><div class=\"line\">                             Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflating view layout</span></div><div class=\"line\">        View layout = inflater.inflate(R.layout.fragment_navigation_drawer, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">        recyclerView = (RecyclerView) layout.findViewById(R.id.drawerList);</div><div class=\"line\"> </div><div class=\"line\">        adapter = <span class=\"keyword\">new</span> NavigationDrawerAdapter(getActivity(), getData());</div><div class=\"line\">        recyclerView.setAdapter(adapter);</div><div class=\"line\">        recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(getActivity()));</div><div class=\"line\">        recyclerView.addOnItemTouchListener(<span class=\"keyword\">new</span> RecyclerTouchListener(getActivity(), recyclerView, <span class=\"keyword\">new</span> ClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">                drawerListener.onDrawerItemSelected(view, position);</div><div class=\"line\">                mDrawerLayout.closeDrawer(containerView);</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;));</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> layout;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">(<span class=\"keyword\">int</span> fragmentId, DrawerLayout drawerLayout, <span class=\"keyword\">final</span> Toolbar toolbar)</span> </span>&#123;</div><div class=\"line\">        containerView = getActivity().findViewById(fragmentId);</div><div class=\"line\">        mDrawerLayout = drawerLayout;</div><div class=\"line\">        mDrawerToggle = <span class=\"keyword\">new</span> ActionBarDrawerToggle(getActivity(), drawerLayout, toolbar, R.string.drawer_open, R.string.drawer_close) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerOpened</span><span class=\"params\">(View drawerView)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onDrawerOpened(drawerView);</div><div class=\"line\">                getActivity().invalidateOptionsMenu();</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerClosed</span><span class=\"params\">(View drawerView)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onDrawerClosed(drawerView);</div><div class=\"line\">                getActivity().invalidateOptionsMenu();</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerSlide</span><span class=\"params\">(View drawerView, <span class=\"keyword\">float</span> slideOffset)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.onDrawerSlide(drawerView, slideOffset);</div><div class=\"line\">                toolbar.setAlpha(<span class=\"number\">1</span> - slideOffset / <span class=\"number\">2</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"> </div><div class=\"line\">        mDrawerLayout.setDrawerListener(mDrawerToggle);</div><div class=\"line\">        mDrawerLayout.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                mDrawerToggle.syncState();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ClickListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLongClick</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerTouchListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">OnItemTouchListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">private</span> GestureDetector gestureDetector;</div><div class=\"line\">        <span class=\"keyword\">private</span> ClickListener clickListener;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerTouchListener</span><span class=\"params\">(Context context, <span class=\"keyword\">final</span> RecyclerView recyclerView, <span class=\"keyword\">final</span> ClickListener clickListener)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.clickListener = clickListener;</div><div class=\"line\">            gestureDetector = <span class=\"keyword\">new</span> GestureDetector(context, <span class=\"keyword\">new</span> GestureDetector.SimpleOnGestureListener() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onSingleTapUp</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLongPress</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; clickListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        clickListener.onLongClick(child, recyclerView.getChildPosition(child));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(RecyclerView rv, MotionEvent e)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">            View child = rv.findChildViewUnder(e.getX(), e.getY());</div><div class=\"line\">            <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span> &amp;&amp; clickListener != <span class=\"keyword\">null</span> &amp;&amp; gestureDetector.onTouchEvent(e)) &#123;</div><div class=\"line\">                clickListener.onClick(child, rv.getChildPosition(child));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(RecyclerView rv, MotionEvent e)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestDisallowInterceptTouchEvent</span><span class=\"params\">(<span class=\"keyword\">boolean</span> disallowIntercept)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FragmentDrawerListener</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerItemSelected</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>22.</strong> 最后，打开首页activity的布局文件<strong>activity_main.xml</strong>，按照下面这样修改。在这个布局中，我们添加了<strong>android.support.v4.widget.DrawerLayout</strong>，来显示导航抽屉菜单</p>\n<p>你也必须写出你的fragment下<strong>FragmentDrawer</strong>的正确路径</p>\n<p><code>actiivty_main.xml</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"</div><div class=\"line\">    xmlns:app=\"http://schemas.android.com/apk/res-auto\"</div><div class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</div><div class=\"line\">    android:id=\"@+id/drawer_layout\"</div><div class=\"line\">    android:layout_width=\"match_parent\"</div><div class=\"line\">    android:layout_height=\"match_parent\"&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">        android:layout_width=\"match_parent\"</div><div class=\"line\">        android:layout_height=\"match_parent\"</div><div class=\"line\">        android:orientation=\"vertical\"&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;LinearLayout</div><div class=\"line\">            android:id=\"@+id/container_toolbar\"</div><div class=\"line\">            android:layout_width=\"match_parent\"</div><div class=\"line\">            android:layout_height=\"wrap_content\"</div><div class=\"line\">            android:orientation=\"vertical\"&gt;</div><div class=\"line\"> </div><div class=\"line\">            &lt;include</div><div class=\"line\">                android:id=\"@+id/toolbar\"</div><div class=\"line\">                layout=\"@layout/toolbar\" /&gt;</div><div class=\"line\">        &lt;/LinearLayout&gt;</div><div class=\"line\"> </div><div class=\"line\">        &lt;FrameLayout</div><div class=\"line\">            android:id=\"@+id/container_body\"</div><div class=\"line\">            android:layout_width=\"fill_parent\"</div><div class=\"line\">            android:layout_height=\"0dp\"</div><div class=\"line\">            android:layout_weight=\"1\" /&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &lt;/LinearLayout&gt;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &lt;fragment</div><div class=\"line\">        android:id=\"@+id/fragment_navigation_drawer\"</div><div class=\"line\">        android:name=\"info.androidhive.materialdesign.activity.FragmentDrawer\"</div><div class=\"line\">        android:layout_width=\"@dimen/nav_drawer_width\"</div><div class=\"line\">        android:layout_height=\"match_parent\"</div><div class=\"line\">        android:layout_gravity=\"start\"</div><div class=\"line\">        app:layout=\"@layout/fragment_navigation_drawer\"</div><div class=\"line\">        tools:layout=\"@layout/fragment_navigation_drawer\" /&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/android.support.v4.widget.DrawerLayout&gt;</div></pre></td></tr></table></figure></p>\n<p>现在，我们已经准备好所有的layout和class，让我们在<strong>MainActivity</strong>中做一些必要的修改，使得导航抽屉可以正常运行</p>\n<p><strong>23.</strong> 打开<strong>MainActivity.java</strong>并且做如下修改</p>\n<ul>\n<li><p>activity需要实现FragmentDrawer.FragmentDrawerListener<strong>并且复写</strong>onDrawerItemSelected()**方法</p>\n</li>\n<li><p>创建一个**FragmentDrawer的实例，并设置这个菜单选择的监听器</p>\n</li>\n</ul>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">FragmentDrawer</span>.<span class=\"title\">FragmentDrawerListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentDrawer drawerFragment;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        drawerFragment = (FragmentDrawer)</div><div class=\"line\">                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);</div><div class=\"line\">        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);</div><div class=\"line\">        drawerFragment.setDrawerListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerItemSelected</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，如果你运行这个应用，你能够看到这个导航抽屉，包含一个header和列表</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/androd-material-design-navigation-drawer.png\" alt=\"androd-material-design-navigation-drawer\"></p>\n<p>androd-material-design-navigation-drawer</p>\n<p><strong>3.3</strong> 实现导航抽屉的选择事件<br>尽管导航抽屉成功运行了，但是你看到菜单的点击事件没有正常运行，这是因为我们也需要实现RecyclerView的click监听事件</p>\n<p>因为我们有三个菜单项（Home, Friends &amp; Messages）在导航抽屉中，因此我们需要创建三个独立的fragment类为每一个菜单</p>\n<p><strong>24.</strong> 在res下面，新建一个xml文件叫做<strong>fragment_home.xml</strong>并添加以下代码</p>\n<p><code>fragment_home.xml</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"info.androidhive.materialdesign.activity.HomeFragment\"</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/label\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_alignParentTop</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_horizontal\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"45dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"HOME\"</span></div><div class=\"line\">        <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span>/&gt;</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@id/label\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"12dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center_horizontal\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Edit fragment_home.xml to change the appearance\"</span> /&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>25.</strong> 在activity包下，新建一个fragment类，叫做<strong>HomeFragment.java</strong>并且添加以下代码</p>\n<p><code>HomeFragment.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeFragment</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</div><div class=\"line\">                             Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        View rootView = inflater.inflate(R.layout.fragment_home, container, <span class=\"keyword\">false</span>);</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></div><div class=\"line\">        <span class=\"keyword\">return</span> rootView;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttach</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onAttach(activity);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDetach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>26.</strong> 新建两个fragment类分别叫做：<strong>FriendsFragment.java</strong>、<strong>MessagesFragment.java</strong>，同样新建两个xml：<strong>fragment_friends.xml</strong>、<strong>fragment_messages.xml</strong>，按照上面步骤添加代码</p>\n<p><strong>27.</strong> 现在打开<strong>MainActivity.java</strong>，做以下修改</p>\n<ul>\n<li><em>displayView()</em>方法显示fragment，这个方法在<strong>onDrawerItemSelected()</strong>中被调用，当菜单被选择的时候，来渲染对应的布局</li>\n</ul>\n<p><code>MainActivity.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentManager;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.FragmentTransaction;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v4.widget.DrawerLayout;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.ActionBarActivity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.support.v7.widget.Toolbar;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionBarActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">FragmentDrawer</span>.<span class=\"title\">FragmentDrawerListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar mToolbar;</div><div class=\"line\">    <span class=\"keyword\">private</span> FragmentDrawer drawerFragment;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\"> </div><div class=\"line\">        mToolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\"> </div><div class=\"line\">        setSupportActionBar(mToolbar);</div><div class=\"line\">        getSupportActionBar().setDisplayShowHomeEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        drawerFragment = (FragmentDrawer)</div><div class=\"line\">                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);</div><div class=\"line\">        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);</div><div class=\"line\">        drawerFragment.setDrawerListener(<span class=\"keyword\">this</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// display the first navigation drawer view on app launch</span></div><div class=\"line\">        displayView(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class=\"line\">        getMenuInflater().inflate(R.menu.menu_main, menu);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Handle action bar item clicks here. The action bar will</span></div><div class=\"line\">        <span class=\"comment\">// automatically handle clicks on the Home/Up button, so long</span></div><div class=\"line\">        <span class=\"comment\">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class=\"line\">        <span class=\"keyword\">int</span> id = item.getItemId();</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">//noinspection SimplifiableIfStatement</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (id == R.id.action_settings) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span>(id == R.id.action_search)&#123;</div><div class=\"line\">            Toast.makeText(getApplicationContext(), <span class=\"string\">\"Search action is selected!\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawerItemSelected</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">            displayView(position);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">displayView</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        Fragment fragment = <span class=\"keyword\">null</span>;</div><div class=\"line\">        String title = getString(R.string.app_name);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (position) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                fragment = <span class=\"keyword\">new</span> HomeFragment();</div><div class=\"line\">                title = getString(R.string.title_home);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                fragment = <span class=\"keyword\">new</span> FriendsFragment();</div><div class=\"line\">                title = getString(R.string.title_friends);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                fragment = <span class=\"keyword\">new</span> MessagesFragment();</div><div class=\"line\">                title = getString(R.string.title_messages);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (fragment != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            FragmentManager fragmentManager = getSupportFragmentManager();</div><div class=\"line\">            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</div><div class=\"line\">            fragmentTransaction.replace(R.id.container_body, fragment);</div><div class=\"line\">            fragmentTransaction.commit();</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"comment\">// set the toolbar title</span></div><div class=\"line\">            getSupportActionBar().setTitle(title);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在再来运行你的应用，你能够看到导航抽屉菜单的选择事件可以正常实现，并且对应的布局显示在toolbar下面</p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-1.png\" alt=\"android-material-design-navigation-drawer-1\"></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-2.png\" alt=\"android-material-design-navigation-drawer-2\"></p>\n<p><img src=\"http://www.androidhive.info/wp-content/uploads/2015/04/android-material-design-navigation-drawer-3.png\" alt=\"android-material-design-navigation-drawer-3\"></p>"},{"title":"Android Studio: Error running app: Instant Run requires 'Tools | Android | Enable ADB integration' to be enabled","date":"2016-10-19T07:17:38.000Z","_content":"\n在Android Studio使用过程中遇到一些异常情况，记下来做个笔记。\n### 错误信息\nError running app: Instant Run requires 'Tools | Android | Enable ADB integration' to be enabled.\n\n### 解决方案\n![Center](http://img.blog.csdn.net/20160419101048340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)","source":"_posts/Android-Studio-Error-running-app-Instant-Run-requires-Tools-Android-Enable-ADB-integration-to-be-enabled.md","raw":"title: >-\n  Android Studio: Error running app: Instant Run requires 'Tools | Android |\n  Enable ADB integration' to be enabled\ndate: 2016-10-19 15:17:38\ncategories: [Android Studio]\ntags:  [Instant Run, Enable ADB integration]\n---\n\n在Android Studio使用过程中遇到一些异常情况，记下来做个笔记。\n### 错误信息\nError running app: Instant Run requires 'Tools | Android | Enable ADB integration' to be enabled.\n\n### 解决方案\n![Center](http://img.blog.csdn.net/20160419101048340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)","slug":"Android-Studio-Error-running-app-Instant-Run-requires-Tools-Android-Enable-ADB-integration-to-be-enabled","published":1,"updated":"2016-10-19T07:23:42.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b9r000j1giy0022r9aj","content":"<p>在Android Studio使用过程中遇到一些异常情况，记下来做个笔记。</p>\n<h3 id=\"错误信息\"><a href=\"#错误信息\" class=\"headerlink\" title=\"错误信息\"></a>错误信息</h3><p>Error running app: Instant Run requires ‘Tools | Android | Enable ADB integration’ to be enabled.</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p><img src=\"http://img.blog.csdn.net/20160419101048340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"Center\"></p>\n","excerpt":"","more":"<p>在Android Studio使用过程中遇到一些异常情况，记下来做个笔记。</p>\n<h3 id=\"错误信息\"><a href=\"#错误信息\" class=\"headerlink\" title=\"错误信息\"></a>错误信息</h3><p>Error running app: Instant Run requires ‘Tools | Android | Enable ADB integration’ to be enabled.</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p><img src=\"http://img.blog.csdn.net/20160419101048340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"Center\"></p>\n"},{"title":"Android Studio | Intellij 翻译插件 Easy Translation","date":"2016-08-16T14:08:34.000Z","_content":"## 序言\n\n相信现在做Android开发的都已经从Eclipes转Android Studio（AS）了吧，我们都知道，它是Google推出的，基于IntelliJ IDEA的开发工具，提供了集成的 Android 开发工具用于开发和调试。\n- 基于Gradle的构建支持\n- Android 专属的重构和快速修复\n- 提示工具以捕获性能、可用性、版本兼容性等问题\n- 支持ProGuard 和应用签名\n- 基于模板的向导来生成常用的 Android 应用设计和组件\n- 功能强大的布局编辑器，可以让你拖拉 UI 控件并进行效果预览\n\n<!-- more -->\n## 安装\n\n为了学技术不得不一点一点的肯那些英文文档，在AS中我们官方注释也是英文的，单词还要复制出来找google翻译，是不是很麻烦，为了方便大家，我写了一个简单的翻译插件，没错，遇到不懂得单词，马上就能翻译出来，和有道词典的效果差不多，其实是可以中英互译的，该插件支持基于IntelliJ IDEA的开发环境，下面就说说在AS/IntelliJ下怎么使用：\n\n- 直接在编译器下载安装：**File -> Settings -> Plugins -> Browse Repositories -> 搜索Easy-Translation -> 点击右侧的Install -> 重启** 即可。\n- AS可以从官方下载手动安装，插件是以jar的形式提供的，打开AS：**File -> Settings -> Plugins -> Install plugin from disk -> 选择jar包 -> 重启**即可。\n\n\n>[插件下载地址1](http://plugins.jetbrains.com/plugin/8553?pr=idea)\n>\n[插件下载地址2](http://plugins.jetbrains.com/plugin/8556?pr=idea)\n\n## 使用\n\n1. 在编辑页面，双击以选中你想要翻译的词语或语句\n2. _第一种形式_：使用快捷键**Alt + A**，会通过弹窗的形式将翻译结果展示出来，支持鼠标操作\n![Screenshot](https://plugins.jetbrains.com/files/8556/screenshot_16176.png)\n\n3. _第二种形式_：使用快捷键**Alt + S**，通过ToolWindow的形式显示翻译结果，默认是弹窗，可以选择贴边（这样比较方便查看）\n![Screenshot](https://plugins.jetbrains.com/files/8556/screenshot_16177.png)\n\n4. 通过快捷键**Shift + F10**可以选择在网页查看翻译结果（只提供Google和有道翻译）\n![Screenshot](https://plugins.jetbrains.com/files/8556/screenshot_16179.png)\n\n## 注意\n\n1. 如果出现乱码，可以修改一下字体：**File -> Settings -> Appearance&Behavior -> Appearance -> UI Options -> Name(eg. Microsoft YaHei)**\n\n2. 如果翻译出错，稍后重试即可；因为查询会有限制，当然你可以通过：**File -> Settings ->Other Settings -> Easy-Translation**设置自己的有道API\n\n## 总结\n\n虽然只是一个小功能，但是还是挺实用的，使用了有道翻译API，如果觉得好用的就打个赏吧，谢谢","source":"_posts/Android-Studio-Intellij-翻译插件-Easy Translation.md","raw":"title: Android Studio | Intellij 翻译插件 Easy Translation\ndate: 2016-08-16 22:08:34\ncategories: [Android Studio]\ntags: [Intellij IDEA, Android Studio, plugin]\n---\n## 序言\n\n相信现在做Android开发的都已经从Eclipes转Android Studio（AS）了吧，我们都知道，它是Google推出的，基于IntelliJ IDEA的开发工具，提供了集成的 Android 开发工具用于开发和调试。\n- 基于Gradle的构建支持\n- Android 专属的重构和快速修复\n- 提示工具以捕获性能、可用性、版本兼容性等问题\n- 支持ProGuard 和应用签名\n- 基于模板的向导来生成常用的 Android 应用设计和组件\n- 功能强大的布局编辑器，可以让你拖拉 UI 控件并进行效果预览\n\n<!-- more -->\n## 安装\n\n为了学技术不得不一点一点的肯那些英文文档，在AS中我们官方注释也是英文的，单词还要复制出来找google翻译，是不是很麻烦，为了方便大家，我写了一个简单的翻译插件，没错，遇到不懂得单词，马上就能翻译出来，和有道词典的效果差不多，其实是可以中英互译的，该插件支持基于IntelliJ IDEA的开发环境，下面就说说在AS/IntelliJ下怎么使用：\n\n- 直接在编译器下载安装：**File -> Settings -> Plugins -> Browse Repositories -> 搜索Easy-Translation -> 点击右侧的Install -> 重启** 即可。\n- AS可以从官方下载手动安装，插件是以jar的形式提供的，打开AS：**File -> Settings -> Plugins -> Install plugin from disk -> 选择jar包 -> 重启**即可。\n\n\n>[插件下载地址1](http://plugins.jetbrains.com/plugin/8553?pr=idea)\n>\n[插件下载地址2](http://plugins.jetbrains.com/plugin/8556?pr=idea)\n\n## 使用\n\n1. 在编辑页面，双击以选中你想要翻译的词语或语句\n2. _第一种形式_：使用快捷键**Alt + A**，会通过弹窗的形式将翻译结果展示出来，支持鼠标操作\n![Screenshot](https://plugins.jetbrains.com/files/8556/screenshot_16176.png)\n\n3. _第二种形式_：使用快捷键**Alt + S**，通过ToolWindow的形式显示翻译结果，默认是弹窗，可以选择贴边（这样比较方便查看）\n![Screenshot](https://plugins.jetbrains.com/files/8556/screenshot_16177.png)\n\n4. 通过快捷键**Shift + F10**可以选择在网页查看翻译结果（只提供Google和有道翻译）\n![Screenshot](https://plugins.jetbrains.com/files/8556/screenshot_16179.png)\n\n## 注意\n\n1. 如果出现乱码，可以修改一下字体：**File -> Settings -> Appearance&Behavior -> Appearance -> UI Options -> Name(eg. Microsoft YaHei)**\n\n2. 如果翻译出错，稍后重试即可；因为查询会有限制，当然你可以通过：**File -> Settings ->Other Settings -> Easy-Translation**设置自己的有道API\n\n## 总结\n\n虽然只是一个小功能，但是还是挺实用的，使用了有道翻译API，如果觉得好用的就打个赏吧，谢谢","slug":"Android-Studio-Intellij-翻译插件-Easy Translation","published":1,"updated":"2016-10-10T08:15:55.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b9u000m1giy383dy3s4","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>相信现在做Android开发的都已经从Eclipes转Android Studio（AS）了吧，我们都知道，它是Google推出的，基于IntelliJ IDEA的开发工具，提供了集成的 Android 开发工具用于开发和调试。</p>\n<ul>\n<li>基于Gradle的构建支持</li>\n<li>Android 专属的重构和快速修复</li>\n<li>提示工具以捕获性能、可用性、版本兼容性等问题</li>\n<li>支持ProGuard 和应用签名</li>\n<li>基于模板的向导来生成常用的 Android 应用设计和组件</li>\n<li>功能强大的布局编辑器，可以让你拖拉 UI 控件并进行效果预览</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>为了学技术不得不一点一点的肯那些英文文档，在AS中我们官方注释也是英文的，单词还要复制出来找google翻译，是不是很麻烦，为了方便大家，我写了一个简单的翻译插件，没错，遇到不懂得单词，马上就能翻译出来，和有道词典的效果差不多，其实是可以中英互译的，该插件支持基于IntelliJ IDEA的开发环境，下面就说说在AS/IntelliJ下怎么使用：</p>\n<ul>\n<li>直接在编译器下载安装：<strong>File -&gt; Settings -&gt; Plugins -&gt; Browse Repositories -&gt; 搜索Easy-Translation -&gt; 点击右侧的Install -&gt; 重启</strong> 即可。</li>\n<li>AS可以从官方下载手动安装，插件是以jar的形式提供的，打开AS：<strong>File -&gt; Settings -&gt; Plugins -&gt; Install plugin from disk -&gt; 选择jar包 -&gt; 重启</strong>即可。</li>\n</ul>\n<blockquote>\n<p><a href=\"http://plugins.jetbrains.com/plugin/8553?pr=idea\" target=\"_blank\" rel=\"external\">插件下载地址1</a></p>\n<p><a href=\"http://plugins.jetbrains.com/plugin/8556?pr=idea\" target=\"_blank\" rel=\"external\">插件下载地址2</a></p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li>在编辑页面，双击以选中你想要翻译的词语或语句</li>\n<li><p><em>第一种形式</em>：使用快捷键<strong>Alt + A</strong>，会通过弹窗的形式将翻译结果展示出来，支持鼠标操作<br><img src=\"https://plugins.jetbrains.com/files/8556/screenshot_16176.png\" alt=\"Screenshot\"></p>\n</li>\n<li><p><em>第二种形式</em>：使用快捷键<strong>Alt + S</strong>，通过ToolWindow的形式显示翻译结果，默认是弹窗，可以选择贴边（这样比较方便查看）<br><img src=\"https://plugins.jetbrains.com/files/8556/screenshot_16177.png\" alt=\"Screenshot\"></p>\n</li>\n<li><p>通过快捷键<strong>Shift + F10</strong>可以选择在网页查看翻译结果（只提供Google和有道翻译）<br><img src=\"https://plugins.jetbrains.com/files/8556/screenshot_16179.png\" alt=\"Screenshot\"></p>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li><p>如果出现乱码，可以修改一下字体：<strong>File -&gt; Settings -&gt; Appearance&amp;Behavior -&gt; Appearance -&gt; UI Options -&gt; Name(eg. Microsoft YaHei)</strong></p>\n</li>\n<li><p>如果翻译出错，稍后重试即可；因为查询会有限制，当然你可以通过：<strong>File -&gt; Settings -&gt;Other Settings -&gt; Easy-Translation</strong>设置自己的有道API</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然只是一个小功能，但是还是挺实用的，使用了有道翻译API，如果觉得好用的就打个赏吧，谢谢</p>\n","excerpt":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>相信现在做Android开发的都已经从Eclipes转Android Studio（AS）了吧，我们都知道，它是Google推出的，基于IntelliJ IDEA的开发工具，提供了集成的 Android 开发工具用于开发和调试。</p>\n<ul>\n<li>基于Gradle的构建支持</li>\n<li>Android 专属的重构和快速修复</li>\n<li>提示工具以捕获性能、可用性、版本兼容性等问题</li>\n<li>支持ProGuard 和应用签名</li>\n<li>基于模板的向导来生成常用的 Android 应用设计和组件</li>\n<li>功能强大的布局编辑器，可以让你拖拉 UI 控件并进行效果预览</li>\n</ul>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>为了学技术不得不一点一点的肯那些英文文档，在AS中我们官方注释也是英文的，单词还要复制出来找google翻译，是不是很麻烦，为了方便大家，我写了一个简单的翻译插件，没错，遇到不懂得单词，马上就能翻译出来，和有道词典的效果差不多，其实是可以中英互译的，该插件支持基于IntelliJ IDEA的开发环境，下面就说说在AS/IntelliJ下怎么使用：</p>\n<ul>\n<li>直接在编译器下载安装：<strong>File -&gt; Settings -&gt; Plugins -&gt; Browse Repositories -&gt; 搜索Easy-Translation -&gt; 点击右侧的Install -&gt; 重启</strong> 即可。</li>\n<li>AS可以从官方下载手动安装，插件是以jar的形式提供的，打开AS：<strong>File -&gt; Settings -&gt; Plugins -&gt; Install plugin from disk -&gt; 选择jar包 -&gt; 重启</strong>即可。</li>\n</ul>\n<blockquote>\n<p><a href=\"http://plugins.jetbrains.com/plugin/8553?pr=idea\">插件下载地址1</a></p>\n<p><a href=\"http://plugins.jetbrains.com/plugin/8556?pr=idea\">插件下载地址2</a></p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li>在编辑页面，双击以选中你想要翻译的词语或语句</li>\n<li><p><em>第一种形式</em>：使用快捷键<strong>Alt + A</strong>，会通过弹窗的形式将翻译结果展示出来，支持鼠标操作<br><img src=\"https://plugins.jetbrains.com/files/8556/screenshot_16176.png\" alt=\"Screenshot\"></p>\n</li>\n<li><p><em>第二种形式</em>：使用快捷键<strong>Alt + S</strong>，通过ToolWindow的形式显示翻译结果，默认是弹窗，可以选择贴边（这样比较方便查看）<br><img src=\"https://plugins.jetbrains.com/files/8556/screenshot_16177.png\" alt=\"Screenshot\"></p>\n</li>\n<li><p>通过快捷键<strong>Shift + F10</strong>可以选择在网页查看翻译结果（只提供Google和有道翻译）<br><img src=\"https://plugins.jetbrains.com/files/8556/screenshot_16179.png\" alt=\"Screenshot\"></p>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li><p>如果出现乱码，可以修改一下字体：<strong>File -&gt; Settings -&gt; Appearance&amp;Behavior -&gt; Appearance -&gt; UI Options -&gt; Name(eg. Microsoft YaHei)</strong></p>\n</li>\n<li><p>如果翻译出错，稍后重试即可；因为查询会有限制，当然你可以通过：<strong>File -&gt; Settings -&gt;Other Settings -&gt; Easy-Translation</strong>设置自己的有道API</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然只是一个小功能，但是还是挺实用的，使用了有道翻译API，如果觉得好用的就打个赏吧，谢谢</p>"},{"title":"Android Studio Tips of the Day(1)","date":"2015-12-22T09:19:51.000Z","_content":"\n>原作者：Philippe Breault\n>原文地址：[http://www.developerphil.com/...day-roundup-1/](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/)\n\n#### 关于快捷键\n\nAndroid Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过_Settings->KeyMap._\n\n\n#### 1.高亮显示\n| Mac| Win&Linux |\n| :-- | :--|\n| cmd+shift+f7| ctrl+shift+f7 |\n\n高亮显示光标所在的字符，这不仅仅是一个简单的匹配模式，它会了解当前的范围，并且高亮范围内同类的字符。你可以向上、向下浏览，通过：_Edit -> Find -> Find Next/Previous_\n\n其他提示：\n- 高亮一个方法中的“return”或者“throw”，其他方法也会同样高亮显示\n- 高亮类声明中“extends”或者“implements”，同样会高亮 **override/implemented**的方法\n- 高亮一个 import 会同样高亮使用它的地方\n- 可以通过 _Escape_ 取消高亮\n\n![ctrlshiftf7](http://www.developerphil.com/assets/01-highlight.gif)\n<!-- more -->\n\n#### 2.在方法和内部类之间移动\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| ctrl+up/down| alt+up/down |\n\n在当前文件中，移动光标到下一个方法或者类的名字开头。\n\n如果你在方法内，向上就会将光标移动到该方法的名字开头。它非常有用，因为它让你在正确的地方重构或者发现方法的用法。\n\n![move](http://www.developerphil.com/assets/02-move_between_methods.gif)\n\n#### 3.类结构弹窗\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+f12| ctrl+f12 |\n\n用来展示当前类的概要和内部的导航.最好的事情是你可以使用你的键盘过滤。这是一件非常高效的方法，去定位到一个你知道其名字的方法。\n\n其他提示：\n- 输入过滤列表时，你可以使用驼峰匹配。例如：输入**\"oCr\"**将查找到**\"onCreate\"**\n- 你也可以切换复选框来显示匿名内部类。假如你想要查找**onClickListener**中的**onClick**方法，这个就非常好用。\n\n![hierarachy](http://www.developerphil.com/assets/04-callinghierarchy.gif)\n\n#### 4.调用层级结构弹窗\n| Mac| Win&Linux |\n| :-- | :-- |\n| ctrl+alt+h | ctrl+alt+h |\n它可以显示一个方法的声明和调用之间可能的路径。\n![popup](http://www.developerphil.com/assets/03-filestructure.gif)\n\n#### 5.定义快速查询\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+space | ctrl+shift+i |\n有没有想要查看一个方法或者类的实现，但是又不想离开当前的页面？使用这个快捷键就可以在当前页面通过窗口的形式展现。\n![quick](http://www.developerphil.com/assets/05-quickdefinition.gif)\n\n#### 6.折叠展开代码块\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+plus/minus | ctrl+shift+plus/minus |\n这个功能的目的是让你隐藏你此刻不关心的东西。他将以最简单的形式隐藏整个代码块（例如：当你打开一个新的文件的时候忽略 _import_列表）。一个更有趣的用法是，它会隐藏周围简单的匿名内部类模块，并使它看起来像一个lambda表达式。\n\n其他提示：\n- 你可以设置默认，通过 _Edit -> Code Folding._\n![fold](http://www.developerphil.com/assets/06-codefolding.gif)\n\n#### 7.书签\n- 切换书签\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| f3 | f11 |\n\n- 通过助记符切换书签\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+f3 | ctrl+f11 |\n\t\n如果你分配了一个数据，你可以通过快捷方式 _ctrl+number_ 回到书签\n\n\n- 显示书签\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+f3 | shift+f11 |\n\t\n![find](http://www.developerphil.com/assets/08-findaction.gif)\n\n\n\n\n\n#### 8.符号查找\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+shift+a | ctrl+shift+a |\n\n对于Android Studio，你可以通过它的名字，调用任何你知道的菜单或者符号！这对于你曾经有一段时间使用过，但却没有快捷方式的命令是非常有用的。\n\n其他提示：\n- 如果有相关联的快捷键，会一同显示\n![move](http://www.developerphil.com/assets/07-bookmarks.gif)\n\n#### 9.行上下移动\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+shift+up/down | alt+shift+up/down |\n\n![bookmark](http://www.developerphil.com/assets/09-movelines.gif)\n\n#### 10.删除行\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+backspace | ctrl+y |\n\n![bookmark](http://www.developerphil.com/assets/10-deleteline.gif)","source":"_posts/Android-Studio-Tips-of-the-Day(1).md","raw":"title: Android Studio Tips of the Day(1)\ndate: 2015-12-22 17:19:51\ncategories: [Android Studio]\ntags: [Android Studio, 快捷键, tips of the Day]\n---\n\n>原作者：Philippe Breault\n>原文地址：[http://www.developerphil.com/...day-roundup-1/](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/)\n\n#### 关于快捷键\n\nAndroid Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过_Settings->KeyMap._\n\n\n#### 1.高亮显示\n| Mac| Win&Linux |\n| :-- | :--|\n| cmd+shift+f7| ctrl+shift+f7 |\n\n高亮显示光标所在的字符，这不仅仅是一个简单的匹配模式，它会了解当前的范围，并且高亮范围内同类的字符。你可以向上、向下浏览，通过：_Edit -> Find -> Find Next/Previous_\n\n其他提示：\n- 高亮一个方法中的“return”或者“throw”，其他方法也会同样高亮显示\n- 高亮类声明中“extends”或者“implements”，同样会高亮 **override/implemented**的方法\n- 高亮一个 import 会同样高亮使用它的地方\n- 可以通过 _Escape_ 取消高亮\n\n![ctrlshiftf7](http://www.developerphil.com/assets/01-highlight.gif)\n<!-- more -->\n\n#### 2.在方法和内部类之间移动\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| ctrl+up/down| alt+up/down |\n\n在当前文件中，移动光标到下一个方法或者类的名字开头。\n\n如果你在方法内，向上就会将光标移动到该方法的名字开头。它非常有用，因为它让你在正确的地方重构或者发现方法的用法。\n\n![move](http://www.developerphil.com/assets/02-move_between_methods.gif)\n\n#### 3.类结构弹窗\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+f12| ctrl+f12 |\n\n用来展示当前类的概要和内部的导航.最好的事情是你可以使用你的键盘过滤。这是一件非常高效的方法，去定位到一个你知道其名字的方法。\n\n其他提示：\n- 输入过滤列表时，你可以使用驼峰匹配。例如：输入**\"oCr\"**将查找到**\"onCreate\"**\n- 你也可以切换复选框来显示匿名内部类。假如你想要查找**onClickListener**中的**onClick**方法，这个就非常好用。\n\n![hierarachy](http://www.developerphil.com/assets/04-callinghierarchy.gif)\n\n#### 4.调用层级结构弹窗\n| Mac| Win&Linux |\n| :-- | :-- |\n| ctrl+alt+h | ctrl+alt+h |\n它可以显示一个方法的声明和调用之间可能的路径。\n![popup](http://www.developerphil.com/assets/03-filestructure.gif)\n\n#### 5.定义快速查询\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+space | ctrl+shift+i |\n有没有想要查看一个方法或者类的实现，但是又不想离开当前的页面？使用这个快捷键就可以在当前页面通过窗口的形式展现。\n![quick](http://www.developerphil.com/assets/05-quickdefinition.gif)\n\n#### 6.折叠展开代码块\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+plus/minus | ctrl+shift+plus/minus |\n这个功能的目的是让你隐藏你此刻不关心的东西。他将以最简单的形式隐藏整个代码块（例如：当你打开一个新的文件的时候忽略 _import_列表）。一个更有趣的用法是，它会隐藏周围简单的匿名内部类模块，并使它看起来像一个lambda表达式。\n\n其他提示：\n- 你可以设置默认，通过 _Edit -> Code Folding._\n![fold](http://www.developerphil.com/assets/06-codefolding.gif)\n\n#### 7.书签\n- 切换书签\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| f3 | f11 |\n\n- 通过助记符切换书签\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+f3 | ctrl+f11 |\n\t\n如果你分配了一个数据，你可以通过快捷方式 _ctrl+number_ 回到书签\n\n\n- 显示书签\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+f3 | shift+f11 |\n\t\n![find](http://www.developerphil.com/assets/08-findaction.gif)\n\n\n\n\n\n#### 8.符号查找\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+shift+a | ctrl+shift+a |\n\n对于Android Studio，你可以通过它的名字，调用任何你知道的菜单或者符号！这对于你曾经有一段时间使用过，但却没有快捷方式的命令是非常有用的。\n\n其他提示：\n- 如果有相关联的快捷键，会一同显示\n![move](http://www.developerphil.com/assets/07-bookmarks.gif)\n\n#### 9.行上下移动\n| Mac| Win&Linux |\n| :-- | :-- |\n| alt+shift+up/down | alt+shift+up/down |\n\n![bookmark](http://www.developerphil.com/assets/09-movelines.gif)\n\n#### 10.删除行\n\n| Mac| Win&Linux |\n| :-- | :-- |\n| cmd+backspace | ctrl+y |\n\n![bookmark](http://www.developerphil.com/assets/10-deleteline.gif)","slug":"Android-Studio-Tips-of-the-Day(1)","published":1,"updated":"2016-10-10T06:53:44.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6b9y000q1giygwrpc5n5","content":"<blockquote>\n<p>原作者：Philippe Breault<br>原文地址：<a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/\" target=\"_blank\" rel=\"external\">http://www.developerphil.com/…day-roundup-1/</a></p>\n</blockquote>\n<h4 id=\"关于快捷键\"><a href=\"#关于快捷键\" class=\"headerlink\" title=\"关于快捷键\"></a>关于快捷键</h4><p>Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过<em>Settings-&gt;KeyMap.</em></p>\n<h4 id=\"1-高亮显示\"><a href=\"#1-高亮显示\" class=\"headerlink\" title=\"1.高亮显示\"></a>1.高亮显示</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+f7</td>\n<td style=\"text-align:left\">ctrl+shift+f7</td>\n</tr>\n</tbody>\n</table>\n<p>高亮显示光标所在的字符，这不仅仅是一个简单的匹配模式，它会了解当前的范围，并且高亮范围内同类的字符。你可以向上、向下浏览，通过：<em>Edit -&gt; Find -&gt; Find Next/Previous</em></p>\n<p>其他提示：</p>\n<ul>\n<li>高亮一个方法中的“return”或者“throw”，其他方法也会同样高亮显示</li>\n<li>高亮类声明中“extends”或者“implements”，同样会高亮 <strong>override/implemented</strong>的方法</li>\n<li>高亮一个 import 会同样高亮使用它的地方</li>\n<li>可以通过 <em>Escape</em> 取消高亮</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/01-highlight.gif\" alt=\"ctrlshiftf7\"><br><a id=\"more\"></a></p>\n<h4 id=\"2-在方法和内部类之间移动\"><a href=\"#2-在方法和内部类之间移动\" class=\"headerlink\" title=\"2.在方法和内部类之间移动\"></a>2.在方法和内部类之间移动</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ctrl+up/down</td>\n<td style=\"text-align:left\">alt+up/down</td>\n</tr>\n</tbody>\n</table>\n<p>在当前文件中，移动光标到下一个方法或者类的名字开头。</p>\n<p>如果你在方法内，向上就会将光标移动到该方法的名字开头。它非常有用，因为它让你在正确的地方重构或者发现方法的用法。</p>\n<p><img src=\"http://www.developerphil.com/assets/02-move_between_methods.gif\" alt=\"move\"></p>\n<h4 id=\"3-类结构弹窗\"><a href=\"#3-类结构弹窗\" class=\"headerlink\" title=\"3.类结构弹窗\"></a>3.类结构弹窗</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+f12</td>\n<td style=\"text-align:left\">ctrl+f12</td>\n</tr>\n</tbody>\n</table>\n<p>用来展示当前类的概要和内部的导航.最好的事情是你可以使用你的键盘过滤。这是一件非常高效的方法，去定位到一个你知道其名字的方法。</p>\n<p>其他提示：</p>\n<ul>\n<li>输入过滤列表时，你可以使用驼峰匹配。例如：输入<strong>“oCr”</strong>将查找到<strong>“onCreate”</strong></li>\n<li>你也可以切换复选框来显示匿名内部类。假如你想要查找<strong>onClickListener</strong>中的<strong>onClick</strong>方法，这个就非常好用。</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/04-callinghierarchy.gif\" alt=\"hierarachy\"></p>\n<h4 id=\"4-调用层级结构弹窗\"><a href=\"#4-调用层级结构弹窗\" class=\"headerlink\" title=\"4.调用层级结构弹窗\"></a>4.调用层级结构弹窗</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ctrl+alt+h</td>\n<td style=\"text-align:left\">ctrl+alt+h</td>\n</tr>\n</tbody>\n</table>\n<p>它可以显示一个方法的声明和调用之间可能的路径。<br><img src=\"http://www.developerphil.com/assets/03-filestructure.gif\" alt=\"popup\"></p>\n<h4 id=\"5-定义快速查询\"><a href=\"#5-定义快速查询\" class=\"headerlink\" title=\"5.定义快速查询\"></a>5.定义快速查询</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+space</td>\n<td style=\"text-align:left\">ctrl+shift+i</td>\n</tr>\n</tbody>\n</table>\n<p>有没有想要查看一个方法或者类的实现，但是又不想离开当前的页面？使用这个快捷键就可以在当前页面通过窗口的形式展现。<br><img src=\"http://www.developerphil.com/assets/05-quickdefinition.gif\" alt=\"quick\"></p>\n<h4 id=\"6-折叠展开代码块\"><a href=\"#6-折叠展开代码块\" class=\"headerlink\" title=\"6.折叠展开代码块\"></a>6.折叠展开代码块</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+plus/minus</td>\n<td style=\"text-align:left\">ctrl+shift+plus/minus</td>\n</tr>\n</tbody>\n</table>\n<p>这个功能的目的是让你隐藏你此刻不关心的东西。他将以最简单的形式隐藏整个代码块（例如：当你打开一个新的文件的时候忽略 <em>import</em>列表）。一个更有趣的用法是，它会隐藏周围简单的匿名内部类模块，并使它看起来像一个lambda表达式。</p>\n<p>其他提示：</p>\n<ul>\n<li>你可以设置默认，通过 <em>Edit -&gt; Code Folding.</em><br><img src=\"http://www.developerphil.com/assets/06-codefolding.gif\" alt=\"fold\"></li>\n</ul>\n<h4 id=\"7-书签\"><a href=\"#7-书签\" class=\"headerlink\" title=\"7.书签\"></a>7.书签</h4><ul>\n<li>切换书签</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">f3</td>\n<td style=\"text-align:left\">f11</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>通过助记符切换书签</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+f3</td>\n<td style=\"text-align:left\">ctrl+f11</td>\n</tr>\n</tbody>\n</table>\n<p>如果你分配了一个数据，你可以通过快捷方式 <em>ctrl+number</em> 回到书签</p>\n<ul>\n<li>显示书签</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+f3</td>\n<td style=\"text-align:left\">shift+f11</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.developerphil.com/assets/08-findaction.gif\" alt=\"find\"></p>\n<h4 id=\"8-符号查找\"><a href=\"#8-符号查找\" class=\"headerlink\" title=\"8.符号查找\"></a>8.符号查找</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+a</td>\n<td style=\"text-align:left\">ctrl+shift+a</td>\n</tr>\n</tbody>\n</table>\n<p>对于Android Studio，你可以通过它的名字，调用任何你知道的菜单或者符号！这对于你曾经有一段时间使用过，但却没有快捷方式的命令是非常有用的。</p>\n<p>其他提示：</p>\n<ul>\n<li>如果有相关联的快捷键，会一同显示<br><img src=\"http://www.developerphil.com/assets/07-bookmarks.gif\" alt=\"move\"></li>\n</ul>\n<h4 id=\"9-行上下移动\"><a href=\"#9-行上下移动\" class=\"headerlink\" title=\"9.行上下移动\"></a>9.行上下移动</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+shift+up/down</td>\n<td style=\"text-align:left\">alt+shift+up/down</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.developerphil.com/assets/09-movelines.gif\" alt=\"bookmark\"></p>\n<h4 id=\"10-删除行\"><a href=\"#10-删除行\" class=\"headerlink\" title=\"10.删除行\"></a>10.删除行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+backspace</td>\n<td style=\"text-align:left\">ctrl+y</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.developerphil.com/assets/10-deleteline.gif\" alt=\"bookmark\"></p>\n","excerpt":"<blockquote>\n<p>原作者：Philippe Breault<br>原文地址：<a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-1/\">http://www.developerphil.com/…day-roundup-1/</a></p>\n</blockquote>\n<h4 id=\"关于快捷键\"><a href=\"#关于快捷键\" class=\"headerlink\" title=\"关于快捷键\"></a>关于快捷键</h4><p>Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过<em>Settings-&gt;KeyMap.</em></p>\n<h4 id=\"1-高亮显示\"><a href=\"#1-高亮显示\" class=\"headerlink\" title=\"1.高亮显示\"></a>1.高亮显示</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+f7</td>\n<td style=\"text-align:left\">ctrl+shift+f7</td>\n</tr>\n</tbody>\n</table>\n<p>高亮显示光标所在的字符，这不仅仅是一个简单的匹配模式，它会了解当前的范围，并且高亮范围内同类的字符。你可以向上、向下浏览，通过：<em>Edit -&gt; Find -&gt; Find Next/Previous</em></p>\n<p>其他提示：</p>\n<ul>\n<li>高亮一个方法中的“return”或者“throw”，其他方法也会同样高亮显示</li>\n<li>高亮类声明中“extends”或者“implements”，同样会高亮 <strong>override/implemented</strong>的方法</li>\n<li>高亮一个 import 会同样高亮使用它的地方</li>\n<li>可以通过 <em>Escape</em> 取消高亮</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/01-highlight.gif\" alt=\"ctrlshiftf7\"><br>","more":"</p>\n<h4 id=\"2-在方法和内部类之间移动\"><a href=\"#2-在方法和内部类之间移动\" class=\"headerlink\" title=\"2.在方法和内部类之间移动\"></a>2.在方法和内部类之间移动</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ctrl+up/down</td>\n<td style=\"text-align:left\">alt+up/down</td>\n</tr>\n</tbody>\n</table>\n<p>在当前文件中，移动光标到下一个方法或者类的名字开头。</p>\n<p>如果你在方法内，向上就会将光标移动到该方法的名字开头。它非常有用，因为它让你在正确的地方重构或者发现方法的用法。</p>\n<p><img src=\"http://www.developerphil.com/assets/02-move_between_methods.gif\" alt=\"move\"></p>\n<h4 id=\"3-类结构弹窗\"><a href=\"#3-类结构弹窗\" class=\"headerlink\" title=\"3.类结构弹窗\"></a>3.类结构弹窗</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+f12</td>\n<td style=\"text-align:left\">ctrl+f12</td>\n</tr>\n</tbody>\n</table>\n<p>用来展示当前类的概要和内部的导航.最好的事情是你可以使用你的键盘过滤。这是一件非常高效的方法，去定位到一个你知道其名字的方法。</p>\n<p>其他提示：</p>\n<ul>\n<li>输入过滤列表时，你可以使用驼峰匹配。例如：输入<strong>“oCr”</strong>将查找到<strong>“onCreate”</strong></li>\n<li>你也可以切换复选框来显示匿名内部类。假如你想要查找<strong>onClickListener</strong>中的<strong>onClick</strong>方法，这个就非常好用。</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/04-callinghierarchy.gif\" alt=\"hierarachy\"></p>\n<h4 id=\"4-调用层级结构弹窗\"><a href=\"#4-调用层级结构弹窗\" class=\"headerlink\" title=\"4.调用层级结构弹窗\"></a>4.调用层级结构弹窗</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ctrl+alt+h</td>\n<td style=\"text-align:left\">ctrl+alt+h</td>\n</tr>\n</tbody>\n</table>\n<p>它可以显示一个方法的声明和调用之间可能的路径。<br><img src=\"http://www.developerphil.com/assets/03-filestructure.gif\" alt=\"popup\"></p>\n<h4 id=\"5-定义快速查询\"><a href=\"#5-定义快速查询\" class=\"headerlink\" title=\"5.定义快速查询\"></a>5.定义快速查询</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+space</td>\n<td style=\"text-align:left\">ctrl+shift+i</td>\n</tr>\n</tbody>\n</table>\n<p>有没有想要查看一个方法或者类的实现，但是又不想离开当前的页面？使用这个快捷键就可以在当前页面通过窗口的形式展现。<br><img src=\"http://www.developerphil.com/assets/05-quickdefinition.gif\" alt=\"quick\"></p>\n<h4 id=\"6-折叠展开代码块\"><a href=\"#6-折叠展开代码块\" class=\"headerlink\" title=\"6.折叠展开代码块\"></a>6.折叠展开代码块</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+plus/minus</td>\n<td style=\"text-align:left\">ctrl+shift+plus/minus</td>\n</tr>\n</tbody>\n</table>\n<p>这个功能的目的是让你隐藏你此刻不关心的东西。他将以最简单的形式隐藏整个代码块（例如：当你打开一个新的文件的时候忽略 <em>import</em>列表）。一个更有趣的用法是，它会隐藏周围简单的匿名内部类模块，并使它看起来像一个lambda表达式。</p>\n<p>其他提示：</p>\n<ul>\n<li>你可以设置默认，通过 <em>Edit -&gt; Code Folding.</em><br><img src=\"http://www.developerphil.com/assets/06-codefolding.gif\" alt=\"fold\"></li>\n</ul>\n<h4 id=\"7-书签\"><a href=\"#7-书签\" class=\"headerlink\" title=\"7.书签\"></a>7.书签</h4><ul>\n<li>切换书签</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">f3</td>\n<td style=\"text-align:left\">f11</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>通过助记符切换书签</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+f3</td>\n<td style=\"text-align:left\">ctrl+f11</td>\n</tr>\n</tbody>\n</table>\n<p>如果你分配了一个数据，你可以通过快捷方式 <em>ctrl+number</em> 回到书签</p>\n<ul>\n<li>显示书签</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+f3</td>\n<td style=\"text-align:left\">shift+f11</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.developerphil.com/assets/08-findaction.gif\" alt=\"find\"></p>\n<h4 id=\"8-符号查找\"><a href=\"#8-符号查找\" class=\"headerlink\" title=\"8.符号查找\"></a>8.符号查找</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+a</td>\n<td style=\"text-align:left\">ctrl+shift+a</td>\n</tr>\n</tbody>\n</table>\n<p>对于Android Studio，你可以通过它的名字，调用任何你知道的菜单或者符号！这对于你曾经有一段时间使用过，但却没有快捷方式的命令是非常有用的。</p>\n<p>其他提示：</p>\n<ul>\n<li>如果有相关联的快捷键，会一同显示<br><img src=\"http://www.developerphil.com/assets/07-bookmarks.gif\" alt=\"move\"></li>\n</ul>\n<h4 id=\"9-行上下移动\"><a href=\"#9-行上下移动\" class=\"headerlink\" title=\"9.行上下移动\"></a>9.行上下移动</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+shift+up/down</td>\n<td style=\"text-align:left\">alt+shift+up/down</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.developerphil.com/assets/09-movelines.gif\" alt=\"bookmark\"></p>\n<h4 id=\"10-删除行\"><a href=\"#10-删除行\" class=\"headerlink\" title=\"10.删除行\"></a>10.删除行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+backspace</td>\n<td style=\"text-align:left\">ctrl+y</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.developerphil.com/assets/10-deleteline.gif\" alt=\"bookmark\"></p>"},{"title":"Android Studio Tips of the Day(2)","date":"2015-12-23T06:22:27.000Z","_content":"\n>原作者：Philippe Breault\n>原文地址：[http://www.developerphil.com/...the-day-roundup-2/](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/)\n\n#### 关于快捷键\n\nAndroid Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过_Settings->KeyMap._\n\n#### 1.重复的行\n\n| Mac | Win&Linux |\n| :-- | :-- |\n| cmd+d | ctrl+d |\n\n它可以复制当前行并且粘贴它到下一行,不会影响剪切板的内容。\n\n![dumplicate](http://www.developerphil.com/assets/11-duplicate_lines.gif)\n<!-- more -->\n\n\n#### 2.扩大/缩小选择\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| alt+up/down | ctrl+w / ctrl+shift+w |\n\n以光标为基点,在上下文扩展选择的范围。例如:它将选择当前的变量,然后该语句,然后是这个方法等。\n![dumplicate](http://www.developerphil.com/assets/12-expand_shrink_selection.gif)\n\n#### 3.环绕(包装)\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+alt+t | ctrl+alt+t |\n\n这个操作可以包装一个结构的代码块。通常是一个 _if_ 语句,一个循环、一个 _try-catch_ 或者是一个 _runnable_。\n如果你什么都没选, 那么它只会包裹当前行。\n\n![dumplicate](http://www.developerphil.com/assets/13-surround_with.gif)\n\n#### 4.最近列表\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+e | ctrl+e |\n\n使用这个功能,你可以看到最近查看过的文件列表。\n\n![dumplicate](http://www.developerphil.com/assets/14-recents.gif)\n\n#### 5.自动代码\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+j | ctrl+j |\n\n它可以快速插入代码片段。更有趣的是它带有合理的默认值,并通过参数引导你完成插入。\n\n其他提示:\n- 如果你知道缩写,你也可以不用快捷方式。你仅仅需要如果缩写并且使用_Tab_key 完成即可。\n\n![dumplicate](http://www.developerphil.com/assets/15-live_templates.gif)\n\n\n#### 6.移动方法\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+alt+up/down | ctrl+shift+up/down |\n\n这是一个类似移动行的快捷方式,但是移动的是整个方法。没必要使用复制-粘贴,就可以上下移动方法。例如:你可以重新排序字段和内部类。\n\n![dumplicate](http://www.developerphil.com/assets/15-movemethods.gif)\n\n\n#### 7.完成语句\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+shift+enter | ctrl+shift+enter |\n\n它会自动生成丢失的代码来完成一条语句,它通常的使用情景是:\n- 添加一个分号在行的末尾,即时光标不在行尾\n- 在_if、while、for_的后面添加一个括号或者大括号\n- 添加一个大括号在方法声明之后\n\n其他提示:\n- 如果一条语句已经完成,它会进入下一行,即时光标没有在当前行的最后一个字符.\n![dumplicate](http://www.developerphil.com/assets/16-completestatement.gif)\n\n\n#### 8.最后一次编辑的位置\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+shift+backspace | ctrl+shift+backspace |\n\n它会让你浏览你最后一次修改的位置,这个和点击工具栏的返回按钮是不一样的。它会带你在你修改的历史记录中浏览。\n\n\n![dumplicate](http://www.developerphil.com/assets/17-navigate-previous-changes.gif)\n\n\n#### 9.整合行和文字\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| ctrl+shift+j | ctrl+shift+j |\n\n\n它能比你在行尾模拟删除键要做的更多,它可以保留当前的格式规则,并且它还可以:\n- 合并两个注释行,并且删除无用的_//_\n- 合并多行字符串,并且去除_+、\"\"_\n- 整合字段和任务\n\n其他提示:\n- 如果你选择了一个字符串,跨越多行,那么它就可以将其整合成一行\n\n![dumplicate](http://www.developerphil.com/assets/18-joinlines.gif)\n\n\n#### 10.查找\n\n| Mac | Win&Linux |\n| :-- | :-- |\n| alt+f1 | alt+f1 |\n\n\n获取当前文件,并且询问你在哪选择它。他可以在_project、structure_或者文件管理器中打开它。每一个动作都有一个数字或字母前缀,这是调用它的快捷方式。\n\n你可以从文件或者直接从_project_试图调用测方法。\n\n![dumplicate](http://www.developerphil.com/assets/19-select-in.gif)\n\n\n#### 11.展开/删除\n这个操作将会移除包裹的代码,它可以移除一个_if_语句、_while_ 循环、_try-catch_ 或者_runnable_ 。\n这和包裹的快捷方式是完全相反的。\n\n![dumplicate](http://www.developerphil.com/assets/20-unwrap.gif)","source":"_posts/Android-Studio-Tips-of-the-Day(2).md","raw":"title: Android Studio Tips of the Day(2)\ndate: 2015-12-23 14:22:27\ncategories: [Android Studio]\ntags: [Android Studio, 快捷键, tips of the Day]\n---\n\n>原作者：Philippe Breault\n>原文地址：[http://www.developerphil.com/...the-day-roundup-2/](http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/)\n\n#### 关于快捷键\n\nAndroid Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过_Settings->KeyMap._\n\n#### 1.重复的行\n\n| Mac | Win&Linux |\n| :-- | :-- |\n| cmd+d | ctrl+d |\n\n它可以复制当前行并且粘贴它到下一行,不会影响剪切板的内容。\n\n![dumplicate](http://www.developerphil.com/assets/11-duplicate_lines.gif)\n<!-- more -->\n\n\n#### 2.扩大/缩小选择\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| alt+up/down | ctrl+w / ctrl+shift+w |\n\n以光标为基点,在上下文扩展选择的范围。例如:它将选择当前的变量,然后该语句,然后是这个方法等。\n![dumplicate](http://www.developerphil.com/assets/12-expand_shrink_selection.gif)\n\n#### 3.环绕(包装)\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+alt+t | ctrl+alt+t |\n\n这个操作可以包装一个结构的代码块。通常是一个 _if_ 语句,一个循环、一个 _try-catch_ 或者是一个 _runnable_。\n如果你什么都没选, 那么它只会包裹当前行。\n\n![dumplicate](http://www.developerphil.com/assets/13-surround_with.gif)\n\n#### 4.最近列表\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+e | ctrl+e |\n\n使用这个功能,你可以看到最近查看过的文件列表。\n\n![dumplicate](http://www.developerphil.com/assets/14-recents.gif)\n\n#### 5.自动代码\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+j | ctrl+j |\n\n它可以快速插入代码片段。更有趣的是它带有合理的默认值,并通过参数引导你完成插入。\n\n其他提示:\n- 如果你知道缩写,你也可以不用快捷方式。你仅仅需要如果缩写并且使用_Tab_key 完成即可。\n\n![dumplicate](http://www.developerphil.com/assets/15-live_templates.gif)\n\n\n#### 6.移动方法\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+alt+up/down | ctrl+shift+up/down |\n\n这是一个类似移动行的快捷方式,但是移动的是整个方法。没必要使用复制-粘贴,就可以上下移动方法。例如:你可以重新排序字段和内部类。\n\n![dumplicate](http://www.developerphil.com/assets/15-movemethods.gif)\n\n\n#### 7.完成语句\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+shift+enter | ctrl+shift+enter |\n\n它会自动生成丢失的代码来完成一条语句,它通常的使用情景是:\n- 添加一个分号在行的末尾,即时光标不在行尾\n- 在_if、while、for_的后面添加一个括号或者大括号\n- 添加一个大括号在方法声明之后\n\n其他提示:\n- 如果一条语句已经完成,它会进入下一行,即时光标没有在当前行的最后一个字符.\n![dumplicate](http://www.developerphil.com/assets/16-completestatement.gif)\n\n\n#### 8.最后一次编辑的位置\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| cmd+shift+backspace | ctrl+shift+backspace |\n\n它会让你浏览你最后一次修改的位置,这个和点击工具栏的返回按钮是不一样的。它会带你在你修改的历史记录中浏览。\n\n\n![dumplicate](http://www.developerphil.com/assets/17-navigate-previous-changes.gif)\n\n\n#### 9.整合行和文字\n\n| Mac |    Win&Linux |\n| :-- | :-- |\n| ctrl+shift+j | ctrl+shift+j |\n\n\n它能比你在行尾模拟删除键要做的更多,它可以保留当前的格式规则,并且它还可以:\n- 合并两个注释行,并且删除无用的_//_\n- 合并多行字符串,并且去除_+、\"\"_\n- 整合字段和任务\n\n其他提示:\n- 如果你选择了一个字符串,跨越多行,那么它就可以将其整合成一行\n\n![dumplicate](http://www.developerphil.com/assets/18-joinlines.gif)\n\n\n#### 10.查找\n\n| Mac | Win&Linux |\n| :-- | :-- |\n| alt+f1 | alt+f1 |\n\n\n获取当前文件,并且询问你在哪选择它。他可以在_project、structure_或者文件管理器中打开它。每一个动作都有一个数字或字母前缀,这是调用它的快捷方式。\n\n你可以从文件或者直接从_project_试图调用测方法。\n\n![dumplicate](http://www.developerphil.com/assets/19-select-in.gif)\n\n\n#### 11.展开/删除\n这个操作将会移除包裹的代码,它可以移除一个_if_语句、_while_ 循环、_try-catch_ 或者_runnable_ 。\n这和包裹的快捷方式是完全相反的。\n\n![dumplicate](http://www.developerphil.com/assets/20-unwrap.gif)","slug":"Android-Studio-Tips-of-the-Day(2)","published":1,"updated":"2016-10-10T06:53:44.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6ba0000s1giy3ru6z8w4","content":"<blockquote>\n<p>原作者：Philippe Breault<br>原文地址：<a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/\" target=\"_blank\" rel=\"external\">http://www.developerphil.com/…the-day-roundup-2/</a></p>\n</blockquote>\n<h4 id=\"关于快捷键\"><a href=\"#关于快捷键\" class=\"headerlink\" title=\"关于快捷键\"></a>关于快捷键</h4><p>Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过<em>Settings-&gt;KeyMap.</em></p>\n<h4 id=\"1-重复的行\"><a href=\"#1-重复的行\" class=\"headerlink\" title=\"1.重复的行\"></a>1.重复的行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+d</td>\n<td style=\"text-align:left\">ctrl+d</td>\n</tr>\n</tbody>\n</table>\n<p>它可以复制当前行并且粘贴它到下一行,不会影响剪切板的内容。</p>\n<p><img src=\"http://www.developerphil.com/assets/11-duplicate_lines.gif\" alt=\"dumplicate\"><br><a id=\"more\"></a></p>\n<h4 id=\"2-扩大-缩小选择\"><a href=\"#2-扩大-缩小选择\" class=\"headerlink\" title=\"2.扩大/缩小选择\"></a>2.扩大/缩小选择</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+up/down</td>\n<td style=\"text-align:left\">ctrl+w / ctrl+shift+w</td>\n</tr>\n</tbody>\n</table>\n<p>以光标为基点,在上下文扩展选择的范围。例如:它将选择当前的变量,然后该语句,然后是这个方法等。<br><img src=\"http://www.developerphil.com/assets/12-expand_shrink_selection.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"3-环绕-包装\"><a href=\"#3-环绕-包装\" class=\"headerlink\" title=\"3.环绕(包装)\"></a>3.环绕(包装)</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+alt+t</td>\n<td style=\"text-align:left\">ctrl+alt+t</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作可以包装一个结构的代码块。通常是一个 <em>if</em> 语句,一个循环、一个 <em>try-catch</em> 或者是一个 <em>runnable</em>。<br>如果你什么都没选, 那么它只会包裹当前行。</p>\n<p><img src=\"http://www.developerphil.com/assets/13-surround_with.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"4-最近列表\"><a href=\"#4-最近列表\" class=\"headerlink\" title=\"4.最近列表\"></a>4.最近列表</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+e</td>\n<td style=\"text-align:left\">ctrl+e</td>\n</tr>\n</tbody>\n</table>\n<p>使用这个功能,你可以看到最近查看过的文件列表。</p>\n<p><img src=\"http://www.developerphil.com/assets/14-recents.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"5-自动代码\"><a href=\"#5-自动代码\" class=\"headerlink\" title=\"5.自动代码\"></a>5.自动代码</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+j</td>\n<td style=\"text-align:left\">ctrl+j</td>\n</tr>\n</tbody>\n</table>\n<p>它可以快速插入代码片段。更有趣的是它带有合理的默认值,并通过参数引导你完成插入。</p>\n<p>其他提示:</p>\n<ul>\n<li>如果你知道缩写,你也可以不用快捷方式。你仅仅需要如果缩写并且使用_Tab_key 完成即可。</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/15-live_templates.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"6-移动方法\"><a href=\"#6-移动方法\" class=\"headerlink\" title=\"6.移动方法\"></a>6.移动方法</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+alt+up/down</td>\n<td style=\"text-align:left\">ctrl+shift+up/down</td>\n</tr>\n</tbody>\n</table>\n<p>这是一个类似移动行的快捷方式,但是移动的是整个方法。没必要使用复制-粘贴,就可以上下移动方法。例如:你可以重新排序字段和内部类。</p>\n<p><img src=\"http://www.developerphil.com/assets/15-movemethods.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"7-完成语句\"><a href=\"#7-完成语句\" class=\"headerlink\" title=\"7.完成语句\"></a>7.完成语句</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+enter</td>\n<td style=\"text-align:left\">ctrl+shift+enter</td>\n</tr>\n</tbody>\n</table>\n<p>它会自动生成丢失的代码来完成一条语句,它通常的使用情景是:</p>\n<ul>\n<li>添加一个分号在行的末尾,即时光标不在行尾</li>\n<li>在<em>if、while、for</em>的后面添加一个括号或者大括号</li>\n<li>添加一个大括号在方法声明之后</li>\n</ul>\n<p>其他提示:</p>\n<ul>\n<li>如果一条语句已经完成,它会进入下一行,即时光标没有在当前行的最后一个字符.<br><img src=\"http://www.developerphil.com/assets/16-completestatement.gif\" alt=\"dumplicate\"></li>\n</ul>\n<h4 id=\"8-最后一次编辑的位置\"><a href=\"#8-最后一次编辑的位置\" class=\"headerlink\" title=\"8.最后一次编辑的位置\"></a>8.最后一次编辑的位置</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+backspace</td>\n<td style=\"text-align:left\">ctrl+shift+backspace</td>\n</tr>\n</tbody>\n</table>\n<p>它会让你浏览你最后一次修改的位置,这个和点击工具栏的返回按钮是不一样的。它会带你在你修改的历史记录中浏览。</p>\n<p><img src=\"http://www.developerphil.com/assets/17-navigate-previous-changes.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"9-整合行和文字\"><a href=\"#9-整合行和文字\" class=\"headerlink\" title=\"9.整合行和文字\"></a>9.整合行和文字</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ctrl+shift+j</td>\n<td style=\"text-align:left\">ctrl+shift+j</td>\n</tr>\n</tbody>\n</table>\n<p>它能比你在行尾模拟删除键要做的更多,它可以保留当前的格式规则,并且它还可以:</p>\n<ul>\n<li>合并两个注释行,并且删除无用的<em>//</em></li>\n<li>合并多行字符串,并且去除<em>+、””</em></li>\n<li>整合字段和任务</li>\n</ul>\n<p>其他提示:</p>\n<ul>\n<li>如果你选择了一个字符串,跨越多行,那么它就可以将其整合成一行</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/18-joinlines.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"10-查找\"><a href=\"#10-查找\" class=\"headerlink\" title=\"10.查找\"></a>10.查找</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+f1</td>\n<td style=\"text-align:left\">alt+f1</td>\n</tr>\n</tbody>\n</table>\n<p>获取当前文件,并且询问你在哪选择它。他可以在<em>project、structure</em>或者文件管理器中打开它。每一个动作都有一个数字或字母前缀,这是调用它的快捷方式。</p>\n<p>你可以从文件或者直接从<em>project</em>试图调用测方法。</p>\n<p><img src=\"http://www.developerphil.com/assets/19-select-in.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"11-展开-删除\"><a href=\"#11-展开-删除\" class=\"headerlink\" title=\"11.展开/删除\"></a>11.展开/删除</h4><p>这个操作将会移除包裹的代码,它可以移除一个<em>if</em>语句、<em>while</em> 循环、<em>try-catch</em> 或者<em>runnable</em> 。<br>这和包裹的快捷方式是完全相反的。</p>\n<p><img src=\"http://www.developerphil.com/assets/20-unwrap.gif\" alt=\"dumplicate\"></p>\n","excerpt":"<blockquote>\n<p>原作者：Philippe Breault<br>原文地址：<a href=\"http://www.developerphil.com/android-studio-tips-of-the-day-roundup-2/\">http://www.developerphil.com/…the-day-roundup-2/</a></p>\n</blockquote>\n<h4 id=\"关于快捷键\"><a href=\"#关于快捷键\" class=\"headerlink\" title=\"关于快捷键\"></a>关于快捷键</h4><p>Android Studio 提供了不同的按键对应关系(在快捷键和动作之间的映射).你能看到你正在使用的案件映射，通过<em>Settings-&gt;KeyMap.</em></p>\n<h4 id=\"1-重复的行\"><a href=\"#1-重复的行\" class=\"headerlink\" title=\"1.重复的行\"></a>1.重复的行</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+d</td>\n<td style=\"text-align:left\">ctrl+d</td>\n</tr>\n</tbody>\n</table>\n<p>它可以复制当前行并且粘贴它到下一行,不会影响剪切板的内容。</p>\n<p><img src=\"http://www.developerphil.com/assets/11-duplicate_lines.gif\" alt=\"dumplicate\"><br>","more":"</p>\n<h4 id=\"2-扩大-缩小选择\"><a href=\"#2-扩大-缩小选择\" class=\"headerlink\" title=\"2.扩大/缩小选择\"></a>2.扩大/缩小选择</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+up/down</td>\n<td style=\"text-align:left\">ctrl+w / ctrl+shift+w</td>\n</tr>\n</tbody>\n</table>\n<p>以光标为基点,在上下文扩展选择的范围。例如:它将选择当前的变量,然后该语句,然后是这个方法等。<br><img src=\"http://www.developerphil.com/assets/12-expand_shrink_selection.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"3-环绕-包装\"><a href=\"#3-环绕-包装\" class=\"headerlink\" title=\"3.环绕(包装)\"></a>3.环绕(包装)</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+alt+t</td>\n<td style=\"text-align:left\">ctrl+alt+t</td>\n</tr>\n</tbody>\n</table>\n<p>这个操作可以包装一个结构的代码块。通常是一个 <em>if</em> 语句,一个循环、一个 <em>try-catch</em> 或者是一个 <em>runnable</em>。<br>如果你什么都没选, 那么它只会包裹当前行。</p>\n<p><img src=\"http://www.developerphil.com/assets/13-surround_with.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"4-最近列表\"><a href=\"#4-最近列表\" class=\"headerlink\" title=\"4.最近列表\"></a>4.最近列表</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+e</td>\n<td style=\"text-align:left\">ctrl+e</td>\n</tr>\n</tbody>\n</table>\n<p>使用这个功能,你可以看到最近查看过的文件列表。</p>\n<p><img src=\"http://www.developerphil.com/assets/14-recents.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"5-自动代码\"><a href=\"#5-自动代码\" class=\"headerlink\" title=\"5.自动代码\"></a>5.自动代码</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+j</td>\n<td style=\"text-align:left\">ctrl+j</td>\n</tr>\n</tbody>\n</table>\n<p>它可以快速插入代码片段。更有趣的是它带有合理的默认值,并通过参数引导你完成插入。</p>\n<p>其他提示:</p>\n<ul>\n<li>如果你知道缩写,你也可以不用快捷方式。你仅仅需要如果缩写并且使用_Tab_key 完成即可。</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/15-live_templates.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"6-移动方法\"><a href=\"#6-移动方法\" class=\"headerlink\" title=\"6.移动方法\"></a>6.移动方法</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+alt+up/down</td>\n<td style=\"text-align:left\">ctrl+shift+up/down</td>\n</tr>\n</tbody>\n</table>\n<p>这是一个类似移动行的快捷方式,但是移动的是整个方法。没必要使用复制-粘贴,就可以上下移动方法。例如:你可以重新排序字段和内部类。</p>\n<p><img src=\"http://www.developerphil.com/assets/15-movemethods.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"7-完成语句\"><a href=\"#7-完成语句\" class=\"headerlink\" title=\"7.完成语句\"></a>7.完成语句</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+enter</td>\n<td style=\"text-align:left\">ctrl+shift+enter</td>\n</tr>\n</tbody>\n</table>\n<p>它会自动生成丢失的代码来完成一条语句,它通常的使用情景是:</p>\n<ul>\n<li>添加一个分号在行的末尾,即时光标不在行尾</li>\n<li>在<em>if、while、for</em>的后面添加一个括号或者大括号</li>\n<li>添加一个大括号在方法声明之后</li>\n</ul>\n<p>其他提示:</p>\n<ul>\n<li>如果一条语句已经完成,它会进入下一行,即时光标没有在当前行的最后一个字符.<br><img src=\"http://www.developerphil.com/assets/16-completestatement.gif\" alt=\"dumplicate\"></li>\n</ul>\n<h4 id=\"8-最后一次编辑的位置\"><a href=\"#8-最后一次编辑的位置\" class=\"headerlink\" title=\"8.最后一次编辑的位置\"></a>8.最后一次编辑的位置</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">cmd+shift+backspace</td>\n<td style=\"text-align:left\">ctrl+shift+backspace</td>\n</tr>\n</tbody>\n</table>\n<p>它会让你浏览你最后一次修改的位置,这个和点击工具栏的返回按钮是不一样的。它会带你在你修改的历史记录中浏览。</p>\n<p><img src=\"http://www.developerphil.com/assets/17-navigate-previous-changes.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"9-整合行和文字\"><a href=\"#9-整合行和文字\" class=\"headerlink\" title=\"9.整合行和文字\"></a>9.整合行和文字</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ctrl+shift+j</td>\n<td style=\"text-align:left\">ctrl+shift+j</td>\n</tr>\n</tbody>\n</table>\n<p>它能比你在行尾模拟删除键要做的更多,它可以保留当前的格式规则,并且它还可以:</p>\n<ul>\n<li>合并两个注释行,并且删除无用的<em>//</em></li>\n<li>合并多行字符串,并且去除<em>+、””</em></li>\n<li>整合字段和任务</li>\n</ul>\n<p>其他提示:</p>\n<ul>\n<li>如果你选择了一个字符串,跨越多行,那么它就可以将其整合成一行</li>\n</ul>\n<p><img src=\"http://www.developerphil.com/assets/18-joinlines.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"10-查找\"><a href=\"#10-查找\" class=\"headerlink\" title=\"10.查找\"></a>10.查找</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Mac</th>\n<th style=\"text-align:left\">Win&amp;Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">alt+f1</td>\n<td style=\"text-align:left\">alt+f1</td>\n</tr>\n</tbody>\n</table>\n<p>获取当前文件,并且询问你在哪选择它。他可以在<em>project、structure</em>或者文件管理器中打开它。每一个动作都有一个数字或字母前缀,这是调用它的快捷方式。</p>\n<p>你可以从文件或者直接从<em>project</em>试图调用测方法。</p>\n<p><img src=\"http://www.developerphil.com/assets/19-select-in.gif\" alt=\"dumplicate\"></p>\n<h4 id=\"11-展开-删除\"><a href=\"#11-展开-删除\" class=\"headerlink\" title=\"11.展开/删除\"></a>11.展开/删除</h4><p>这个操作将会移除包裹的代码,它可以移除一个<em>if</em>语句、<em>while</em> 循环、<em>try-catch</em> 或者<em>runnable</em> 。<br>这和包裹的快捷方式是完全相反的。</p>\n<p><img src=\"http://www.developerphil.com/assets/20-unwrap.gif\" alt=\"dumplicate\"></p>"},{"title":"Android Studio升級2.2打包报错 - ...xxx-stripped.ap_ specified for property resourceFile does not exist","date":"2016-10-10T09:54:23.000Z","_content":"\n## 序言\n\n在升级了Android Studio 2.2 之后，使用Build -> Generate Signed Apk 打包apk报错，之前是一只没问题的，肯定是2.2的一些特性搞的鬼，google了一下，原来是 Instant Run 的问题。\n\n## 问题\n\n错误日志：\n\n``` bash\n \\build\\intermediates\\res\\xxx-stripped.ap_' specified for property 'resourceFile' does not exist\n```\n\n## 解决方案\n\nFiles -> Settings -> Build, Execution, Development -> Instant Run -- 把第一个勾选去掉\n\n![pPc68](http://i.stack.imgur.com/pPc68.png)\n\n## 总结\n\n首先说，我在module中使用了资源优化：\n\n``` xml\nbuildTypes {\n    release {\n        shrinkResources false\n        minifyEnabled false\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\n}\n```\n\n如果将 _shrinkResources_ 设置成 true 就需要通过上面提到的设置，如果设置为false就不需要关闭 instant run 的功能了，因为 instant run 不支持 shrinkResources。\n\n1. [stackoverflow的解决方案](http://stackoverflow.com/questions/36540676/build-intermediates-res-resources-anzhi-debug-stripped-ap-specified-for-prope)\n\n2. [官方描述：关于 Instant Run](http://tools.android.com/tech-docs/instant-run)","source":"_posts/Android-Studio升級2-2打包报错-xxx-stripped-ap-specified-for-property-resourceFile-does-not-exist.md","raw":"title: >-\n  Android Studio升級2.2打包报错 - ...xxx-stripped.ap_ specified for property\n  resourceFile does not exist\ndate: 2016-10-10 17:54:23\ncategories: [Android Studio]\ntags: [Android Studio2.2, xxx-stripped.ap_]\n---\n\n## 序言\n\n在升级了Android Studio 2.2 之后，使用Build -> Generate Signed Apk 打包apk报错，之前是一只没问题的，肯定是2.2的一些特性搞的鬼，google了一下，原来是 Instant Run 的问题。\n\n## 问题\n\n错误日志：\n\n``` bash\n \\build\\intermediates\\res\\xxx-stripped.ap_' specified for property 'resourceFile' does not exist\n```\n\n## 解决方案\n\nFiles -> Settings -> Build, Execution, Development -> Instant Run -- 把第一个勾选去掉\n\n![pPc68](http://i.stack.imgur.com/pPc68.png)\n\n## 总结\n\n首先说，我在module中使用了资源优化：\n\n``` xml\nbuildTypes {\n    release {\n        shrinkResources false\n        minifyEnabled false\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    }\n}\n```\n\n如果将 _shrinkResources_ 设置成 true 就需要通过上面提到的设置，如果设置为false就不需要关闭 instant run 的功能了，因为 instant run 不支持 shrinkResources。\n\n1. [stackoverflow的解决方案](http://stackoverflow.com/questions/36540676/build-intermediates-res-resources-anzhi-debug-stripped-ap-specified-for-prope)\n\n2. [官方描述：关于 Instant Run](http://tools.android.com/tech-docs/instant-run)","slug":"Android-Studio升級2-2打包报错-xxx-stripped-ap-specified-for-property-resourceFile-does-not-exist","published":1,"updated":"2016-10-11T10:09:56.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6ba3000w1giywgey6xvq","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>在升级了Android Studio 2.2 之后，使用Build -&gt; Generate Signed Apk 打包apk报错，之前是一只没问题的，肯定是2.2的一些特性搞的鬼，google了一下，原来是 Instant Run 的问题。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>错误日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\build\\intermediates\\res\\xxx-stripped.ap_<span class=\"string\">' specified for property '</span>resourceFile<span class=\"string\">' does not exist</span></div></pre></td></tr></table></figure>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>Files -&gt; Settings -&gt; Build, Execution, Development -&gt; Instant Run – 把第一个勾选去掉</p>\n<p><img src=\"http://i.stack.imgur.com/pPc68.png\" alt=\"pPc68\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>首先说，我在module中使用了资源优化：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildTypes &#123;</div><div class=\"line\">    release &#123;</div><div class=\"line\">        shrinkResources false</div><div class=\"line\">        minifyEnabled false</div><div class=\"line\">        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果将 <em>shrinkResources</em> 设置成 true 就需要通过上面提到的设置，如果设置为false就不需要关闭 instant run 的功能了，因为 instant run 不支持 shrinkResources。</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/36540676/build-intermediates-res-resources-anzhi-debug-stripped-ap-specified-for-prope\" target=\"_blank\" rel=\"external\">stackoverflow的解决方案</a></p>\n</li>\n<li><p><a href=\"http://tools.android.com/tech-docs/instant-run\" target=\"_blank\" rel=\"external\">官方描述：关于 Instant Run</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>在升级了Android Studio 2.2 之后，使用Build -&gt; Generate Signed Apk 打包apk报错，之前是一只没问题的，肯定是2.2的一些特性搞的鬼，google了一下，原来是 Instant Run 的问题。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>错误日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\build\\intermediates\\res\\xxx-stripped.ap_<span class=\"string\">' specified for property '</span>resourceFile<span class=\"string\">' does not exist</span></div></pre></td></tr></table></figure>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>Files -&gt; Settings -&gt; Build, Execution, Development -&gt; Instant Run – 把第一个勾选去掉</p>\n<p><img src=\"http://i.stack.imgur.com/pPc68.png\" alt=\"pPc68\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>首先说，我在module中使用了资源优化：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildTypes &#123;</div><div class=\"line\">    release &#123;</div><div class=\"line\">        shrinkResources false</div><div class=\"line\">        minifyEnabled false</div><div class=\"line\">        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果将 <em>shrinkResources</em> 设置成 true 就需要通过上面提到的设置，如果设置为false就不需要关闭 instant run 的功能了，因为 instant run 不支持 shrinkResources。</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/36540676/build-intermediates-res-resources-anzhi-debug-stripped-ap-specified-for-prope\">stackoverflow的解决方案</a></p>\n</li>\n<li><p><a href=\"http://tools.android.com/tech-docs/instant-run\">官方描述：关于 Instant Run</a></p>\n</li>\n</ol>\n"},{"title":"Android之Log混淆","date":"2015-11-18T08:38:59.000Z","_content":"作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？\n\n### 日志形式\n- **Java形式**\n```\nSystem.out.println(\" log for test \");\n```\n这个一般不提倡使用\n- **Android Log**\n```\nLog.d(TAG, \" log for test \");\n```\n这个是Android标准的日志输出类：android.util.Log\n\n### TAG定义\n关于TAG的命名简单说一下，基本上有以下几种形式：\n- **人名** \n```\nLog.d(\"gogh\" \" log for test \");\n```\n与代码无关，无法定位日志的位置\n- **类名**\n```\nprivate static final String TAG = LogUtils.class.getSimpleName();\nLog.d(TAG, \" log for test \");\n```\n经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。\n<!-- more -->\n\n### TAG定义推荐\n那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：\n```\npublic class Utils {\n    \n    public static final String TAG = \"Utils\";\n\n    public String setText(String text){\n        Logger.d(TAG, \" setText text = \" + text );\n        // do something\n    }\n}\n```\n基本的规范是：\n- **日志所在类**\n- **日志所在的方法**\n- **基本的信息**\n这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。\n\n### 屏蔽日志\n我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。\n#####运行时屏蔽\n这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：\n```\npublic class Logger {\n\n    private static final boolean ENABLE = \"true;\n    \n    public static void d(String tag, String message){\n        if(ENABLE){\n            android.util.Log.d(tag, message);\n        }\n    }\n}\n\nLogger.d(XXX, \"VERSION = \" + Build.VERSION.SDK_INT);\n```\n编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。\n\n##### 编译期屏蔽\n这个就很简单了，在打包发布的时候加入代码混淆，如下：\n```{bash}\n-assumenosideeffects class com.gogh.Logger{\n    public static *** i(...);\n}\n```\n但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：\n```{bash}\n-assumenosideeffects class android.util.Log {\n    public static *** v(...);\n    public static *** d(...);\n    public static *** i(...);\n    public static *** w(...);\n    public static *** e(...);\n}\n```\n这样就可以达到平日日志输出的效果了\n\n### 对比描述\n\n运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已\n\n编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段\n\n### 总结\n理论上编译期屏蔽相对于运行期屏蔽更优","source":"_posts/Android之Log混淆.md","raw":"title: Android之Log混淆\ndate: 2015-11-18 16:38:59\ncategories: [Android]\ntags: [Log]\n---\n作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？\n\n### 日志形式\n- **Java形式**\n```\nSystem.out.println(\" log for test \");\n```\n这个一般不提倡使用\n- **Android Log**\n```\nLog.d(TAG, \" log for test \");\n```\n这个是Android标准的日志输出类：android.util.Log\n\n### TAG定义\n关于TAG的命名简单说一下，基本上有以下几种形式：\n- **人名** \n```\nLog.d(\"gogh\" \" log for test \");\n```\n与代码无关，无法定位日志的位置\n- **类名**\n```\nprivate static final String TAG = LogUtils.class.getSimpleName();\nLog.d(TAG, \" log for test \");\n```\n经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。\n<!-- more -->\n\n### TAG定义推荐\n那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：\n```\npublic class Utils {\n    \n    public static final String TAG = \"Utils\";\n\n    public String setText(String text){\n        Logger.d(TAG, \" setText text = \" + text );\n        // do something\n    }\n}\n```\n基本的规范是：\n- **日志所在类**\n- **日志所在的方法**\n- **基本的信息**\n这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。\n\n### 屏蔽日志\n我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。\n#####运行时屏蔽\n这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：\n```\npublic class Logger {\n\n    private static final boolean ENABLE = \"true;\n    \n    public static void d(String tag, String message){\n        if(ENABLE){\n            android.util.Log.d(tag, message);\n        }\n    }\n}\n\nLogger.d(XXX, \"VERSION = \" + Build.VERSION.SDK_INT);\n```\n编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。\n\n##### 编译期屏蔽\n这个就很简单了，在打包发布的时候加入代码混淆，如下：\n```{bash}\n-assumenosideeffects class com.gogh.Logger{\n    public static *** i(...);\n}\n```\n但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：\n```{bash}\n-assumenosideeffects class android.util.Log {\n    public static *** v(...);\n    public static *** d(...);\n    public static *** i(...);\n    public static *** w(...);\n    public static *** e(...);\n}\n```\n这样就可以达到平日日志输出的效果了\n\n### 对比描述\n\n运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已\n\n编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段\n\n### 总结\n理论上编译期屏蔽相对于运行期屏蔽更优","slug":"Android之Log混淆","published":1,"updated":"2016-10-10T06:53:44.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6ba5000z1giykxwkebrp","content":"<p>作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？</p>\n<h3 id=\"日志形式\"><a href=\"#日志形式\" class=\"headerlink\" title=\"日志形式\"></a>日志形式</h3><ul>\n<li><strong>Java形式</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(&quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个一般不提倡使用</p>\n<ul>\n<li><strong>Android Log</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Log.d(TAG, &quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个是Android标准的日志输出类：android.util.Log</p>\n<h3 id=\"TAG定义\"><a href=\"#TAG定义\" class=\"headerlink\" title=\"TAG定义\"></a>TAG定义</h3><p>关于TAG的命名简单说一下，基本上有以下几种形式：</p>\n<ul>\n<li><strong>人名</strong> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Log.d(&quot;gogh&quot; &quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与代码无关，无法定位日志的位置</p>\n<ul>\n<li><strong>类名</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static final String TAG = LogUtils.class.getSimpleName();</div><div class=\"line\">Log.d(TAG, &quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。<br><a id=\"more\"></a></p>\n<h3 id=\"TAG定义推荐\"><a href=\"#TAG定义推荐\" class=\"headerlink\" title=\"TAG定义推荐\"></a>TAG定义推荐</h3><p>那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Utils &#123;</div><div class=\"line\">    </div><div class=\"line\">    public static final String TAG = &quot;Utils&quot;;</div><div class=\"line\"></div><div class=\"line\">    public String setText(String text)&#123;</div><div class=\"line\">        Logger.d(TAG, &quot; setText text = &quot; + text );</div><div class=\"line\">        // do something</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>基本的规范是：</p>\n<ul>\n<li><strong>日志所在类</strong></li>\n<li><strong>日志所在的方法</strong></li>\n<li><strong>基本的信息</strong><br>这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。</li>\n</ul>\n<h3 id=\"屏蔽日志\"><a href=\"#屏蔽日志\" class=\"headerlink\" title=\"屏蔽日志\"></a>屏蔽日志</h3><p>我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。</p>\n<p>#####运行时屏蔽<br>这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Logger &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final boolean ENABLE = &quot;true;</div><div class=\"line\">    </div><div class=\"line\">    public static void d(String tag, String message)&#123;</div><div class=\"line\">        if(ENABLE)&#123;</div><div class=\"line\">            android.util.Log.d(tag, message);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Logger.d(XXX, &quot;VERSION = &quot; + Build.VERSION.SDK_INT);</div></pre></td></tr></table></figure></p>\n<p>编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。</p>\n<h5 id=\"编译期屏蔽\"><a href=\"#编译期屏蔽\" class=\"headerlink\" title=\"编译期屏蔽\"></a>编译期屏蔽</h5><p>这个就很简单了，在打包发布的时候加入代码混淆，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-assumenosideeffects class com.gogh.Logger&#123;</div><div class=\"line\">    public static *** i(...);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-assumenosideeffects class android.util.Log &#123;</div><div class=\"line\">    public static *** v(...);</div><div class=\"line\">    public static *** d(...);</div><div class=\"line\">    public static *** i(...);</div><div class=\"line\">    public static *** w(...);</div><div class=\"line\">    public static *** e(...);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就可以达到平日日志输出的效果了</p>\n<h3 id=\"对比描述\"><a href=\"#对比描述\" class=\"headerlink\" title=\"对比描述\"></a>对比描述</h3><p>运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已</p>\n<p>编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理论上编译期屏蔽相对于运行期屏蔽更优</p>\n","excerpt":"<p>作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？</p>\n<h3 id=\"日志形式\"><a href=\"#日志形式\" class=\"headerlink\" title=\"日志形式\"></a>日志形式</h3><ul>\n<li><strong>Java形式</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(&quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个一般不提倡使用</p>\n<ul>\n<li><strong>Android Log</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Log.d(TAG, &quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个是Android标准的日志输出类：android.util.Log</p>\n<h3 id=\"TAG定义\"><a href=\"#TAG定义\" class=\"headerlink\" title=\"TAG定义\"></a>TAG定义</h3><p>关于TAG的命名简单说一下，基本上有以下几种形式：</p>\n<ul>\n<li><strong>人名</strong> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Log.d(&quot;gogh&quot; &quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与代码无关，无法定位日志的位置</p>\n<ul>\n<li><strong>类名</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static final String TAG = LogUtils.class.getSimpleName();</div><div class=\"line\">Log.d(TAG, &quot; log for test &quot;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。<br>","more":"</p>\n<h3 id=\"TAG定义推荐\"><a href=\"#TAG定义推荐\" class=\"headerlink\" title=\"TAG定义推荐\"></a>TAG定义推荐</h3><p>那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Utils &#123;</div><div class=\"line\">    </div><div class=\"line\">    public static final String TAG = &quot;Utils&quot;;</div><div class=\"line\"></div><div class=\"line\">    public String setText(String text)&#123;</div><div class=\"line\">        Logger.d(TAG, &quot; setText text = &quot; + text );</div><div class=\"line\">        // do something</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>基本的规范是：</p>\n<ul>\n<li><strong>日志所在类</strong></li>\n<li><strong>日志所在的方法</strong></li>\n<li><strong>基本的信息</strong><br>这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。</li>\n</ul>\n<h3 id=\"屏蔽日志\"><a href=\"#屏蔽日志\" class=\"headerlink\" title=\"屏蔽日志\"></a>屏蔽日志</h3><p>我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。</p>\n<p>#####运行时屏蔽<br>这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Logger &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final boolean ENABLE = &quot;true;</div><div class=\"line\">    </div><div class=\"line\">    public static void d(String tag, String message)&#123;</div><div class=\"line\">        if(ENABLE)&#123;</div><div class=\"line\">            android.util.Log.d(tag, message);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Logger.d(XXX, &quot;VERSION = &quot; + Build.VERSION.SDK_INT);</div></pre></td></tr></table></figure></p>\n<p>编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。</p>\n<h5 id=\"编译期屏蔽\"><a href=\"#编译期屏蔽\" class=\"headerlink\" title=\"编译期屏蔽\"></a>编译期屏蔽</h5><p>这个就很简单了，在打包发布的时候加入代码混淆，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-assumenosideeffects class com.gogh.Logger&#123;</div><div class=\"line\">    public static *** i(...);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-assumenosideeffects class android.util.Log &#123;</div><div class=\"line\">    public static *** v(...);</div><div class=\"line\">    public static *** d(...);</div><div class=\"line\">    public static *** i(...);</div><div class=\"line\">    public static *** w(...);</div><div class=\"line\">    public static *** e(...);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就可以达到平日日志输出的效果了</p>\n<h3 id=\"对比描述\"><a href=\"#对比描述\" class=\"headerlink\" title=\"对比描述\"></a>对比描述</h3><p>运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已</p>\n<p>编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理论上编译期屏蔽相对于运行期屏蔽更优</p>"},{"title":"Android之简单实现ButterKnife中的injectView的方案","date":"2015-11-13T01:37:14.000Z","_content":"\n首先说这里面用的知识点，注解、反射。\n\nAndroid中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。\n\n## 1、注解声明\n``` java\n\n// 表示用在字段上\n@Target(ElementType.FIELD)\n// 表示在生命周期是运行时\n@Retention(RetentionPolicy.RUNTIME)\n//注解类，实现findViewById功能\npublic @interface FindView {\n\tint findViewByResId() default 0;\n}\n\n```\n<!--more-->\n\n## 2、反射注入\n``` java\n\nClass<?> clazz = this.getClass();\n// 获得Activity中声明的字段\nField[] fields = clazz.getDeclaredFields();\n//遍历所有字段\nfor (Field field : fields) {\n// 是否有我们自定义的注解类标志\n  if (field.isAnnotationPresent(FindView.class)) {\n  \t   FindView inject = field.getAnnotation(FindView.class);\n      int mId = inject.findViewByResId();\n      View view;\n      if (mId > 0) {\n          view = findViewById(mId);\n          field.setAccessible(true);\n          field.set(this, view);// 给我们要找的字段设置值\n      }\n\t}\n}\n\n```\n## 3、测试\n``` java\n\n@FindView(findViewByResId = R.id.id_text)\nprivate TextView mText;\n\n```\n\n总结：\n是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。\n个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。","source":"_posts/Android之简单实现ButterKnife中的injectView的方案.md","raw":"title: Android之简单实现ButterKnife中的injectView的方案\ntags: [ButterKnife, InjectView, annotation]\ndate: 2015-11-13 09:37:14\ncategories: [Android]\n---\n\n首先说这里面用的知识点，注解、反射。\n\nAndroid中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。\n\n## 1、注解声明\n``` java\n\n// 表示用在字段上\n@Target(ElementType.FIELD)\n// 表示在生命周期是运行时\n@Retention(RetentionPolicy.RUNTIME)\n//注解类，实现findViewById功能\npublic @interface FindView {\n\tint findViewByResId() default 0;\n}\n\n```\n<!--more-->\n\n## 2、反射注入\n``` java\n\nClass<?> clazz = this.getClass();\n// 获得Activity中声明的字段\nField[] fields = clazz.getDeclaredFields();\n//遍历所有字段\nfor (Field field : fields) {\n// 是否有我们自定义的注解类标志\n  if (field.isAnnotationPresent(FindView.class)) {\n  \t   FindView inject = field.getAnnotation(FindView.class);\n      int mId = inject.findViewByResId();\n      View view;\n      if (mId > 0) {\n          view = findViewById(mId);\n          field.setAccessible(true);\n          field.set(this, view);// 给我们要找的字段设置值\n      }\n\t}\n}\n\n```\n## 3、测试\n``` java\n\n@FindView(findViewByResId = R.id.id_text)\nprivate TextView mText;\n\n```\n\n总结：\n是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。\n个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。","slug":"Android之简单实现ButterKnife中的injectView的方案","published":1,"updated":"2016-10-10T06:53:44.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6baa00141giy0qwq85o9","content":"<p>首先说这里面用的知识点，注解、反射。</p>\n<p>Android中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。</p>\n<h2 id=\"1、注解声明\"><a href=\"#1、注解声明\" class=\"headerlink\" title=\"1、注解声明\"></a>1、注解声明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 表示用在字段上</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</div><div class=\"line\"><span class=\"comment\">// 表示在生命周期是运行时</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"comment\">//注解类，实现findViewById功能</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FindView &#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findViewByResId</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"2、反射注入\"><a href=\"#2、反射注入\" class=\"headerlink\" title=\"2、反射注入\"></a>2、反射注入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class&lt;?&gt; clazz = <span class=\"keyword\">this</span>.getClass();</div><div class=\"line\"><span class=\"comment\">// 获得Activity中声明的字段</span></div><div class=\"line\">Field[] fields = clazz.getDeclaredFields();</div><div class=\"line\"><span class=\"comment\">//遍历所有字段</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Field field : fields) &#123;</div><div class=\"line\"><span class=\"comment\">// 是否有我们自定义的注解类标志</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (field.isAnnotationPresent(FindView.class)) &#123;</div><div class=\"line\">  \t   FindView inject = field.getAnnotation(FindView.class);</div><div class=\"line\">      <span class=\"keyword\">int</span> mId = inject.findViewByResId();</div><div class=\"line\">      View view;</div><div class=\"line\">      <span class=\"keyword\">if</span> (mId &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          view = findViewById(mId);</div><div class=\"line\">          field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">          field.set(<span class=\"keyword\">this</span>, view);<span class=\"comment\">// 给我们要找的字段设置值</span></div><div class=\"line\">      &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@FindView</span>(findViewByResId = R.id.id_text)</div><div class=\"line\"><span class=\"keyword\">private</span> TextView mText;</div></pre></td></tr></table></figure>\n<p>总结：<br>是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。<br>个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。</p>\n","excerpt":"<p>首先说这里面用的知识点，注解、反射。</p>\n<p>Android中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。</p>\n<h2 id=\"1、注解声明\"><a href=\"#1、注解声明\" class=\"headerlink\" title=\"1、注解声明\"></a>1、注解声明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 表示用在字段上</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</div><div class=\"line\"><span class=\"comment\">// 表示在生命周期是运行时</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"comment\">//注解类，实现findViewById功能</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> FindView &#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findViewByResId</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h2 id=\"2、反射注入\"><a href=\"#2、反射注入\" class=\"headerlink\" title=\"2、反射注入\"></a>2、反射注入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class&lt;?&gt; clazz = <span class=\"keyword\">this</span>.getClass();</div><div class=\"line\"><span class=\"comment\">// 获得Activity中声明的字段</span></div><div class=\"line\">Field[] fields = clazz.getDeclaredFields();</div><div class=\"line\"><span class=\"comment\">//遍历所有字段</span></div><div class=\"line\"><span class=\"keyword\">for</span> (Field field : fields) &#123;</div><div class=\"line\"><span class=\"comment\">// 是否有我们自定义的注解类标志</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (field.isAnnotationPresent(FindView.class)) &#123;</div><div class=\"line\">  \t   FindView inject = field.getAnnotation(FindView.class);</div><div class=\"line\">      <span class=\"keyword\">int</span> mId = inject.findViewByResId();</div><div class=\"line\">      View view;</div><div class=\"line\">      <span class=\"keyword\">if</span> (mId &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          view = findViewById(mId);</div><div class=\"line\">          field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">          field.set(<span class=\"keyword\">this</span>, view);<span class=\"comment\">// 给我们要找的字段设置值</span></div><div class=\"line\">      &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@FindView</span>(findViewByResId = R.id.id_text)</div><div class=\"line\"><span class=\"keyword\">private</span> TextView mText;</div></pre></td></tr></table></figure>\n<p>总结：<br>是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。<br>个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。</p>"},{"title":"Android之Matrix","date":"2016-02-19T07:11:37.000Z","_content":"\n> 原作者： Qiengo\n> 源地址： [点击跳转](http://www.cnblogs.com/qiengo/archive/2012/06/30/2570874.html)\n\n\n## Matrix的数学原理\n\n在Android中，如果你用Matrix进行过图像处理，那么一定知道Matrix这个类。Android中的Matrix是一个3 x 3的矩阵，其内容如下：\n![matrix_iamge_description][0]\n\nMatrix的对图像的处理可分为四类基本变换：\n\n- Translate - 平移变换\n- Rotate - 旋转变换\n- Scale - 缩放变换\n- Skew - 错切变换\n\n\n从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。同时，在Android的文档中，未见到用Matrix进行透视变换的相关说明，所以本文也不讨论这方面的问题。\n\n针对每种变换，Android提供了pre、set和post三种操作方式。其中：\n\n- set - 用于设置Matrix中的值。\n- pre - 是先乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。先乘相当于矩阵运算中的右乘。\n- post - 是后乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。后乘相当于矩阵运算中的左乘。\n\n除平移变换(Translate)外，旋转变换(Rotate)、缩放变换(Scale)和错切变换(Skew)都可以围绕一个中心点来进行，如果不指定，在默认情况下是围绕(0, 0)来进行相应的变换的。\n\n\n下面我们来看看四种变换的具体情形。由于所有的图形都是有点组成，因此我们只需要考察一个点相关变换即可。\n<!-- more -->\n \n### 一、 平移变换\n---\n假定有一个点的坐标是 ，将其移动到 ，再假定在x轴和y轴方向移动的大小分别为：\n![translate][11]\n\n如下图所示：\n![translate_sample][12]\n\n不难知道：\n![translate_result][13]\n\n如果用矩阵来表示的话，就可以写成：\n![translate_tips][14]\n \n\n### 二、 旋转变换\n---\n\n#### 2.1    围绕坐标原点旋转：\n\n假定有一个点 ，相对坐标原点顺时针旋转后的情形，同时假定P点离坐标原点的距离为r，如下图：\n![translate_tips][21]\n\n那么，\n![translate_tips][22]\n\n如果用矩阵，就可以表示为：\n![translate_tips][23]\n\n\n#### 2.2    围绕某个点旋转\n\n如果是围绕某个点顺时针旋转，那么可以用矩阵表示为：\n![translate_tips][24]\n\n可以化为：\n![translate_tips][25]\n\n很显然，\n\n**1.**   \n![translate_tips][26] 是将坐标原点移动到点后， 的新坐标。\n\n**2.**     \n\n![translate_tips][27] 是将上一步变换后的，围绕新的坐标原点顺时针旋转 。\n\n**3.**     \n![translate_tips][28] 经过上一步旋转变换后，再将坐标原点移回到原来的坐标原点。\n\n所以，围绕某一点进行旋转变换，可以分成3个步骤，即首先将坐标原点移至该点，然后围绕新的坐标原点进行旋转变换，再然后将坐标原点移回到原先的坐标原点。\n\n \n\n### 三、 缩放变换\n---\n\n理论上而言，一个点是不存在什么缩放变换的，但考虑到所有图像都是由点组成，因此，如果图像在x轴和y轴方向分别放大k1和k2倍的话，那么图像中的所有点的x坐标和y坐标均会分别放大k1和k2倍，即\n\n\n\n用矩阵表示就是：\n![translate_tips][31]\n\n缩放变换比较好理解，就不多说了。\n![translate_tips][32]\n\n### 四、 错切变换\n---\n\n错切变换(skew)在数学上又称为Shear mapping(可译为“剪切变换”)或者Transvection(缩并)，它是一种比较特殊的线性变换。错切变换的效果就是让所有点的x坐标(或者y坐标)保持不变，而对应的y坐标(或者x坐标)则按比例发生平移，且平移的大小和该点到x轴(或y轴)的垂直距离成正比。错切变换，属于等面积变换，即一个形状在错切变换的前后，其面积是相等的。\n\n比如下图，各点的y坐标保持不变，但其x坐标则按比例发生了平移。这种情况将水平错切。\n![translate_tips][41]\n\n\n下图各点的x坐标保持不变，但其y坐标则按比例发生了平移。这种情况叫垂直错切。\n![translate_tips][42]\n \n假定一个点经过错切变换后得到，对于水平错切而言，应该有如下关系：\n![translate_tips][43]\n\n用矩阵表示就是：\n![translate_tips][44]\n\n扩展到3 x 3的矩阵就是下面这样的形式：\n![translate_tips][45]\n \n同理，对于垂直错切，可以有：\n![translate_tips][46]\n\n在数学上严格的错切变换就是上面这样的。在Android中除了有上面说到的情况外，还可以同时进行水平、垂直错切，那么形式上就是：\n![translate_tips][47]\n\n\n### 五、 对称变换\n---\n\n除了上面讲到的4中基本变换外，事实上，我们还可以利用Matrix，进行对称变换。所谓对称变换，就是经过变化后的图像和原图像是关于某个对称轴是对称的。比如，某点 经过对称变换后得到，\n\n如果对称轴是x轴，难么，\n![translate_tips][51]\n\n用矩阵表示就是：\n![translate_tips][52]\n\n如果对称轴是y轴，那么，\n![translate_tips][53]\n\n用矩阵表示就是：\n![translate_tips][54]\n\n如果对称轴是y = x，如图：\n![translate_tips][55]\n\n那么，\n![translate_tips][56]\n\n很容易可以解得：\n![translate_tips][57]\n\n用矩阵表示就是：\n![translate_tips][58]\n\n同样的道理，如果对称轴是y = -x，那么用矩阵表示就是：\n![translate_tips][59]\n \n特殊地，如果对称轴是y = kx，如下图：\n![translate_tips][60]\n\n那么，\n![translate_tips][61]\n\n很容易可解得：\n![translate_tips][62]\n\n用矩阵表示就是：\n![translate_tips][63]\n\n当k = 0时，即y = 0，也就是对称轴为x轴的情况；当k趋于无穷大时，即x = 0，也就是对称轴为y轴的情况；当k =1时，即y = x，也就是对称轴为y = x的情况；当k = -1时，即y = -x，也就是对称轴为y = -x的情况。不难验证，这和我们前面说到的4中具体情况是相吻合的。\n\n如果对称轴是y = kx + b这样的情况，只需要在上面的基础上增加两次平移变换即可，即先将坐标原点移动到(0, b)，然后做上面的关于y = kx的对称变换，再然后将坐标原点移回到原来的坐标原点即可。用矩阵表示大致是这样的：\n![translate_tips][64]\n\n需要特别注意：在实际编程中，我们知道屏幕的y坐标的正向和数学中y坐标的正向刚好是相反的，所以在数学上y = x和屏幕上的y = -x才是真正的同一个东西，反之亦然。也就是说，如果要使图片在屏幕上看起来像按照数学意义上y = x对称，那么需使用这种转换：\n![translate_tips][65]\n\n要使图片在屏幕上看起来像按照数学意义上y = -x对称，那么需使用这种转换：\n![translate_tips][66]\n\n关于对称轴为y = kx 或y = kx + b的情况，同样需要考虑这方面的问题。\n\n\n\n## 第二部分 代码验证\n\n在第一部分中讲到的各种图像变换的验证代码如下，一共列出了10种情况。如果要验证其中的某一种情况，只需将相应的代码反注释即可。试验中用到的图片：\n![][100]\n其尺寸为162 x 251。\n\n每种变换的结果，请见代码之后的说明。\n\n``` java\npackage com.pat.testtransformmatrix;  \n  \nimport android.app.Activity;  \nimport android.content.Context;  \nimport android.graphics.Bitmap;  \nimport android.graphics.BitmapFactory;  \nimport android.graphics.Canvas;  \nimport android.graphics.Matrix;  \nimport android.os.Bundle;  \nimport android.util.Log;  \nimport android.view.MotionEvent;  \nimport android.view.View;  \nimport android.view.Window;  \nimport android.view.WindowManager;  \nimport android.view.View.OnTouchListener;  \nimport android.widget.ImageView;  \n  \npublic class TestTransformMatrixActivity extends Activity  \nimplements  \nOnTouchListener  \n{  \n    private TransformMatrixView view;  \n    @Override  \n    public void onCreate(Bundle savedInstanceState)  \n    {  \n        super.onCreate(savedInstanceState);  \n        requestWindowFeature(Window.FEATURE_NO_TITLE);  \n        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);  \n  \n        view = new TransformMatrixView(this);  \n        view.setScaleType(ImageView.ScaleType.MATRIX);  \n        view.setOnTouchListener(this);  \n          \n        setContentView(view);  \n    }  \n      \n    class TransformMatrixView extends ImageView  \n    {  \n        private Bitmap bitmap;  \n        private Matrix matrix;  \n        public TransformMatrixView(Context context)  \n        {  \n            super(context);  \n            bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.sophie);  \n            matrix = new Matrix();  \n        }  \n  \n        @Override  \n        protected void onDraw(Canvas canvas)  \n        {  \n            // 画出原图像  \n            canvas.drawBitmap(bitmap, 0, 0, null);  \n            // 画出变换后的图像  \n            canvas.drawBitmap(bitmap, matrix, null);  \n            super.onDraw(canvas);  \n        }  \n  \n        @Override  \n        public void setImageMatrix(Matrix matrix)  \n        {  \n            this.matrix.set(matrix);  \n            super.setImageMatrix(matrix);  \n        }  \n          \n        public Bitmap getImageBitmap()  \n        {  \n            return bitmap;  \n        }  \n    }  \n  \n    public boolean onTouch(View v, MotionEvent e)  \n    {  \n        if(e.getAction() == MotionEvent.ACTION_UP)  \n        {  \n            Matrix matrix = new Matrix();  \n            // 输出图像的宽度和高度(162 x 251)  \n            Log.e(\"TestTransformMatrixActivity\", \"image size: width x height = \" +  view.getImageBitmap().getWidth() + \" x \" + view.getImageBitmap().getHeight());  \n            // 1. 平移  \n            matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  \n            // 在x方向平移view.getImageBitmap().getWidth()，在y轴方向view.getImageBitmap().getHeight()  \n            view.setImageMatrix(matrix);  \n              \n            // 下面的代码是为了查看matrix中的元素  \n            float[] matrixValues = new float[9];  \n            matrix.getValues(matrixValues);  \n            for(int i = 0; i < 3; ++i)  \n            {  \n                String temp = new String();  \n                for(int j = 0; j < 3; ++j)  \n                {  \n                    temp += matrixValues[3 * i + j ] + \"\\t\";  \n                }  \n                Log.e(\"TestTransformMatrixActivity\", temp);  \n            }  \n              \n  \n//          // 2. 旋转(围绕图像的中心点)  \n//          matrix.setRotate(45f, view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  \n//          matrix.postTranslate(view.getImageBitmap().getWidth() * 1.5f, 0f);  \n//          view.setImageMatrix(matrix);  \n//  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n              \n//          // 3. 旋转(围绕坐标原点) + 平移(效果同2)  \n//          matrix.setRotate(45f);  \n//          matrix.preTranslate(-1f * view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight() / 2f);  \n//          matrix.postTranslate((float)view.getImageBitmap().getWidth() / 2f, (float)view.getImageBitmap().getHeight() / 2f);  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  \n//          matrix.postTranslate((float)view.getImageBitmap().getWidth() * 1.5f, 0f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }             \n              \n//          // 4. 缩放  \n//          matrix.setScale(2f, 2f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  \n//          matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n  \n              \n//          // 5. 错切 - 水平  \n//          matrix.setSkew(0.5f, 0f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠           \n//          matrix.postTranslate(view.getImageBitmap().getWidth(), 0f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n//          // 6. 错切 - 垂直  \n//          matrix.setSkew(0f, 0.5f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               \n//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }             \n              \n//          7. 错切 - 水平 + 垂直  \n//          matrix.setSkew(0.5f, 0.5f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               \n//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n//          // 8. 对称 (水平对称)  \n//          float matrix_values[] = {1f, 0f, 0f, 0f, -1f, 0f, 0f, 0f, 1f};  \n//          matrix.setValues(matrix_values);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   \n//          matrix.postTranslate(0f, view.getImageBitmap().getHeight() * 2f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }             \n              \n//          // 9. 对称 - 垂直  \n//          float matrix_values[] = {-1f, 0f, 0f, 0f, 1f, 0f, 0f, 0f, 1f};  \n//          matrix.setValues(matrix_values);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }     \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   \n//          matrix.postTranslate(view.getImageBitmap().getWidth() * 2f, 0f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n  \n              \n//          // 10. 对称(对称轴为直线y = x)  \n//          float matrix_values[] = {0f, -1f, 0f, -1f, 0f, 0f, 0f, 0f, 1f};  \n//          matrix.setValues(matrix_values);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               \n//          matrix.postTranslate(view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth(),   \n//                  view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n            view.invalidate();  \n        }  \n        return true;  \n    }  \n}  \n```\n\n下面给出上述代码中，各种变换的具体结果及其对应的相关变换矩阵\n\n### 1.平移\n![][101]\n\n输出的结果：\n![][102]\n\n请对照第一部分中的“一、平移变换”所讲的情形，考察上述矩阵的正确性。\n\n\n### 2.旋转(围绕图像的中心点)\n---\n![][201]\n\n输出的结果：\n![][202]\n\n它实际上是\n``` java\nmatrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);\nmatrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);\n```\n\n这两条语句综合作用的结果。根据第一部分中“二、旋转变换”里面关于围绕某点旋转的公式，\n``` java\nmatrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);\n```\n\n所产生的转换矩阵就是：\n![][203]\n\n而\n``` java\nmatrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);\n``` \n的意思就是在上述矩阵的左边再乘以下面的矩阵：\n![][204]\n\n关于post是左乘这一点，我们在前面的理论部分曾经提及过，后面我们还会专门讨论这个问题。\n所以它实际上就是：\n![][205]\n\n出去计算上的精度误差，我们可以看到我们计算出来的结果，和程序直接输出的结果是一致的。\n\n \n### 3.旋转(围绕坐标原点旋转，在加上两次平移，效果同2)\n---\n![][301]\n\n根据第一部分中“二、旋转变换”里面关于围绕某点旋转的解释，不难知道：\n``` java\nmatrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);\n```\n等价于\n``` java\nmatrix.setRotate(45f);\nmatrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f *view.getImageBitmap().getHeight() / 2f);\nmatrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f);\n```\n\n其中`matrix.setRotate(45f)`对应的矩阵是：\n![][302]\n\n``` java\nmatrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight()/ 2f)\n```\n对应的矩阵是：\n![][303]\n\n由于是preTranslate，是先乘，也就是右乘，即它应该出现在`matrix.setRotate(45f)`所对应矩阵的右侧。\n\n``` java\nmatrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f)\n```\n对应的矩阵是：\n![][304]\n\n这次由于是postTranslate，是后乘，也就是左乘，即它应该出现在`matrix.setRotate(45f)`所对应矩阵的左侧。\n\n所以综合起来，\n``` java\nmatrix.setRotate(45f);\nmatrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f *view.getImageBitmap().getHeight() / 2f);\nmatrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f);\n```\n对应的矩阵就是：\n![][305]\n\n这和下面这个矩阵(围绕图像中心顺时针旋转45度)其实是一样的：\n![][306]\n\n因此，此处变换后的图像和2中变换后的图像时一样的。\n![][307]\n\n### 4.缩放变换\n---\n![][401]\n\n程序所输出的两个矩阵分别是：\n![][402]\n\n其中第二个矩阵，其实是下面两个矩阵相乘的结果：\n![][403]\n\n大家可以对照第一部分中的“三、缩放变换”和“一、平移变换”说法，自行验证结果。\n\n\n### 5.错切变换(水平错切)\n---\n![][501]\n\n代码所输出的两个矩阵分别是：\n![][502]\n\n其中，第二个矩阵其实是下面两个矩阵相乘的结果：\n![][503]\n\n大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 6.错切变换(垂直错切)\n---\n![][601]\n\n代码所输出的两个矩阵分别是：\n![][602]\n\n其中，第二个矩阵其实是下面两个矩阵相乘的结果：\n![][603]\n\n大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 7.错切变换(水平+垂直错切)\n---\n![][701]\n\n代码所输出的两个矩阵分别是：\n![][702]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][703]\n\n大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 8.对称变换(水平对称)\n---\n![][801]\n\n代码所输出的两个各矩阵分别是：\n![][802]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][803]\n \n大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。\n\n \n### 9.对称变换(垂直对称)\n---\n![][901]\n\n代码所输出的两个矩阵分别是：\n![][902]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][903]\n\n大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 10.对称变换(对称轴为直线y = x)\n---\n![][103]\n\n代码所输出的两个矩阵分别是：\n![][104]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][105]\n \n大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。\n\n \n### 11.关于先乘和后乘的问题\n---\n由于矩阵的乘法运算不满足交换律，我们在前面曾经多次提及先乘、后乘的问题，即先乘就是矩阵运算中右乘，后乘就是矩阵运算中的左乘。其实先乘、后乘的概念是针对变换操作的时间先后而言的，左乘、右乘是针对矩阵运算的左右位置而言的。以第一部分“二、旋转变换”中围绕某点旋转的情况为例：\n![][110]\n\n越靠近原图像中像素的矩阵，越先乘，越远离原图像中像素的矩阵，越后乘。事实上，图像处理时，矩阵的运算是从右边往左边方向进行运算的。这就形成了越在右边的矩阵(右乘)，越先运算(先乘)，反之亦然。\n\n当然，在实际中，如果首先指定了一个matrix，比如我们先setRotate()，即指定了上面变换矩阵中，中间的那个矩阵，那么后续的矩阵到底是pre还是post运算，都是相对这个中间矩阵而言的。\n\n\n\n\n\n[0]: http://hi.csdn.net/attachment/201111/19/0_13217092330d9Q.gif\n\n[11]: http://hi.csdn.net/attachment/201111/19/0_1321709352RQ75.gif\n[12]: http://hi.csdn.net/attachment/201111/19/0_1321709520MmsS.gif\n[13]: http://hi.csdn.net/attachment/201111/19/0_1321709527kmK6.gif\n[14]: http://hi.csdn.net/attachment/201111/19/0_1321709536Otg4.gif\n\n\n[21]: http://hi.csdn.net/attachment/201111/19/0_132170975189NC.gif\n[22]: http://hi.csdn.net/attachment/201111/19/0_1321709797SBJW.gif\n[23]: http://hi.csdn.net/attachment/201111/19/0_1321709849ZLVc.gif\n[24]: http://hi.csdn.net/attachment/201111/19/0_13217100380220.gif\n[25]: http://hi.csdn.net/attachment/201111/19/0_13217100952Vqv.gif\n[26]: http://hi.csdn.net/attachment/201111/19/0_1321710153kurQ.gif\n[27]: http://hi.csdn.net/attachment/201111/19/0_1321710301T9nf.gif\n[28]: http://hi.csdn.net/attachment/201111/19/0_1321710398Z3Je.gif\n\n\n[31]: http://hi.csdn.net/attachment/201111/19/0_1321710517pb9W.gif\n[32]: http://hi.csdn.net/attachment/201111/19/0_1321710615riwr.gif\n\n\n[41]: http://hi.csdn.net/attachment/201111/19/0_1321710625smm5.gif\n[42]: http://hi.csdn.net/attachment/201111/19/0_1321710790633H.gif\n[43]: http://hi.csdn.net/attachment/201111/19/0_1321710798y5L6.gif\n[44]: http://hi.csdn.net/attachment/201111/19/0_13217108084B3T.gif\n[45]: http://hi.csdn.net/attachment/201111/19/0_13217108954sms.gif\n[46]: http://hi.csdn.net/attachment/201111/19/0_13217109074Nv2.gif\n[47]: http://hi.csdn.net/attachment/201111/19/0_1321711018S31a.gif\n\n\n[51]: http://hi.csdn.net/attachment/201111/19/0_1321711026LZ03.gif\n[52]: http://hi.csdn.net/attachment/201111/19/0_1321711090fhGd.gif\n[53]: http://hi.csdn.net/attachment/201111/19/0_1321711099Xhak.gif\n[54]: http://hi.csdn.net/attachment/201111/19/0_1321711217oHNz.gif\n[55]: http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\n[56]: http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\n[57]: http://hi.csdn.net/attachment/201111/19/0_1321711261E6xG.gif\n[58]: http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\n[59]: http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\n[60]: http://hi.csdn.net/attachment/201111/19/0_13217113506Hb8.gif\n[61]: http://hi.csdn.net/attachment/201111/19/0_1321711502QQ7A.gif\n[62]: http://hi.csdn.net/attachment/201111/19/0_1321711521GZlt.gif\n[63]: http://hi.csdn.net/attachment/201111/19/0_1321711541FJA1.gif\n[64]: http://hi.csdn.net/attachment/201111/19/0_1321711616I9SJ.gif\n[65]: http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\n[66]: http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\n\n\n[100]: http://hi.csdn.net/attachment/201111/19/0_13217122673338.gif\n\n\n[101]: http://hi.csdn.net/attachment/201111/19/0_1321712352qQRu.gif\n[102]: http://hi.csdn.net/attachment/201111/19/0_13217123565Wwz.gif\n\n[200]: http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\n[201]: http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\n[202]: http://hi.csdn.net/attachment/201111/19/0_1321712512Yj1i.gif\n[203]: http://hi.csdn.net/attachment/201111/19/0_1321712644I54M.gif\n[204]: http://hi.csdn.net/attachment/201111/19/0_13217126508k4V.gif\n[205]: http://hi.csdn.net/attachment/201111/19/0_13217126608wdT.gif\n\n\n[301]: http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\n[302]: http://hi.csdn.net/attachment/201111/19/0_1321712949GjN7.gif\n[303]: http://hi.csdn.net/attachment/201111/19/0_1321712956BNj8.gif\n[304]: http://hi.csdn.net/attachment/201111/19/0_1321712963iNO1.gif\n[305]: http://hi.csdn.net/attachment/201111/19/0_1321713055HOOt.gif\n[306]: http://hi.csdn.net/attachment/201111/19/0_1321713100VIOz.gif\n\n\n[401]: http://hi.csdn.net/attachment/201111/19/0_1321713185yKS7.gif\n[402]: http://hi.csdn.net/attachment/201111/19/0_13217131941R24.gif\n[403]: http://hi.csdn.net/attachment/201111/19/0_1321713201VRxs.gif\n\n\n[501]: http://hi.csdn.net/attachment/201111/19/0_132171330766G0.gif\n[502]: http://hi.csdn.net/attachment/201111/19/0_1321713314Dk69.gif\n[503]: http://hi.csdn.net/attachment/201111/19/0_1321713322PeML.gif\n\n\n[601]: http://hi.csdn.net/attachment/201111/19/0_1321713502Akg2.gif\n[602]: http://hi.csdn.net/attachment/201111/19/0_1321713509Hz7p.gif\n[603]: http://hi.csdn.net/attachment/201111/19/0_1321713516TUvx.gif\n\n\n[701]: http://hi.csdn.net/attachment/201111/19/0_1321713655Qsij.gif\n[702]: http://hi.csdn.net/attachment/201111/19/0_13217136824kKR.gif\n[703]: http://hi.csdn.net/attachment/201111/19/0_13217136931vl4.gif\n\n\n[801]: http://hi.csdn.net/attachment/201111/19/0_13217141232rJI.gif\n[802]: http://hi.csdn.net/attachment/201111/19/0_1321714133P0ha.gif\n[803]: http://hi.csdn.net/attachment/201111/19/0_13217141417Bi3.gif\n\n\n[901]: http://hi.csdn.net/attachment/201111/19/0_1321714261NN3V.gif\n[902]: http://hi.csdn.net/attachment/201111/19/0_1321714269Kqs4.gif\n[903]: http://hi.csdn.net/attachment/201111/19/0_1321714276ai2f.gif\n\n\n[103]: http://hi.csdn.net/attachment/201111/19/0_13217144950030.gif\n[104]: http://hi.csdn.net/attachment/201111/19/0_13217145038hN8.gif\n[105]: http://hi.csdn.net/attachment/201111/19/0_1321714509sBN4.gif\n\n\n[110]: http://hi.csdn.net/attachment/201111/19/0_1321714645396z.gif\n\n\n\n\n\n\n\n\n","source":"_posts/Android之Matrix.md","raw":"title: Android之Matrix\ndate: 2016-02-19 15:11:37\ncategories: [Android]\ntags: [Matrix]\n---\n\n> 原作者： Qiengo\n> 源地址： [点击跳转](http://www.cnblogs.com/qiengo/archive/2012/06/30/2570874.html)\n\n\n## Matrix的数学原理\n\n在Android中，如果你用Matrix进行过图像处理，那么一定知道Matrix这个类。Android中的Matrix是一个3 x 3的矩阵，其内容如下：\n![matrix_iamge_description][0]\n\nMatrix的对图像的处理可分为四类基本变换：\n\n- Translate - 平移变换\n- Rotate - 旋转变换\n- Scale - 缩放变换\n- Skew - 错切变换\n\n\n从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。同时，在Android的文档中，未见到用Matrix进行透视变换的相关说明，所以本文也不讨论这方面的问题。\n\n针对每种变换，Android提供了pre、set和post三种操作方式。其中：\n\n- set - 用于设置Matrix中的值。\n- pre - 是先乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。先乘相当于矩阵运算中的右乘。\n- post - 是后乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。后乘相当于矩阵运算中的左乘。\n\n除平移变换(Translate)外，旋转变换(Rotate)、缩放变换(Scale)和错切变换(Skew)都可以围绕一个中心点来进行，如果不指定，在默认情况下是围绕(0, 0)来进行相应的变换的。\n\n\n下面我们来看看四种变换的具体情形。由于所有的图形都是有点组成，因此我们只需要考察一个点相关变换即可。\n<!-- more -->\n \n### 一、 平移变换\n---\n假定有一个点的坐标是 ，将其移动到 ，再假定在x轴和y轴方向移动的大小分别为：\n![translate][11]\n\n如下图所示：\n![translate_sample][12]\n\n不难知道：\n![translate_result][13]\n\n如果用矩阵来表示的话，就可以写成：\n![translate_tips][14]\n \n\n### 二、 旋转变换\n---\n\n#### 2.1    围绕坐标原点旋转：\n\n假定有一个点 ，相对坐标原点顺时针旋转后的情形，同时假定P点离坐标原点的距离为r，如下图：\n![translate_tips][21]\n\n那么，\n![translate_tips][22]\n\n如果用矩阵，就可以表示为：\n![translate_tips][23]\n\n\n#### 2.2    围绕某个点旋转\n\n如果是围绕某个点顺时针旋转，那么可以用矩阵表示为：\n![translate_tips][24]\n\n可以化为：\n![translate_tips][25]\n\n很显然，\n\n**1.**   \n![translate_tips][26] 是将坐标原点移动到点后， 的新坐标。\n\n**2.**     \n\n![translate_tips][27] 是将上一步变换后的，围绕新的坐标原点顺时针旋转 。\n\n**3.**     \n![translate_tips][28] 经过上一步旋转变换后，再将坐标原点移回到原来的坐标原点。\n\n所以，围绕某一点进行旋转变换，可以分成3个步骤，即首先将坐标原点移至该点，然后围绕新的坐标原点进行旋转变换，再然后将坐标原点移回到原先的坐标原点。\n\n \n\n### 三、 缩放变换\n---\n\n理论上而言，一个点是不存在什么缩放变换的，但考虑到所有图像都是由点组成，因此，如果图像在x轴和y轴方向分别放大k1和k2倍的话，那么图像中的所有点的x坐标和y坐标均会分别放大k1和k2倍，即\n\n\n\n用矩阵表示就是：\n![translate_tips][31]\n\n缩放变换比较好理解，就不多说了。\n![translate_tips][32]\n\n### 四、 错切变换\n---\n\n错切变换(skew)在数学上又称为Shear mapping(可译为“剪切变换”)或者Transvection(缩并)，它是一种比较特殊的线性变换。错切变换的效果就是让所有点的x坐标(或者y坐标)保持不变，而对应的y坐标(或者x坐标)则按比例发生平移，且平移的大小和该点到x轴(或y轴)的垂直距离成正比。错切变换，属于等面积变换，即一个形状在错切变换的前后，其面积是相等的。\n\n比如下图，各点的y坐标保持不变，但其x坐标则按比例发生了平移。这种情况将水平错切。\n![translate_tips][41]\n\n\n下图各点的x坐标保持不变，但其y坐标则按比例发生了平移。这种情况叫垂直错切。\n![translate_tips][42]\n \n假定一个点经过错切变换后得到，对于水平错切而言，应该有如下关系：\n![translate_tips][43]\n\n用矩阵表示就是：\n![translate_tips][44]\n\n扩展到3 x 3的矩阵就是下面这样的形式：\n![translate_tips][45]\n \n同理，对于垂直错切，可以有：\n![translate_tips][46]\n\n在数学上严格的错切变换就是上面这样的。在Android中除了有上面说到的情况外，还可以同时进行水平、垂直错切，那么形式上就是：\n![translate_tips][47]\n\n\n### 五、 对称变换\n---\n\n除了上面讲到的4中基本变换外，事实上，我们还可以利用Matrix，进行对称变换。所谓对称变换，就是经过变化后的图像和原图像是关于某个对称轴是对称的。比如，某点 经过对称变换后得到，\n\n如果对称轴是x轴，难么，\n![translate_tips][51]\n\n用矩阵表示就是：\n![translate_tips][52]\n\n如果对称轴是y轴，那么，\n![translate_tips][53]\n\n用矩阵表示就是：\n![translate_tips][54]\n\n如果对称轴是y = x，如图：\n![translate_tips][55]\n\n那么，\n![translate_tips][56]\n\n很容易可以解得：\n![translate_tips][57]\n\n用矩阵表示就是：\n![translate_tips][58]\n\n同样的道理，如果对称轴是y = -x，那么用矩阵表示就是：\n![translate_tips][59]\n \n特殊地，如果对称轴是y = kx，如下图：\n![translate_tips][60]\n\n那么，\n![translate_tips][61]\n\n很容易可解得：\n![translate_tips][62]\n\n用矩阵表示就是：\n![translate_tips][63]\n\n当k = 0时，即y = 0，也就是对称轴为x轴的情况；当k趋于无穷大时，即x = 0，也就是对称轴为y轴的情况；当k =1时，即y = x，也就是对称轴为y = x的情况；当k = -1时，即y = -x，也就是对称轴为y = -x的情况。不难验证，这和我们前面说到的4中具体情况是相吻合的。\n\n如果对称轴是y = kx + b这样的情况，只需要在上面的基础上增加两次平移变换即可，即先将坐标原点移动到(0, b)，然后做上面的关于y = kx的对称变换，再然后将坐标原点移回到原来的坐标原点即可。用矩阵表示大致是这样的：\n![translate_tips][64]\n\n需要特别注意：在实际编程中，我们知道屏幕的y坐标的正向和数学中y坐标的正向刚好是相反的，所以在数学上y = x和屏幕上的y = -x才是真正的同一个东西，反之亦然。也就是说，如果要使图片在屏幕上看起来像按照数学意义上y = x对称，那么需使用这种转换：\n![translate_tips][65]\n\n要使图片在屏幕上看起来像按照数学意义上y = -x对称，那么需使用这种转换：\n![translate_tips][66]\n\n关于对称轴为y = kx 或y = kx + b的情况，同样需要考虑这方面的问题。\n\n\n\n## 第二部分 代码验证\n\n在第一部分中讲到的各种图像变换的验证代码如下，一共列出了10种情况。如果要验证其中的某一种情况，只需将相应的代码反注释即可。试验中用到的图片：\n![][100]\n其尺寸为162 x 251。\n\n每种变换的结果，请见代码之后的说明。\n\n``` java\npackage com.pat.testtransformmatrix;  \n  \nimport android.app.Activity;  \nimport android.content.Context;  \nimport android.graphics.Bitmap;  \nimport android.graphics.BitmapFactory;  \nimport android.graphics.Canvas;  \nimport android.graphics.Matrix;  \nimport android.os.Bundle;  \nimport android.util.Log;  \nimport android.view.MotionEvent;  \nimport android.view.View;  \nimport android.view.Window;  \nimport android.view.WindowManager;  \nimport android.view.View.OnTouchListener;  \nimport android.widget.ImageView;  \n  \npublic class TestTransformMatrixActivity extends Activity  \nimplements  \nOnTouchListener  \n{  \n    private TransformMatrixView view;  \n    @Override  \n    public void onCreate(Bundle savedInstanceState)  \n    {  \n        super.onCreate(savedInstanceState);  \n        requestWindowFeature(Window.FEATURE_NO_TITLE);  \n        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);  \n  \n        view = new TransformMatrixView(this);  \n        view.setScaleType(ImageView.ScaleType.MATRIX);  \n        view.setOnTouchListener(this);  \n          \n        setContentView(view);  \n    }  \n      \n    class TransformMatrixView extends ImageView  \n    {  \n        private Bitmap bitmap;  \n        private Matrix matrix;  \n        public TransformMatrixView(Context context)  \n        {  \n            super(context);  \n            bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.sophie);  \n            matrix = new Matrix();  \n        }  \n  \n        @Override  \n        protected void onDraw(Canvas canvas)  \n        {  \n            // 画出原图像  \n            canvas.drawBitmap(bitmap, 0, 0, null);  \n            // 画出变换后的图像  \n            canvas.drawBitmap(bitmap, matrix, null);  \n            super.onDraw(canvas);  \n        }  \n  \n        @Override  \n        public void setImageMatrix(Matrix matrix)  \n        {  \n            this.matrix.set(matrix);  \n            super.setImageMatrix(matrix);  \n        }  \n          \n        public Bitmap getImageBitmap()  \n        {  \n            return bitmap;  \n        }  \n    }  \n  \n    public boolean onTouch(View v, MotionEvent e)  \n    {  \n        if(e.getAction() == MotionEvent.ACTION_UP)  \n        {  \n            Matrix matrix = new Matrix();  \n            // 输出图像的宽度和高度(162 x 251)  \n            Log.e(\"TestTransformMatrixActivity\", \"image size: width x height = \" +  view.getImageBitmap().getWidth() + \" x \" + view.getImageBitmap().getHeight());  \n            // 1. 平移  \n            matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  \n            // 在x方向平移view.getImageBitmap().getWidth()，在y轴方向view.getImageBitmap().getHeight()  \n            view.setImageMatrix(matrix);  \n              \n            // 下面的代码是为了查看matrix中的元素  \n            float[] matrixValues = new float[9];  \n            matrix.getValues(matrixValues);  \n            for(int i = 0; i < 3; ++i)  \n            {  \n                String temp = new String();  \n                for(int j = 0; j < 3; ++j)  \n                {  \n                    temp += matrixValues[3 * i + j ] + \"\\t\";  \n                }  \n                Log.e(\"TestTransformMatrixActivity\", temp);  \n            }  \n              \n  \n//          // 2. 旋转(围绕图像的中心点)  \n//          matrix.setRotate(45f, view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  \n//          matrix.postTranslate(view.getImageBitmap().getWidth() * 1.5f, 0f);  \n//          view.setImageMatrix(matrix);  \n//  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n              \n//          // 3. 旋转(围绕坐标原点) + 平移(效果同2)  \n//          matrix.setRotate(45f);  \n//          matrix.preTranslate(-1f * view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight() / 2f);  \n//          matrix.postTranslate((float)view.getImageBitmap().getWidth() / 2f, (float)view.getImageBitmap().getHeight() / 2f);  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  \n//          matrix.postTranslate((float)view.getImageBitmap().getWidth() * 1.5f, 0f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }             \n              \n//          // 4. 缩放  \n//          matrix.setScale(2f, 2f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  \n//          matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n  \n              \n//          // 5. 错切 - 水平  \n//          matrix.setSkew(0.5f, 0f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠           \n//          matrix.postTranslate(view.getImageBitmap().getWidth(), 0f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n//          // 6. 错切 - 垂直  \n//          matrix.setSkew(0f, 0.5f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               \n//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }             \n              \n//          7. 错切 - 水平 + 垂直  \n//          matrix.setSkew(0.5f, 0.5f);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               \n//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n//          // 8. 对称 (水平对称)  \n//          float matrix_values[] = {1f, 0f, 0f, 0f, -1f, 0f, 0f, 0f, 1f};  \n//          matrix.setValues(matrix_values);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   \n//          matrix.postTranslate(0f, view.getImageBitmap().getHeight() * 2f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }             \n              \n//          // 9. 对称 - 垂直  \n//          float matrix_values[] = {-1f, 0f, 0f, 0f, 1f, 0f, 0f, 0f, 1f};  \n//          matrix.setValues(matrix_values);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }     \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   \n//          matrix.postTranslate(view.getImageBitmap().getWidth() * 2f, 0f);  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n  \n              \n//          // 10. 对称(对称轴为直线y = x)  \n//          float matrix_values[] = {0f, -1f, 0f, -1f, 0f, 0f, 0f, 0f, 1f};  \n//          matrix.setValues(matrix_values);  \n//          // 下面的代码是为了查看matrix中的元素  \n//          float[] matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n//            \n//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               \n//          matrix.postTranslate(view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth(),   \n//                  view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth());  \n//          view.setImageMatrix(matrix);  \n//            \n//          // 下面的代码是为了查看matrix中的元素  \n//          matrixValues = new float[9];  \n//          matrix.getValues(matrixValues);  \n//          for(int i = 0; i < 3; ++i)  \n//          {  \n//              String temp = new String();  \n//              for(int j = 0; j < 3; ++j)  \n//              {  \n//                  temp += matrixValues[3 * i + j ] + \"\\t\";  \n//              }  \n//              Log.e(\"TestTransformMatrixActivity\", temp);  \n//          }  \n              \n            view.invalidate();  \n        }  \n        return true;  \n    }  \n}  \n```\n\n下面给出上述代码中，各种变换的具体结果及其对应的相关变换矩阵\n\n### 1.平移\n![][101]\n\n输出的结果：\n![][102]\n\n请对照第一部分中的“一、平移变换”所讲的情形，考察上述矩阵的正确性。\n\n\n### 2.旋转(围绕图像的中心点)\n---\n![][201]\n\n输出的结果：\n![][202]\n\n它实际上是\n``` java\nmatrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);\nmatrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);\n```\n\n这两条语句综合作用的结果。根据第一部分中“二、旋转变换”里面关于围绕某点旋转的公式，\n``` java\nmatrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);\n```\n\n所产生的转换矩阵就是：\n![][203]\n\n而\n``` java\nmatrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);\n``` \n的意思就是在上述矩阵的左边再乘以下面的矩阵：\n![][204]\n\n关于post是左乘这一点，我们在前面的理论部分曾经提及过，后面我们还会专门讨论这个问题。\n所以它实际上就是：\n![][205]\n\n出去计算上的精度误差，我们可以看到我们计算出来的结果，和程序直接输出的结果是一致的。\n\n \n### 3.旋转(围绕坐标原点旋转，在加上两次平移，效果同2)\n---\n![][301]\n\n根据第一部分中“二、旋转变换”里面关于围绕某点旋转的解释，不难知道：\n``` java\nmatrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);\n```\n等价于\n``` java\nmatrix.setRotate(45f);\nmatrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f *view.getImageBitmap().getHeight() / 2f);\nmatrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f);\n```\n\n其中`matrix.setRotate(45f)`对应的矩阵是：\n![][302]\n\n``` java\nmatrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight()/ 2f)\n```\n对应的矩阵是：\n![][303]\n\n由于是preTranslate，是先乘，也就是右乘，即它应该出现在`matrix.setRotate(45f)`所对应矩阵的右侧。\n\n``` java\nmatrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f)\n```\n对应的矩阵是：\n![][304]\n\n这次由于是postTranslate，是后乘，也就是左乘，即它应该出现在`matrix.setRotate(45f)`所对应矩阵的左侧。\n\n所以综合起来，\n``` java\nmatrix.setRotate(45f);\nmatrix.preTranslate(-1f* view.getImageBitmap().getWidth() / 2f, -1f *view.getImageBitmap().getHeight() / 2f);\nmatrix.postTranslate((float)view.getImageBitmap().getWidth()/ 2f, (float)view.getImageBitmap().getHeight() / 2f);\n```\n对应的矩阵就是：\n![][305]\n\n这和下面这个矩阵(围绕图像中心顺时针旋转45度)其实是一样的：\n![][306]\n\n因此，此处变换后的图像和2中变换后的图像时一样的。\n![][307]\n\n### 4.缩放变换\n---\n![][401]\n\n程序所输出的两个矩阵分别是：\n![][402]\n\n其中第二个矩阵，其实是下面两个矩阵相乘的结果：\n![][403]\n\n大家可以对照第一部分中的“三、缩放变换”和“一、平移变换”说法，自行验证结果。\n\n\n### 5.错切变换(水平错切)\n---\n![][501]\n\n代码所输出的两个矩阵分别是：\n![][502]\n\n其中，第二个矩阵其实是下面两个矩阵相乘的结果：\n![][503]\n\n大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 6.错切变换(垂直错切)\n---\n![][601]\n\n代码所输出的两个矩阵分别是：\n![][602]\n\n其中，第二个矩阵其实是下面两个矩阵相乘的结果：\n![][603]\n\n大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 7.错切变换(水平+垂直错切)\n---\n![][701]\n\n代码所输出的两个矩阵分别是：\n![][702]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][703]\n\n大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 8.对称变换(水平对称)\n---\n![][801]\n\n代码所输出的两个各矩阵分别是：\n![][802]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][803]\n \n大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。\n\n \n### 9.对称变换(垂直对称)\n---\n![][901]\n\n代码所输出的两个矩阵分别是：\n![][902]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][903]\n\n大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。\n\n\n### 10.对称变换(对称轴为直线y = x)\n---\n![][103]\n\n代码所输出的两个矩阵分别是：\n![][104]\n\n其中，后者是下面两个矩阵相乘的结果：\n![][105]\n \n大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。\n\n \n### 11.关于先乘和后乘的问题\n---\n由于矩阵的乘法运算不满足交换律，我们在前面曾经多次提及先乘、后乘的问题，即先乘就是矩阵运算中右乘，后乘就是矩阵运算中的左乘。其实先乘、后乘的概念是针对变换操作的时间先后而言的，左乘、右乘是针对矩阵运算的左右位置而言的。以第一部分“二、旋转变换”中围绕某点旋转的情况为例：\n![][110]\n\n越靠近原图像中像素的矩阵，越先乘，越远离原图像中像素的矩阵，越后乘。事实上，图像处理时，矩阵的运算是从右边往左边方向进行运算的。这就形成了越在右边的矩阵(右乘)，越先运算(先乘)，反之亦然。\n\n当然，在实际中，如果首先指定了一个matrix，比如我们先setRotate()，即指定了上面变换矩阵中，中间的那个矩阵，那么后续的矩阵到底是pre还是post运算，都是相对这个中间矩阵而言的。\n\n\n\n\n\n[0]: http://hi.csdn.net/attachment/201111/19/0_13217092330d9Q.gif\n\n[11]: http://hi.csdn.net/attachment/201111/19/0_1321709352RQ75.gif\n[12]: http://hi.csdn.net/attachment/201111/19/0_1321709520MmsS.gif\n[13]: http://hi.csdn.net/attachment/201111/19/0_1321709527kmK6.gif\n[14]: http://hi.csdn.net/attachment/201111/19/0_1321709536Otg4.gif\n\n\n[21]: http://hi.csdn.net/attachment/201111/19/0_132170975189NC.gif\n[22]: http://hi.csdn.net/attachment/201111/19/0_1321709797SBJW.gif\n[23]: http://hi.csdn.net/attachment/201111/19/0_1321709849ZLVc.gif\n[24]: http://hi.csdn.net/attachment/201111/19/0_13217100380220.gif\n[25]: http://hi.csdn.net/attachment/201111/19/0_13217100952Vqv.gif\n[26]: http://hi.csdn.net/attachment/201111/19/0_1321710153kurQ.gif\n[27]: http://hi.csdn.net/attachment/201111/19/0_1321710301T9nf.gif\n[28]: http://hi.csdn.net/attachment/201111/19/0_1321710398Z3Je.gif\n\n\n[31]: http://hi.csdn.net/attachment/201111/19/0_1321710517pb9W.gif\n[32]: http://hi.csdn.net/attachment/201111/19/0_1321710615riwr.gif\n\n\n[41]: http://hi.csdn.net/attachment/201111/19/0_1321710625smm5.gif\n[42]: http://hi.csdn.net/attachment/201111/19/0_1321710790633H.gif\n[43]: http://hi.csdn.net/attachment/201111/19/0_1321710798y5L6.gif\n[44]: http://hi.csdn.net/attachment/201111/19/0_13217108084B3T.gif\n[45]: http://hi.csdn.net/attachment/201111/19/0_13217108954sms.gif\n[46]: http://hi.csdn.net/attachment/201111/19/0_13217109074Nv2.gif\n[47]: http://hi.csdn.net/attachment/201111/19/0_1321711018S31a.gif\n\n\n[51]: http://hi.csdn.net/attachment/201111/19/0_1321711026LZ03.gif\n[52]: http://hi.csdn.net/attachment/201111/19/0_1321711090fhGd.gif\n[53]: http://hi.csdn.net/attachment/201111/19/0_1321711099Xhak.gif\n[54]: http://hi.csdn.net/attachment/201111/19/0_1321711217oHNz.gif\n[55]: http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\n[56]: http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\n[57]: http://hi.csdn.net/attachment/201111/19/0_1321711261E6xG.gif\n[58]: http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\n[59]: http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\n[60]: http://hi.csdn.net/attachment/201111/19/0_13217113506Hb8.gif\n[61]: http://hi.csdn.net/attachment/201111/19/0_1321711502QQ7A.gif\n[62]: http://hi.csdn.net/attachment/201111/19/0_1321711521GZlt.gif\n[63]: http://hi.csdn.net/attachment/201111/19/0_1321711541FJA1.gif\n[64]: http://hi.csdn.net/attachment/201111/19/0_1321711616I9SJ.gif\n[65]: http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\n[66]: http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\n\n\n[100]: http://hi.csdn.net/attachment/201111/19/0_13217122673338.gif\n\n\n[101]: http://hi.csdn.net/attachment/201111/19/0_1321712352qQRu.gif\n[102]: http://hi.csdn.net/attachment/201111/19/0_13217123565Wwz.gif\n\n[200]: http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\n[201]: http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\n[202]: http://hi.csdn.net/attachment/201111/19/0_1321712512Yj1i.gif\n[203]: http://hi.csdn.net/attachment/201111/19/0_1321712644I54M.gif\n[204]: http://hi.csdn.net/attachment/201111/19/0_13217126508k4V.gif\n[205]: http://hi.csdn.net/attachment/201111/19/0_13217126608wdT.gif\n\n\n[301]: http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\n[302]: http://hi.csdn.net/attachment/201111/19/0_1321712949GjN7.gif\n[303]: http://hi.csdn.net/attachment/201111/19/0_1321712956BNj8.gif\n[304]: http://hi.csdn.net/attachment/201111/19/0_1321712963iNO1.gif\n[305]: http://hi.csdn.net/attachment/201111/19/0_1321713055HOOt.gif\n[306]: http://hi.csdn.net/attachment/201111/19/0_1321713100VIOz.gif\n\n\n[401]: http://hi.csdn.net/attachment/201111/19/0_1321713185yKS7.gif\n[402]: http://hi.csdn.net/attachment/201111/19/0_13217131941R24.gif\n[403]: http://hi.csdn.net/attachment/201111/19/0_1321713201VRxs.gif\n\n\n[501]: http://hi.csdn.net/attachment/201111/19/0_132171330766G0.gif\n[502]: http://hi.csdn.net/attachment/201111/19/0_1321713314Dk69.gif\n[503]: http://hi.csdn.net/attachment/201111/19/0_1321713322PeML.gif\n\n\n[601]: http://hi.csdn.net/attachment/201111/19/0_1321713502Akg2.gif\n[602]: http://hi.csdn.net/attachment/201111/19/0_1321713509Hz7p.gif\n[603]: http://hi.csdn.net/attachment/201111/19/0_1321713516TUvx.gif\n\n\n[701]: http://hi.csdn.net/attachment/201111/19/0_1321713655Qsij.gif\n[702]: http://hi.csdn.net/attachment/201111/19/0_13217136824kKR.gif\n[703]: http://hi.csdn.net/attachment/201111/19/0_13217136931vl4.gif\n\n\n[801]: http://hi.csdn.net/attachment/201111/19/0_13217141232rJI.gif\n[802]: http://hi.csdn.net/attachment/201111/19/0_1321714133P0ha.gif\n[803]: http://hi.csdn.net/attachment/201111/19/0_13217141417Bi3.gif\n\n\n[901]: http://hi.csdn.net/attachment/201111/19/0_1321714261NN3V.gif\n[902]: http://hi.csdn.net/attachment/201111/19/0_1321714269Kqs4.gif\n[903]: http://hi.csdn.net/attachment/201111/19/0_1321714276ai2f.gif\n\n\n[103]: http://hi.csdn.net/attachment/201111/19/0_13217144950030.gif\n[104]: http://hi.csdn.net/attachment/201111/19/0_13217145038hN8.gif\n[105]: http://hi.csdn.net/attachment/201111/19/0_1321714509sBN4.gif\n\n\n[110]: http://hi.csdn.net/attachment/201111/19/0_1321714645396z.gif\n\n\n\n\n\n\n\n\n","slug":"Android之Matrix","published":1,"updated":"2016-10-10T06:53:44.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6baf00171giyfeh5wsht","content":"<blockquote>\n<p>原作者： Qiengo<br>源地址： <a href=\"http://www.cnblogs.com/qiengo/archive/2012/06/30/2570874.html\" target=\"_blank\" rel=\"external\">点击跳转</a></p>\n</blockquote>\n<h2 id=\"Matrix的数学原理\"><a href=\"#Matrix的数学原理\" class=\"headerlink\" title=\"Matrix的数学原理\"></a>Matrix的数学原理</h2><p>在Android中，如果你用Matrix进行过图像处理，那么一定知道Matrix这个类。Android中的Matrix是一个3 x 3的矩阵，其内容如下：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217092330d9Q.gif\" alt=\"matrix_iamge_description\"></p>\n<p>Matrix的对图像的处理可分为四类基本变换：</p>\n<ul>\n<li>Translate - 平移变换</li>\n<li>Rotate - 旋转变换</li>\n<li>Scale - 缩放变换</li>\n<li>Skew - 错切变换</li>\n</ul>\n<p>从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。同时，在Android的文档中，未见到用Matrix进行透视变换的相关说明，所以本文也不讨论这方面的问题。</p>\n<p>针对每种变换，Android提供了pre、set和post三种操作方式。其中：</p>\n<ul>\n<li>set - 用于设置Matrix中的值。</li>\n<li>pre - 是先乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。先乘相当于矩阵运算中的右乘。</li>\n<li>post - 是后乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。后乘相当于矩阵运算中的左乘。</li>\n</ul>\n<p>除平移变换(Translate)外，旋转变换(Rotate)、缩放变换(Scale)和错切变换(Skew)都可以围绕一个中心点来进行，如果不指定，在默认情况下是围绕(0, 0)来进行相应的变换的。</p>\n<p>下面我们来看看四种变换的具体情形。由于所有的图形都是有点组成，因此我们只需要考察一个点相关变换即可。<br><a id=\"more\"></a></p>\n<h3 id=\"一、-平移变换\"><a href=\"#一、-平移变换\" class=\"headerlink\" title=\"一、 平移变换\"></a>一、 平移变换</h3><hr>\n<p>假定有一个点的坐标是 ，将其移动到 ，再假定在x轴和y轴方向移动的大小分别为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709352RQ75.gif\" alt=\"translate\"></p>\n<p>如下图所示：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709520MmsS.gif\" alt=\"translate_sample\"></p>\n<p>不难知道：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709527kmK6.gif\" alt=\"translate_result\"></p>\n<p>如果用矩阵来表示的话，就可以写成：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709536Otg4.gif\" alt=\"translate_tips\"></p>\n<h3 id=\"二、-旋转变换\"><a href=\"#二、-旋转变换\" class=\"headerlink\" title=\"二、 旋转变换\"></a>二、 旋转变换</h3><hr>\n<h4 id=\"2-1-围绕坐标原点旋转：\"><a href=\"#2-1-围绕坐标原点旋转：\" class=\"headerlink\" title=\"2.1    围绕坐标原点旋转：\"></a>2.1    围绕坐标原点旋转：</h4><p>假定有一个点 ，相对坐标原点顺时针旋转后的情形，同时假定P点离坐标原点的距离为r，如下图：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_132170975189NC.gif\" alt=\"translate_tips\"></p>\n<p>那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709797SBJW.gif\" alt=\"translate_tips\"></p>\n<p>如果用矩阵，就可以表示为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709849ZLVc.gif\" alt=\"translate_tips\"></p>\n<h4 id=\"2-2-围绕某个点旋转\"><a href=\"#2-2-围绕某个点旋转\" class=\"headerlink\" title=\"2.2    围绕某个点旋转\"></a>2.2    围绕某个点旋转</h4><p>如果是围绕某个点顺时针旋转，那么可以用矩阵表示为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217100380220.gif\" alt=\"translate_tips\"></p>\n<p>可以化为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217100952Vqv.gif\" alt=\"translate_tips\"></p>\n<p>很显然，</p>\n<p><strong>1.</strong><br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710153kurQ.gif\" alt=\"translate_tips\"> 是将坐标原点移动到点后， 的新坐标。</p>\n<p><strong>2.</strong>     </p>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710301T9nf.gif\" alt=\"translate_tips\"> 是将上一步变换后的，围绕新的坐标原点顺时针旋转 。</p>\n<p><strong>3.</strong><br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710398Z3Je.gif\" alt=\"translate_tips\"> 经过上一步旋转变换后，再将坐标原点移回到原来的坐标原点。</p>\n<p>所以，围绕某一点进行旋转变换，可以分成3个步骤，即首先将坐标原点移至该点，然后围绕新的坐标原点进行旋转变换，再然后将坐标原点移回到原先的坐标原点。</p>\n<h3 id=\"三、-缩放变换\"><a href=\"#三、-缩放变换\" class=\"headerlink\" title=\"三、 缩放变换\"></a>三、 缩放变换</h3><hr>\n<p>理论上而言，一个点是不存在什么缩放变换的，但考虑到所有图像都是由点组成，因此，如果图像在x轴和y轴方向分别放大k1和k2倍的话，那么图像中的所有点的x坐标和y坐标均会分别放大k1和k2倍，即</p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710517pb9W.gif\" alt=\"translate_tips\"></p>\n<p>缩放变换比较好理解，就不多说了。<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710615riwr.gif\" alt=\"translate_tips\"></p>\n<h3 id=\"四、-错切变换\"><a href=\"#四、-错切变换\" class=\"headerlink\" title=\"四、 错切变换\"></a>四、 错切变换</h3><hr>\n<p>错切变换(skew)在数学上又称为Shear mapping(可译为“剪切变换”)或者Transvection(缩并)，它是一种比较特殊的线性变换。错切变换的效果就是让所有点的x坐标(或者y坐标)保持不变，而对应的y坐标(或者x坐标)则按比例发生平移，且平移的大小和该点到x轴(或y轴)的垂直距离成正比。错切变换，属于等面积变换，即一个形状在错切变换的前后，其面积是相等的。</p>\n<p>比如下图，各点的y坐标保持不变，但其x坐标则按比例发生了平移。这种情况将水平错切。<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710625smm5.gif\" alt=\"translate_tips\"></p>\n<p>下图各点的x坐标保持不变，但其y坐标则按比例发生了平移。这种情况叫垂直错切。<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710790633H.gif\" alt=\"translate_tips\"></p>\n<p>假定一个点经过错切变换后得到，对于水平错切而言，应该有如下关系：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710798y5L6.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217108084B3T.gif\" alt=\"translate_tips\"></p>\n<p>扩展到3 x 3的矩阵就是下面这样的形式：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217108954sms.gif\" alt=\"translate_tips\"></p>\n<p>同理，对于垂直错切，可以有：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217109074Nv2.gif\" alt=\"translate_tips\"></p>\n<p>在数学上严格的错切变换就是上面这样的。在Android中除了有上面说到的情况外，还可以同时进行水平、垂直错切，那么形式上就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711018S31a.gif\" alt=\"translate_tips\"></p>\n<h3 id=\"五、-对称变换\"><a href=\"#五、-对称变换\" class=\"headerlink\" title=\"五、 对称变换\"></a>五、 对称变换</h3><hr>\n<p>除了上面讲到的4中基本变换外，事实上，我们还可以利用Matrix，进行对称变换。所谓对称变换，就是经过变化后的图像和原图像是关于某个对称轴是对称的。比如，某点 经过对称变换后得到，</p>\n<p>如果对称轴是x轴，难么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711026LZ03.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711090fhGd.gif\" alt=\"translate_tips\"></p>\n<p>如果对称轴是y轴，那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711099Xhak.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711217oHNz.gif\" alt=\"translate_tips\"></p>\n<p>如果对称轴是y = x，如图：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\" alt=\"translate_tips\"></p>\n<p>那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\" alt=\"translate_tips\"></p>\n<p>很容易可以解得：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711261E6xG.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\" alt=\"translate_tips\"></p>\n<p>同样的道理，如果对称轴是y = -x，那么用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\" alt=\"translate_tips\"></p>\n<p>特殊地，如果对称轴是y = kx，如下图：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217113506Hb8.gif\" alt=\"translate_tips\"></p>\n<p>那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711502QQ7A.gif\" alt=\"translate_tips\"></p>\n<p>很容易可解得：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711521GZlt.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711541FJA1.gif\" alt=\"translate_tips\"></p>\n<p>当k = 0时，即y = 0，也就是对称轴为x轴的情况；当k趋于无穷大时，即x = 0，也就是对称轴为y轴的情况；当k =1时，即y = x，也就是对称轴为y = x的情况；当k = -1时，即y = -x，也就是对称轴为y = -x的情况。不难验证，这和我们前面说到的4中具体情况是相吻合的。</p>\n<p>如果对称轴是y = kx + b这样的情况，只需要在上面的基础上增加两次平移变换即可，即先将坐标原点移动到(0, b)，然后做上面的关于y = kx的对称变换，再然后将坐标原点移回到原来的坐标原点即可。用矩阵表示大致是这样的：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711616I9SJ.gif\" alt=\"translate_tips\"></p>\n<p>需要特别注意：在实际编程中，我们知道屏幕的y坐标的正向和数学中y坐标的正向刚好是相反的，所以在数学上y = x和屏幕上的y = -x才是真正的同一个东西，反之亦然。也就是说，如果要使图片在屏幕上看起来像按照数学意义上y = x对称，那么需使用这种转换：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\" alt=\"translate_tips\"></p>\n<p>要使图片在屏幕上看起来像按照数学意义上y = -x对称，那么需使用这种转换：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\" alt=\"translate_tips\"></p>\n<p>关于对称轴为y = kx 或y = kx + b的情况，同样需要考虑这方面的问题。</p>\n<h2 id=\"第二部分-代码验证\"><a href=\"#第二部分-代码验证\" class=\"headerlink\" title=\"第二部分 代码验证\"></a>第二部分 代码验证</h2><p>在第一部分中讲到的各种图像变换的验证代码如下，一共列出了10种情况。如果要验证其中的某一种情况，只需将相应的代码反注释即可。试验中用到的图片：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217122673338.gif\" alt=\"\"><br>其尺寸为162 x 251。</p>\n<p>每种变换的结果，请见代码之后的说明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pat.testtransformmatrix;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapFactory;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Matrix;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View.OnTouchListener;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTransformMatrixActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span>  </span></div><div class=\"line\"><span class=\"keyword\">implements</span>  </div><div class=\"line\"><span class=\"title\">OnTouchListener</span>  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> TransformMatrixView view;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span>  </span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);  </div><div class=\"line\">        requestWindowFeature(Window.FEATURE_NO_TITLE);  </div><div class=\"line\">        <span class=\"keyword\">this</span>.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);  </div><div class=\"line\">  </div><div class=\"line\">        view = <span class=\"keyword\">new</span> TransformMatrixView(<span class=\"keyword\">this</span>);  </div><div class=\"line\">        view.setScaleType(ImageView.ScaleType.MATRIX);  </div><div class=\"line\">        view.setOnTouchListener(<span class=\"keyword\">this</span>);  </div><div class=\"line\">          </div><div class=\"line\">        setContentView(view);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransformMatrixView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span>  </span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">private</span> Bitmap bitmap;  </div><div class=\"line\">        <span class=\"keyword\">private</span> Matrix matrix;  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransformMatrixView</span><span class=\"params\">(Context context)</span>  </span></div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(context);  </div><div class=\"line\">            bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.sophie);  </div><div class=\"line\">            matrix = <span class=\"keyword\">new</span> Matrix();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span>  </span></div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"comment\">// 画出原图像  </span></div><div class=\"line\">            canvas.drawBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  </div><div class=\"line\">            <span class=\"comment\">// 画出变换后的图像  </span></div><div class=\"line\">            canvas.drawBitmap(bitmap, matrix, <span class=\"keyword\">null</span>);  </div><div class=\"line\">            <span class=\"keyword\">super</span>.onDraw(canvas);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setImageMatrix</span><span class=\"params\">(Matrix matrix)</span>  </span></div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.matrix.set(matrix);  </div><div class=\"line\">            <span class=\"keyword\">super</span>.setImageMatrix(matrix);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getImageBitmap</span><span class=\"params\">()</span>  </span></div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent e)</span>  </span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(e.getAction() == MotionEvent.ACTION_UP)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            Matrix matrix = <span class=\"keyword\">new</span> Matrix();  </div><div class=\"line\">            <span class=\"comment\">// 输出图像的宽度和高度(162 x 251)  </span></div><div class=\"line\">            Log.e(<span class=\"string\">\"TestTransformMatrixActivity\"</span>, <span class=\"string\">\"image size: width x height = \"</span> +  view.getImageBitmap().getWidth() + <span class=\"string\">\" x \"</span> + view.getImageBitmap().getHeight());  </div><div class=\"line\">            <span class=\"comment\">// 1. 平移  </span></div><div class=\"line\">            matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  </div><div class=\"line\">            <span class=\"comment\">// 在x方向平移view.getImageBitmap().getWidth()，在y轴方向view.getImageBitmap().getHeight()  </span></div><div class=\"line\">            view.setImageMatrix(matrix);  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"comment\">// 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\">            <span class=\"keyword\">float</span>[] matrixValues = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">9</span>];  </div><div class=\"line\">            matrix.getValues(matrixValues);  </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                String temp = <span class=\"keyword\">new</span> String();  </div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)  </div><div class=\"line\">                &#123;  </div><div class=\"line\">                    temp += matrixValues[<span class=\"number\">3</span> * i + j ] + <span class=\"string\">\"\\t\"</span>;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">                Log.e(<span class=\"string\">\"TestTransformMatrixActivity\"</span>, temp);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//          // 2. 旋转(围绕图像的中心点)  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setRotate(45f, view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth() * 1.5f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 3. 旋转(围绕坐标原点) + 平移(效果同2)  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setRotate(45f);  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.preTranslate(-1f * view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight() / 2f);  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate((float)view.getImageBitmap().getWidth() / 2f, (float)view.getImageBitmap().getHeight() / 2f);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate((float)view.getImageBitmap().getWidth() * 1.5f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;             </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 4. 缩放  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setScale(2f, 2f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">  </div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 5. 错切 - 水平  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setSkew(0.5f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠           </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth(), 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 6. 错切 - 垂直  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setSkew(0f, 0.5f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;             </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          7. 错切 - 水平 + 垂直  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setSkew(0.5f, 0.5f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 8. 对称 (水平对称)  </span></div><div class=\"line\"><span class=\"comment\">//          float matrix_values[] = &#123;1f, 0f, 0f, 0f, -1f, 0f, 0f, 0f, 1f&#125;;  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setValues(matrix_values);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(0f, view.getImageBitmap().getHeight() * 2f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;             </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 9. 对称 - 垂直  </span></div><div class=\"line\"><span class=\"comment\">//          float matrix_values[] = &#123;-1f, 0f, 0f, 0f, 1f, 0f, 0f, 0f, 1f&#125;;  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setValues(matrix_values);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;     </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth() * 2f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">  </div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 10. 对称(对称轴为直线y = x)  </span></div><div class=\"line\"><span class=\"comment\">//          float matrix_values[] = &#123;0f, -1f, 0f, -1f, 0f, 0f, 0f, 0f, 1f&#125;;  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setValues(matrix_values);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth(),   </span></div><div class=\"line\"><span class=\"comment\">//                  view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\">            view.invalidate();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面给出上述代码中，各种变换的具体结果及其对应的相关变换矩阵</p>\n<h3 id=\"1-平移\"><a href=\"#1-平移\" class=\"headerlink\" title=\"1.平移\"></a>1.平移</h3><p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712352qQRu.gif\" alt=\"\"></p>\n<p>输出的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217123565Wwz.gif\" alt=\"\"></p>\n<p>请对照第一部分中的“一、平移变换”所讲的情形，考察上述矩阵的正确性。</p>\n<h3 id=\"2-旋转-围绕图像的中心点\"><a href=\"#2-旋转-围绕图像的中心点\" class=\"headerlink\" title=\"2.旋转(围绕图像的中心点)\"></a>2.旋转(围绕图像的中心点)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\" alt=\"\"></p>\n<p>输出的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712512Yj1i.gif\" alt=\"\"></p>\n<p>它实际上是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>,view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div><div class=\"line\">matrix.postTranslate(view.getImageBitmap().getWidth()* <span class=\"number\">1.5f</span>, <span class=\"number\">0f</span>);</div></pre></td></tr></table></figure></p>\n<p>这两条语句综合作用的结果。根据第一部分中“二、旋转变换”里面关于围绕某点旋转的公式，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>,view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure></p>\n<p>所产生的转换矩阵就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712644I54M.gif\" alt=\"\"></p>\n<p>而<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);</div><div class=\"line\">``` </div><div class=\"line\">的意思就是在上述矩阵的左边再乘以下面的矩阵：</div><div class=\"line\">![][204]</div><div class=\"line\"></div><div class=\"line\">关于post是左乘这一点，我们在前面的理论部分曾经提及过，后面我们还会专门讨论这个问题。</div><div class=\"line\">所以它实际上就是：</div><div class=\"line\">![][205]</div><div class=\"line\"></div><div class=\"line\">出去计算上的精度误差，我们可以看到我们计算出来的结果，和程序直接输出的结果是一致的。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">### 3.旋转(围绕坐标原点旋转，在加上两次平移，效果同2)</div><div class=\"line\">---</div><div class=\"line\">![][301]</div><div class=\"line\"></div><div class=\"line\">根据第一部分中“二、旋转变换”里面关于围绕某点旋转的解释，不难知道：</div><div class=\"line\">``` java</div><div class=\"line\">matrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);</div></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>);</div><div class=\"line\">matrix.preTranslate(-<span class=\"number\">1f</span>* view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, -<span class=\"number\">1f</span> *view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div><div class=\"line\">matrix.postTranslate((<span class=\"keyword\">float</span>)view.getImageBitmap().getWidth()/ <span class=\"number\">2f</span>, (<span class=\"keyword\">float</span>)view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure></p>\n<p>其中<code>matrix.setRotate(45f)</code>对应的矩阵是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712949GjN7.gif\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.preTranslate(-<span class=\"number\">1f</span>* view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, -<span class=\"number\">1f</span> * view.getImageBitmap().getHeight()/ <span class=\"number\">2f</span>)</div></pre></td></tr></table></figure>\n<p>对应的矩阵是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712956BNj8.gif\" alt=\"\"></p>\n<p>由于是preTranslate，是先乘，也就是右乘，即它应该出现在<code>matrix.setRotate(45f)</code>所对应矩阵的右侧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.postTranslate((<span class=\"keyword\">float</span>)view.getImageBitmap().getWidth()/ <span class=\"number\">2f</span>, (<span class=\"keyword\">float</span>)view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>)</div></pre></td></tr></table></figure>\n<p>对应的矩阵是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712963iNO1.gif\" alt=\"\"></p>\n<p>这次由于是postTranslate，是后乘，也就是左乘，即它应该出现在<code>matrix.setRotate(45f)</code>所对应矩阵的左侧。</p>\n<p>所以综合起来，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>);</div><div class=\"line\">matrix.preTranslate(-<span class=\"number\">1f</span>* view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, -<span class=\"number\">1f</span> *view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div><div class=\"line\">matrix.postTranslate((<span class=\"keyword\">float</span>)view.getImageBitmap().getWidth()/ <span class=\"number\">2f</span>, (<span class=\"keyword\">float</span>)view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure></p>\n<p>对应的矩阵就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713055HOOt.gif\" alt=\"\"></p>\n<p>这和下面这个矩阵(围绕图像中心顺时针旋转45度)其实是一样的：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713100VIOz.gif\" alt=\"\"></p>\n<p>因此，此处变换后的图像和2中变换后的图像时一样的。<br>![][307]</p>\n<h3 id=\"4-缩放变换\"><a href=\"#4-缩放变换\" class=\"headerlink\" title=\"4.缩放变换\"></a>4.缩放变换</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713185yKS7.gif\" alt=\"\"></p>\n<p>程序所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217131941R24.gif\" alt=\"\"></p>\n<p>其中第二个矩阵，其实是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713201VRxs.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“三、缩放变换”和“一、平移变换”说法，自行验证结果。</p>\n<h3 id=\"5-错切变换-水平错切\"><a href=\"#5-错切变换-水平错切\" class=\"headerlink\" title=\"5.错切变换(水平错切)\"></a>5.错切变换(水平错切)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171330766G0.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713314Dk69.gif\" alt=\"\"></p>\n<p>其中，第二个矩阵其实是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713322PeML.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"6-错切变换-垂直错切\"><a href=\"#6-错切变换-垂直错切\" class=\"headerlink\" title=\"6.错切变换(垂直错切)\"></a>6.错切变换(垂直错切)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713502Akg2.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713509Hz7p.gif\" alt=\"\"></p>\n<p>其中，第二个矩阵其实是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713516TUvx.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"7-错切变换-水平-垂直错切\"><a href=\"#7-错切变换-水平-垂直错切\" class=\"headerlink\" title=\"7.错切变换(水平+垂直错切)\"></a>7.错切变换(水平+垂直错切)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713655Qsij.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217136824kKR.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217136931vl4.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"8-对称变换-水平对称\"><a href=\"#8-对称变换-水平对称\" class=\"headerlink\" title=\"8.对称变换(水平对称)\"></a>8.对称变换(水平对称)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217141232rJI.gif\" alt=\"\"></p>\n<p>代码所输出的两个各矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714133P0ha.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217141417Bi3.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"9-对称变换-垂直对称\"><a href=\"#9-对称变换-垂直对称\" class=\"headerlink\" title=\"9.对称变换(垂直对称)\"></a>9.对称变换(垂直对称)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714261NN3V.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714269Kqs4.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714276ai2f.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"10-对称变换-对称轴为直线y-x\"><a href=\"#10-对称变换-对称轴为直线y-x\" class=\"headerlink\" title=\"10.对称变换(对称轴为直线y = x)\"></a>10.对称变换(对称轴为直线y = x)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217144950030.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217145038hN8.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714509sBN4.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"11-关于先乘和后乘的问题\"><a href=\"#11-关于先乘和后乘的问题\" class=\"headerlink\" title=\"11.关于先乘和后乘的问题\"></a>11.关于先乘和后乘的问题</h3><hr>\n<p>由于矩阵的乘法运算不满足交换律，我们在前面曾经多次提及先乘、后乘的问题，即先乘就是矩阵运算中右乘，后乘就是矩阵运算中的左乘。其实先乘、后乘的概念是针对变换操作的时间先后而言的，左乘、右乘是针对矩阵运算的左右位置而言的。以第一部分“二、旋转变换”中围绕某点旋转的情况为例：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714645396z.gif\" alt=\"\"></p>\n<p>越靠近原图像中像素的矩阵，越先乘，越远离原图像中像素的矩阵，越后乘。事实上，图像处理时，矩阵的运算是从右边往左边方向进行运算的。这就形成了越在右边的矩阵(右乘)，越先运算(先乘)，反之亦然。</p>\n<p>当然，在实际中，如果首先指定了一个matrix，比如我们先setRotate()，即指定了上面变换矩阵中，中间的那个矩阵，那么后续的矩阵到底是pre还是post运算，都是相对这个中间矩阵而言的。</p>\n","excerpt":"<blockquote>\n<p>原作者： Qiengo<br>源地址： <a href=\"http://www.cnblogs.com/qiengo/archive/2012/06/30/2570874.html\">点击跳转</a></p>\n</blockquote>\n<h2 id=\"Matrix的数学原理\"><a href=\"#Matrix的数学原理\" class=\"headerlink\" title=\"Matrix的数学原理\"></a>Matrix的数学原理</h2><p>在Android中，如果你用Matrix进行过图像处理，那么一定知道Matrix这个类。Android中的Matrix是一个3 x 3的矩阵，其内容如下：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217092330d9Q.gif\" alt=\"matrix_iamge_description\"></p>\n<p>Matrix的对图像的处理可分为四类基本变换：</p>\n<ul>\n<li>Translate - 平移变换</li>\n<li>Rotate - 旋转变换</li>\n<li>Scale - 缩放变换</li>\n<li>Skew - 错切变换</li>\n</ul>\n<p>从字面上理解，矩阵中的MSCALE用于处理缩放变换，MSKEW用于处理错切变换，MTRANS用于处理平移变换，MPERSP用于处理透视变换。实际中当然不能完全按照字面上的说法去理解Matrix。同时，在Android的文档中，未见到用Matrix进行透视变换的相关说明，所以本文也不讨论这方面的问题。</p>\n<p>针对每种变换，Android提供了pre、set和post三种操作方式。其中：</p>\n<ul>\n<li>set - 用于设置Matrix中的值。</li>\n<li>pre - 是先乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。先乘相当于矩阵运算中的右乘。</li>\n<li>post - 是后乘，因为矩阵的乘法不满足交换律，因此先乘、后乘必须要严格区分。后乘相当于矩阵运算中的左乘。</li>\n</ul>\n<p>除平移变换(Translate)外，旋转变换(Rotate)、缩放变换(Scale)和错切变换(Skew)都可以围绕一个中心点来进行，如果不指定，在默认情况下是围绕(0, 0)来进行相应的变换的。</p>\n<p>下面我们来看看四种变换的具体情形。由于所有的图形都是有点组成，因此我们只需要考察一个点相关变换即可。<br>","more":"</p>\n<h3 id=\"一、-平移变换\"><a href=\"#一、-平移变换\" class=\"headerlink\" title=\"一、 平移变换\"></a>一、 平移变换</h3><hr>\n<p>假定有一个点的坐标是 ，将其移动到 ，再假定在x轴和y轴方向移动的大小分别为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709352RQ75.gif\" alt=\"translate\"></p>\n<p>如下图所示：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709520MmsS.gif\" alt=\"translate_sample\"></p>\n<p>不难知道：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709527kmK6.gif\" alt=\"translate_result\"></p>\n<p>如果用矩阵来表示的话，就可以写成：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709536Otg4.gif\" alt=\"translate_tips\"></p>\n<h3 id=\"二、-旋转变换\"><a href=\"#二、-旋转变换\" class=\"headerlink\" title=\"二、 旋转变换\"></a>二、 旋转变换</h3><hr>\n<h4 id=\"2-1-围绕坐标原点旋转：\"><a href=\"#2-1-围绕坐标原点旋转：\" class=\"headerlink\" title=\"2.1    围绕坐标原点旋转：\"></a>2.1    围绕坐标原点旋转：</h4><p>假定有一个点 ，相对坐标原点顺时针旋转后的情形，同时假定P点离坐标原点的距离为r，如下图：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_132170975189NC.gif\" alt=\"translate_tips\"></p>\n<p>那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709797SBJW.gif\" alt=\"translate_tips\"></p>\n<p>如果用矩阵，就可以表示为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321709849ZLVc.gif\" alt=\"translate_tips\"></p>\n<h4 id=\"2-2-围绕某个点旋转\"><a href=\"#2-2-围绕某个点旋转\" class=\"headerlink\" title=\"2.2    围绕某个点旋转\"></a>2.2    围绕某个点旋转</h4><p>如果是围绕某个点顺时针旋转，那么可以用矩阵表示为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217100380220.gif\" alt=\"translate_tips\"></p>\n<p>可以化为：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217100952Vqv.gif\" alt=\"translate_tips\"></p>\n<p>很显然，</p>\n<p><strong>1.</strong><br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710153kurQ.gif\" alt=\"translate_tips\"> 是将坐标原点移动到点后， 的新坐标。</p>\n<p><strong>2.</strong>     </p>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710301T9nf.gif\" alt=\"translate_tips\"> 是将上一步变换后的，围绕新的坐标原点顺时针旋转 。</p>\n<p><strong>3.</strong><br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710398Z3Je.gif\" alt=\"translate_tips\"> 经过上一步旋转变换后，再将坐标原点移回到原来的坐标原点。</p>\n<p>所以，围绕某一点进行旋转变换，可以分成3个步骤，即首先将坐标原点移至该点，然后围绕新的坐标原点进行旋转变换，再然后将坐标原点移回到原先的坐标原点。</p>\n<h3 id=\"三、-缩放变换\"><a href=\"#三、-缩放变换\" class=\"headerlink\" title=\"三、 缩放变换\"></a>三、 缩放变换</h3><hr>\n<p>理论上而言，一个点是不存在什么缩放变换的，但考虑到所有图像都是由点组成，因此，如果图像在x轴和y轴方向分别放大k1和k2倍的话，那么图像中的所有点的x坐标和y坐标均会分别放大k1和k2倍，即</p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710517pb9W.gif\" alt=\"translate_tips\"></p>\n<p>缩放变换比较好理解，就不多说了。<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710615riwr.gif\" alt=\"translate_tips\"></p>\n<h3 id=\"四、-错切变换\"><a href=\"#四、-错切变换\" class=\"headerlink\" title=\"四、 错切变换\"></a>四、 错切变换</h3><hr>\n<p>错切变换(skew)在数学上又称为Shear mapping(可译为“剪切变换”)或者Transvection(缩并)，它是一种比较特殊的线性变换。错切变换的效果就是让所有点的x坐标(或者y坐标)保持不变，而对应的y坐标(或者x坐标)则按比例发生平移，且平移的大小和该点到x轴(或y轴)的垂直距离成正比。错切变换，属于等面积变换，即一个形状在错切变换的前后，其面积是相等的。</p>\n<p>比如下图，各点的y坐标保持不变，但其x坐标则按比例发生了平移。这种情况将水平错切。<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710625smm5.gif\" alt=\"translate_tips\"></p>\n<p>下图各点的x坐标保持不变，但其y坐标则按比例发生了平移。这种情况叫垂直错切。<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710790633H.gif\" alt=\"translate_tips\"></p>\n<p>假定一个点经过错切变换后得到，对于水平错切而言，应该有如下关系：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321710798y5L6.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217108084B3T.gif\" alt=\"translate_tips\"></p>\n<p>扩展到3 x 3的矩阵就是下面这样的形式：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217108954sms.gif\" alt=\"translate_tips\"></p>\n<p>同理，对于垂直错切，可以有：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217109074Nv2.gif\" alt=\"translate_tips\"></p>\n<p>在数学上严格的错切变换就是上面这样的。在Android中除了有上面说到的情况外，还可以同时进行水平、垂直错切，那么形式上就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711018S31a.gif\" alt=\"translate_tips\"></p>\n<h3 id=\"五、-对称变换\"><a href=\"#五、-对称变换\" class=\"headerlink\" title=\"五、 对称变换\"></a>五、 对称变换</h3><hr>\n<p>除了上面讲到的4中基本变换外，事实上，我们还可以利用Matrix，进行对称变换。所谓对称变换，就是经过变化后的图像和原图像是关于某个对称轴是对称的。比如，某点 经过对称变换后得到，</p>\n<p>如果对称轴是x轴，难么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711026LZ03.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711090fhGd.gif\" alt=\"translate_tips\"></p>\n<p>如果对称轴是y轴，那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711099Xhak.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711217oHNz.gif\" alt=\"translate_tips\"></p>\n<p>如果对称轴是y = x，如图：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\" alt=\"translate_tips\"></p>\n<p>那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711240gEeT.gif\" alt=\"translate_tips\"></p>\n<p>很容易可以解得：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711261E6xG.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\" alt=\"translate_tips\"></p>\n<p>同样的道理，如果对称轴是y = -x，那么用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\" alt=\"translate_tips\"></p>\n<p>特殊地，如果对称轴是y = kx，如下图：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217113506Hb8.gif\" alt=\"translate_tips\"></p>\n<p>那么，<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711502QQ7A.gif\" alt=\"translate_tips\"></p>\n<p>很容易可解得：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711521GZlt.gif\" alt=\"translate_tips\"></p>\n<p>用矩阵表示就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711541FJA1.gif\" alt=\"translate_tips\"></p>\n<p>当k = 0时，即y = 0，也就是对称轴为x轴的情况；当k趋于无穷大时，即x = 0，也就是对称轴为y轴的情况；当k =1时，即y = x，也就是对称轴为y = x的情况；当k = -1时，即y = -x，也就是对称轴为y = -x的情况。不难验证，这和我们前面说到的4中具体情况是相吻合的。</p>\n<p>如果对称轴是y = kx + b这样的情况，只需要在上面的基础上增加两次平移变换即可，即先将坐标原点移动到(0, b)，然后做上面的关于y = kx的对称变换，再然后将坐标原点移回到原来的坐标原点即可。用矩阵表示大致是这样的：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711616I9SJ.gif\" alt=\"translate_tips\"></p>\n<p>需要特别注意：在实际编程中，我们知道屏幕的y坐标的正向和数学中y坐标的正向刚好是相反的，所以在数学上y = x和屏幕上的y = -x才是真正的同一个东西，反之亦然。也就是说，如果要使图片在屏幕上看起来像按照数学意义上y = x对称，那么需使用这种转换：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321711292jO01.gif\" alt=\"translate_tips\"></p>\n<p>要使图片在屏幕上看起来像按照数学意义上y = -x对称，那么需使用这种转换：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171128473YK.gif\" alt=\"translate_tips\"></p>\n<p>关于对称轴为y = kx 或y = kx + b的情况，同样需要考虑这方面的问题。</p>\n<h2 id=\"第二部分-代码验证\"><a href=\"#第二部分-代码验证\" class=\"headerlink\" title=\"第二部分 代码验证\"></a>第二部分 代码验证</h2><p>在第一部分中讲到的各种图像变换的验证代码如下，一共列出了10种情况。如果要验证其中的某一种情况，只需将相应的代码反注释即可。试验中用到的图片：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217122673338.gif\" alt=\"\"><br>其尺寸为162 x 251。</p>\n<p>每种变换的结果，请见代码之后的说明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pat.testtransformmatrix;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapFactory;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Matrix;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Window;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.WindowManager;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View.OnTouchListener;  </div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTransformMatrixActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span>  </div><div class=\"line\"><span class=\"keyword\">implements</span>  </div><div class=\"line\"><span class=\"title\">OnTouchListener</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> TransformMatrixView view;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span>  </div><div class=\"line\">    </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);  </div><div class=\"line\">        requestWindowFeature(Window.FEATURE_NO_TITLE);  </div><div class=\"line\">        <span class=\"keyword\">this</span>.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);  </div><div class=\"line\">  </div><div class=\"line\">        view = <span class=\"keyword\">new</span> TransformMatrixView(<span class=\"keyword\">this</span>);  </div><div class=\"line\">        view.setScaleType(ImageView.ScaleType.MATRIX);  </div><div class=\"line\">        view.setOnTouchListener(<span class=\"keyword\">this</span>);  </div><div class=\"line\">          </div><div class=\"line\">        setContentView(view);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransformMatrixView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span>  </div><div class=\"line\">    </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">private</span> Bitmap bitmap;  </div><div class=\"line\">        <span class=\"keyword\">private</span> Matrix matrix;  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransformMatrixView</span><span class=\"params\">(Context context)</span>  </div><div class=\"line\">        </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(context);  </div><div class=\"line\">            bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.sophie);  </div><div class=\"line\">            matrix = <span class=\"keyword\">new</span> Matrix();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span>  </div><div class=\"line\">        </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// 画出原图像  </span></div><div class=\"line\">            canvas.drawBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);  </div><div class=\"line\">            <span class=\"comment\">// 画出变换后的图像  </span></div><div class=\"line\">            canvas.drawBitmap(bitmap, matrix, <span class=\"keyword\">null</span>);  </div><div class=\"line\">            <span class=\"keyword\">super</span>.onDraw(canvas);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"meta\">@Override</span>  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setImageMatrix</span><span class=\"params\">(Matrix matrix)</span>  </div><div class=\"line\">        </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.matrix.set(matrix);  </div><div class=\"line\">            <span class=\"keyword\">super</span>.setImageMatrix(matrix);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getImageBitmap</span><span class=\"params\">()</span>  </div><div class=\"line\">        </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent e)</span>  </div><div class=\"line\">    </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(e.getAction() == MotionEvent.ACTION_UP)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            Matrix matrix = <span class=\"keyword\">new</span> Matrix();  </div><div class=\"line\">            <span class=\"comment\">// 输出图像的宽度和高度(162 x 251)  </span></div><div class=\"line\">            Log.e(<span class=\"string\">\"TestTransformMatrixActivity\"</span>, <span class=\"string\">\"image size: width x height = \"</span> +  view.getImageBitmap().getWidth() + <span class=\"string\">\" x \"</span> + view.getImageBitmap().getHeight());  </div><div class=\"line\">            <span class=\"comment\">// 1. 平移  </span></div><div class=\"line\">            matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  </div><div class=\"line\">            <span class=\"comment\">// 在x方向平移view.getImageBitmap().getWidth()，在y轴方向view.getImageBitmap().getHeight()  </span></div><div class=\"line\">            view.setImageMatrix(matrix);  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"comment\">// 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\">            <span class=\"keyword\">float</span>[] matrixValues = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">9</span>];  </div><div class=\"line\">            matrix.getValues(matrixValues);  </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                String temp = <span class=\"keyword\">new</span> String();  </div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)  </div><div class=\"line\">                &#123;  </div><div class=\"line\">                    temp += matrixValues[<span class=\"number\">3</span> * i + j ] + <span class=\"string\">\"\\t\"</span>;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">                Log.e(<span class=\"string\">\"TestTransformMatrixActivity\"</span>, temp);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//          // 2. 旋转(围绕图像的中心点)  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setRotate(45f, view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth() * 1.5f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 3. 旋转(围绕坐标原点) + 平移(效果同2)  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setRotate(45f);  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.preTranslate(-1f * view.getImageBitmap().getWidth() / 2f, -1f * view.getImageBitmap().getHeight() / 2f);  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate((float)view.getImageBitmap().getWidth() / 2f, (float)view.getImageBitmap().getHeight() / 2f);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate((float)view.getImageBitmap().getWidth() * 1.5f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;             </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 4. 缩放  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setScale(2f, 2f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth(), view.getImageBitmap().getHeight());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">  </div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 5. 错切 - 水平  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setSkew(0.5f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠           </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth(), 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 6. 错切 - 垂直  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setSkew(0f, 0.5f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;             </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          7. 错切 - 水平 + 垂直  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setSkew(0.5f, 0.5f);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(0f, view.getImageBitmap().getHeight());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 8. 对称 (水平对称)  </span></div><div class=\"line\"><span class=\"comment\">//          float matrix_values[] = &#123;1f, 0f, 0f, 0f, -1f, 0f, 0f, 0f, 1f&#125;;  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setValues(matrix_values);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(0f, view.getImageBitmap().getHeight() * 2f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;             </span></div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 9. 对称 - 垂直  </span></div><div class=\"line\"><span class=\"comment\">//          float matrix_values[] = &#123;-1f, 0f, 0f, 0f, 1f, 0f, 0f, 0f, 1f&#125;;  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setValues(matrix_values);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;     </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠   </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getWidth() * 2f, 0f);  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">  </div><div class=\"line\">              </div><div class=\"line\"><span class=\"comment\">//          // 10. 对称(对称轴为直线y = x)  </span></div><div class=\"line\"><span class=\"comment\">//          float matrix_values[] = &#123;0f, -1f, 0f, -1f, 0f, 0f, 0f, 0f, 1f&#125;;  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.setValues(matrix_values);  </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          float[] matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 做下面的平移变换，纯粹是为了让变换后的图像和原图像不重叠               </span></div><div class=\"line\"><span class=\"comment\">//          matrix.postTranslate(view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth(),   </span></div><div class=\"line\"><span class=\"comment\">//                  view.getImageBitmap().getHeight() + view.getImageBitmap().getWidth());  </span></div><div class=\"line\"><span class=\"comment\">//          view.setImageMatrix(matrix);  </span></div><div class=\"line\"><span class=\"comment\">//            </span></div><div class=\"line\"><span class=\"comment\">//          // 下面的代码是为了查看matrix中的元素  </span></div><div class=\"line\"><span class=\"comment\">//          matrixValues = new float[9];  </span></div><div class=\"line\"><span class=\"comment\">//          matrix.getValues(matrixValues);  </span></div><div class=\"line\"><span class=\"comment\">//          for(int i = 0; i &lt; 3; ++i)  </span></div><div class=\"line\"><span class=\"comment\">//          &#123;  </span></div><div class=\"line\"><span class=\"comment\">//              String temp = new String();  </span></div><div class=\"line\"><span class=\"comment\">//              for(int j = 0; j &lt; 3; ++j)  </span></div><div class=\"line\"><span class=\"comment\">//              &#123;  </span></div><div class=\"line\"><span class=\"comment\">//                  temp += matrixValues[3 * i + j ] + \"\\t\";  </span></div><div class=\"line\"><span class=\"comment\">//              &#125;  </span></div><div class=\"line\"><span class=\"comment\">//              Log.e(\"TestTransformMatrixActivity\", temp);  </span></div><div class=\"line\"><span class=\"comment\">//          &#125;  </span></div><div class=\"line\">              </div><div class=\"line\">            view.invalidate();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面给出上述代码中，各种变换的具体结果及其对应的相关变换矩阵</p>\n<h3 id=\"1-平移\"><a href=\"#1-平移\" class=\"headerlink\" title=\"1.平移\"></a>1.平移</h3><p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712352qQRu.gif\" alt=\"\"></p>\n<p>输出的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217123565Wwz.gif\" alt=\"\"></p>\n<p>请对照第一部分中的“一、平移变换”所讲的情形，考察上述矩阵的正确性。</p>\n<h3 id=\"2-旋转-围绕图像的中心点\"><a href=\"#2-旋转-围绕图像的中心点\" class=\"headerlink\" title=\"2.旋转(围绕图像的中心点)\"></a>2.旋转(围绕图像的中心点)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171250556xp.gif\" alt=\"\"></p>\n<p>输出的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712512Yj1i.gif\" alt=\"\"></p>\n<p>它实际上是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>,view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div><div class=\"line\">matrix.postTranslate(view.getImageBitmap().getWidth()* <span class=\"number\">1.5f</span>, <span class=\"number\">0f</span>);</div></pre></td></tr></table></figure></p>\n<p>这两条语句综合作用的结果。根据第一部分中“二、旋转变换”里面关于围绕某点旋转的公式，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>,view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure></p>\n<p>所产生的转换矩阵就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712644I54M.gif\" alt=\"\"></p>\n<p>而<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.postTranslate(view.getImageBitmap().getWidth()* 1.5f, 0f);</div><div class=\"line\">``` </div><div class=\"line\">的意思就是在上述矩阵的左边再乘以下面的矩阵：</div><div class=\"line\">![][204]</div><div class=\"line\"></div><div class=\"line\">关于post是左乘这一点，我们在前面的理论部分曾经提及过，后面我们还会专门讨论这个问题。</div><div class=\"line\">所以它实际上就是：</div><div class=\"line\">![][205]</div><div class=\"line\"></div><div class=\"line\">出去计算上的精度误差，我们可以看到我们计算出来的结果，和程序直接输出的结果是一致的。</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">### 3.旋转(围绕坐标原点旋转，在加上两次平移，效果同2)</div><div class=\"line\">---</div><div class=\"line\">![][301]</div><div class=\"line\"></div><div class=\"line\">根据第一部分中“二、旋转变换”里面关于围绕某点旋转的解释，不难知道：</div><div class=\"line\">``` java</div><div class=\"line\">matrix.setRotate(45f,view.getImageBitmap().getWidth() / 2f, view.getImageBitmap().getHeight() / 2f);</div></pre></td></tr></table></figure></p>\n<p>等价于<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>);</div><div class=\"line\">matrix.preTranslate(-<span class=\"number\">1f</span>* view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, -<span class=\"number\">1f</span> *view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div><div class=\"line\">matrix.postTranslate((<span class=\"keyword\">float</span>)view.getImageBitmap().getWidth()/ <span class=\"number\">2f</span>, (<span class=\"keyword\">float</span>)view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure></p>\n<p>其中<code>matrix.setRotate(45f)</code>对应的矩阵是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712949GjN7.gif\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.preTranslate(-<span class=\"number\">1f</span>* view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, -<span class=\"number\">1f</span> * view.getImageBitmap().getHeight()/ <span class=\"number\">2f</span>)</div></pre></td></tr></table></figure>\n<p>对应的矩阵是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712956BNj8.gif\" alt=\"\"></p>\n<p>由于是preTranslate，是先乘，也就是右乘，即它应该出现在<code>matrix.setRotate(45f)</code>所对应矩阵的右侧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.postTranslate((<span class=\"keyword\">float</span>)view.getImageBitmap().getWidth()/ <span class=\"number\">2f</span>, (<span class=\"keyword\">float</span>)view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>)</div></pre></td></tr></table></figure>\n<p>对应的矩阵是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321712963iNO1.gif\" alt=\"\"></p>\n<p>这次由于是postTranslate，是后乘，也就是左乘，即它应该出现在<code>matrix.setRotate(45f)</code>所对应矩阵的左侧。</p>\n<p>所以综合起来，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix.setRotate(<span class=\"number\">45f</span>);</div><div class=\"line\">matrix.preTranslate(-<span class=\"number\">1f</span>* view.getImageBitmap().getWidth() / <span class=\"number\">2f</span>, -<span class=\"number\">1f</span> *view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div><div class=\"line\">matrix.postTranslate((<span class=\"keyword\">float</span>)view.getImageBitmap().getWidth()/ <span class=\"number\">2f</span>, (<span class=\"keyword\">float</span>)view.getImageBitmap().getHeight() / <span class=\"number\">2f</span>);</div></pre></td></tr></table></figure></p>\n<p>对应的矩阵就是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713055HOOt.gif\" alt=\"\"></p>\n<p>这和下面这个矩阵(围绕图像中心顺时针旋转45度)其实是一样的：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713100VIOz.gif\" alt=\"\"></p>\n<p>因此，此处变换后的图像和2中变换后的图像时一样的。<br>![][307]</p>\n<h3 id=\"4-缩放变换\"><a href=\"#4-缩放变换\" class=\"headerlink\" title=\"4.缩放变换\"></a>4.缩放变换</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713185yKS7.gif\" alt=\"\"></p>\n<p>程序所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217131941R24.gif\" alt=\"\"></p>\n<p>其中第二个矩阵，其实是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713201VRxs.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“三、缩放变换”和“一、平移变换”说法，自行验证结果。</p>\n<h3 id=\"5-错切变换-水平错切\"><a href=\"#5-错切变换-水平错切\" class=\"headerlink\" title=\"5.错切变换(水平错切)\"></a>5.错切变换(水平错切)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_132171330766G0.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713314Dk69.gif\" alt=\"\"></p>\n<p>其中，第二个矩阵其实是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713322PeML.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"6-错切变换-垂直错切\"><a href=\"#6-错切变换-垂直错切\" class=\"headerlink\" title=\"6.错切变换(垂直错切)\"></a>6.错切变换(垂直错切)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713502Akg2.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713509Hz7p.gif\" alt=\"\"></p>\n<p>其中，第二个矩阵其实是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713516TUvx.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"7-错切变换-水平-垂直错切\"><a href=\"#7-错切变换-水平-垂直错切\" class=\"headerlink\" title=\"7.错切变换(水平+垂直错切)\"></a>7.错切变换(水平+垂直错切)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321713655Qsij.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217136824kKR.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217136931vl4.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“四、错切变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"8-对称变换-水平对称\"><a href=\"#8-对称变换-水平对称\" class=\"headerlink\" title=\"8.对称变换(水平对称)\"></a>8.对称变换(水平对称)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217141232rJI.gif\" alt=\"\"></p>\n<p>代码所输出的两个各矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714133P0ha.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217141417Bi3.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"9-对称变换-垂直对称\"><a href=\"#9-对称变换-垂直对称\" class=\"headerlink\" title=\"9.对称变换(垂直对称)\"></a>9.对称变换(垂直对称)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714261NN3V.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714269Kqs4.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714276ai2f.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"10-对称变换-对称轴为直线y-x\"><a href=\"#10-对称变换-对称轴为直线y-x\" class=\"headerlink\" title=\"10.对称变换(对称轴为直线y = x)\"></a>10.对称变换(对称轴为直线y = x)</h3><hr>\n<p><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217144950030.gif\" alt=\"\"></p>\n<p>代码所输出的两个矩阵分别是：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_13217145038hN8.gif\" alt=\"\"></p>\n<p>其中，后者是下面两个矩阵相乘的结果：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714509sBN4.gif\" alt=\"\"></p>\n<p>大家可以对照第一部分中的“五、对称变换”和“一、平移变换”的相关说法，自行验证结果。</p>\n<h3 id=\"11-关于先乘和后乘的问题\"><a href=\"#11-关于先乘和后乘的问题\" class=\"headerlink\" title=\"11.关于先乘和后乘的问题\"></a>11.关于先乘和后乘的问题</h3><hr>\n<p>由于矩阵的乘法运算不满足交换律，我们在前面曾经多次提及先乘、后乘的问题，即先乘就是矩阵运算中右乘，后乘就是矩阵运算中的左乘。其实先乘、后乘的概念是针对变换操作的时间先后而言的，左乘、右乘是针对矩阵运算的左右位置而言的。以第一部分“二、旋转变换”中围绕某点旋转的情况为例：<br><img src=\"http://hi.csdn.net/attachment/201111/19/0_1321714645396z.gif\" alt=\"\"></p>\n<p>越靠近原图像中像素的矩阵，越先乘，越远离原图像中像素的矩阵，越后乘。事实上，图像处理时，矩阵的运算是从右边往左边方向进行运算的。这就形成了越在右边的矩阵(右乘)，越先运算(先乘)，反之亦然。</p>\n<p>当然，在实际中，如果首先指定了一个matrix，比如我们先setRotate()，即指定了上面变换矩阵中，中间的那个矩阵，那么后续的矩阵到底是pre还是post运算，都是相对这个中间矩阵而言的。</p>"},{"title":"Android刷机-命令篇","date":"2016-05-21T08:20:30.000Z","_content":"\n## 序言\n命令行刷机和线刷本质差不多，一个是工具一个是手动的。\n线刷包解压出来一般都是一些镜像文件（.img），像基带、内核、系统、recovery、boot等，要先关机，进入线刷（bootloader）模式下。如果电脑上有adb环境（没有就下载adb工具），直接执行\n``` bash\nadb reboot bootloader\n```\n进入到线刷模式，下面就给出一些常用命令行（MOTO 为例）\n\n## 命令行\n\n1、刷入手机闪存分区表（请不要乱刷其他机型的，可能导致变砖，请在有教程指引下操作）\n``` bash\nfastboot flash partition gpt.bin\n```\n\n2、刷入摩托罗拉bootleader（请一定不要跨机型刷，或者降版本刷，否则分分钟变砖）\n``` bash\nfastboot flash motoboot motoboot.img\n```\n<!-- more -->\n3、刷入基带\n``` bash\nfastboot flash modem NON-HLOS.bin\n```\n\n4、刷入efs射频表\n``` bash\nfastboot flash fsg fsg.mbn\n```\n\n5、清理基带缓存\n``` bash\nfastboot erase modemst1\n```\n\n6、清理efs射频表\n``` bash\nfastboot erase modemst2\n```\n\n7、刷入缓存\n``` bash\nfastboot flash cache cache.img\n```\n\n8、输入用户数据\n``` bash\nfastboot flash userdata userdata.img\n```\n\n9、重新进入bootleader模式\n``` bash\nfastboot reboot-bootloader\n```\n\n10、刷入内核部分\n``` bash\nfastboot flash boot boot.img\n```\n\n11、刷入系统恢复模式模块\n``` bash\nfastboot flash recovery recovery.img\n```\n\n12、刷入系统部分（有可能system.img被分割为很多个文件 system.*****.01啥的，逐个替换内容中的system.img，按照数字顺序执行即可）\n``` bash\nfastboot flash system system.img\n```\n或\n``` bash\nfastboot flash system system.01\nfastboot flash system system.02\nfastboot flash system system.03\n```\n\n13、这句一般是用在解锁后跨版本升级，清理fastboot模式缓存，作用也是让新的分区表生效，从而可以加载非本区域的原版系统，比如用在国行刷亚太底包上，就可能会用到这一句\n``` bash\nfastboot oem fb_mode_clear\n```\n\n14、还有一些基带相关的：\n\n``` bash\nfastboot flash sbl1 sbl1.mbn\n```\n\n``` bash\nfastboot flash dbi sdi.mbn\n\n```\n``` bash\nfastboot flash aboot emmc_appsboot.mbn\n```\n\n``` bash\nfastboot flash tz tz.mbn\n```\n\n``` bash\nfastboot flash LOGO logo.bin\n```\n\n``` bash\nfastboot flash misc misc.img\n```\n\n``` bash\nfastboot flash oppostanvbk static_nvbk.bin\n```\n\n15、类似双清操作，一般刷机完成之后执行一下这句话，有的不执行可能卡在开机画面\n``` bash\nfastboot -w\n```\n\n## 总结\n没什么技术含量，什么文件使用什么命令行，不过一般的线刷包不会这么多文件，命令行刷机还是需要有一定刷机经验的，还是那句话：**刷机有风险，操作需谨慎**","source":"_posts/Android刷机-命令篇.md","raw":"title: Android刷机-命令篇\ndate: 2016-05-21 16:20:30\ncategories: [Android] \ntags: [fastboot, adb, bootloader]\n---\n\n## 序言\n命令行刷机和线刷本质差不多，一个是工具一个是手动的。\n线刷包解压出来一般都是一些镜像文件（.img），像基带、内核、系统、recovery、boot等，要先关机，进入线刷（bootloader）模式下。如果电脑上有adb环境（没有就下载adb工具），直接执行\n``` bash\nadb reboot bootloader\n```\n进入到线刷模式，下面就给出一些常用命令行（MOTO 为例）\n\n## 命令行\n\n1、刷入手机闪存分区表（请不要乱刷其他机型的，可能导致变砖，请在有教程指引下操作）\n``` bash\nfastboot flash partition gpt.bin\n```\n\n2、刷入摩托罗拉bootleader（请一定不要跨机型刷，或者降版本刷，否则分分钟变砖）\n``` bash\nfastboot flash motoboot motoboot.img\n```\n<!-- more -->\n3、刷入基带\n``` bash\nfastboot flash modem NON-HLOS.bin\n```\n\n4、刷入efs射频表\n``` bash\nfastboot flash fsg fsg.mbn\n```\n\n5、清理基带缓存\n``` bash\nfastboot erase modemst1\n```\n\n6、清理efs射频表\n``` bash\nfastboot erase modemst2\n```\n\n7、刷入缓存\n``` bash\nfastboot flash cache cache.img\n```\n\n8、输入用户数据\n``` bash\nfastboot flash userdata userdata.img\n```\n\n9、重新进入bootleader模式\n``` bash\nfastboot reboot-bootloader\n```\n\n10、刷入内核部分\n``` bash\nfastboot flash boot boot.img\n```\n\n11、刷入系统恢复模式模块\n``` bash\nfastboot flash recovery recovery.img\n```\n\n12、刷入系统部分（有可能system.img被分割为很多个文件 system.*****.01啥的，逐个替换内容中的system.img，按照数字顺序执行即可）\n``` bash\nfastboot flash system system.img\n```\n或\n``` bash\nfastboot flash system system.01\nfastboot flash system system.02\nfastboot flash system system.03\n```\n\n13、这句一般是用在解锁后跨版本升级，清理fastboot模式缓存，作用也是让新的分区表生效，从而可以加载非本区域的原版系统，比如用在国行刷亚太底包上，就可能会用到这一句\n``` bash\nfastboot oem fb_mode_clear\n```\n\n14、还有一些基带相关的：\n\n``` bash\nfastboot flash sbl1 sbl1.mbn\n```\n\n``` bash\nfastboot flash dbi sdi.mbn\n\n```\n``` bash\nfastboot flash aboot emmc_appsboot.mbn\n```\n\n``` bash\nfastboot flash tz tz.mbn\n```\n\n``` bash\nfastboot flash LOGO logo.bin\n```\n\n``` bash\nfastboot flash misc misc.img\n```\n\n``` bash\nfastboot flash oppostanvbk static_nvbk.bin\n```\n\n15、类似双清操作，一般刷机完成之后执行一下这句话，有的不执行可能卡在开机画面\n``` bash\nfastboot -w\n```\n\n## 总结\n没什么技术含量，什么文件使用什么命令行，不过一般的线刷包不会这么多文件，命令行刷机还是需要有一定刷机经验的，还是那句话：**刷机有风险，操作需谨慎**","slug":"Android刷机-命令篇","published":1,"updated":"2016-10-10T06:53:44.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bai001a1giylbqyvfiz","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>命令行刷机和线刷本质差不多，一个是工具一个是手动的。<br>线刷包解压出来一般都是一些镜像文件（.img），像基带、内核、系统、recovery、boot等，要先关机，进入线刷（bootloader）模式下。如果电脑上有adb环境（没有就下载adb工具），直接执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot bootloader</div></pre></td></tr></table></figure></p>\n<p>进入到线刷模式，下面就给出一些常用命令行（MOTO 为例）</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>1、刷入手机闪存分区表（请不要乱刷其他机型的，可能导致变砖，请在有教程指引下操作）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash partition gpt.bin</div></pre></td></tr></table></figure></p>\n<p>2、刷入摩托罗拉bootleader（请一定不要跨机型刷，或者降版本刷，否则分分钟变砖）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash motoboot motoboot.img</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>3、刷入基带<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash modem NON-HLOS.bin</div></pre></td></tr></table></figure></p>\n<p>4、刷入efs射频表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash fsg fsg.mbn</div></pre></td></tr></table></figure></p>\n<p>5、清理基带缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot erase modemst1</div></pre></td></tr></table></figure></p>\n<p>6、清理efs射频表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot erase modemst2</div></pre></td></tr></table></figure></p>\n<p>7、刷入缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash cache cache.img</div></pre></td></tr></table></figure></p>\n<p>8、输入用户数据<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash userdata userdata.img</div></pre></td></tr></table></figure></p>\n<p>9、重新进入bootleader模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot reboot-bootloader</div></pre></td></tr></table></figure></p>\n<p>10、刷入内核部分<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash boot boot.img</div></pre></td></tr></table></figure></p>\n<p>11、刷入系统恢复模式模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash recovery recovery.img</div></pre></td></tr></table></figure></p>\n<p>12、刷入系统部分（有可能system.img被分割为很多个文件 system.<strong>*</strong>.01啥的，逐个替换内容中的system.img，按照数字顺序执行即可）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash system system.img</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash system system.01</div><div class=\"line\">fastboot flash system system.02</div><div class=\"line\">fastboot flash system system.03</div></pre></td></tr></table></figure></p>\n<p>13、这句一般是用在解锁后跨版本升级，清理fastboot模式缓存，作用也是让新的分区表生效，从而可以加载非本区域的原版系统，比如用在国行刷亚太底包上，就可能会用到这一句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot oem fb_mode_clear</div></pre></td></tr></table></figure></p>\n<p>14、还有一些基带相关的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash sbl1 sbl1.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash dbi sdi.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash aboot emmc_appsboot.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash tz tz.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash LOGO logo.bin</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash misc misc.img</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash oppostanvbk static_nvbk.bin</div></pre></td></tr></table></figure>\n<p>15、类似双清操作，一般刷机完成之后执行一下这句话，有的不执行可能卡在开机画面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot -w</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>没什么技术含量，什么文件使用什么命令行，不过一般的线刷包不会这么多文件，命令行刷机还是需要有一定刷机经验的，还是那句话：<strong>刷机有风险，操作需谨慎</strong></p>\n","excerpt":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>命令行刷机和线刷本质差不多，一个是工具一个是手动的。<br>线刷包解压出来一般都是一些镜像文件（.img），像基带、内核、系统、recovery、boot等，要先关机，进入线刷（bootloader）模式下。如果电脑上有adb环境（没有就下载adb工具），直接执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb reboot bootloader</div></pre></td></tr></table></figure></p>\n<p>进入到线刷模式，下面就给出一些常用命令行（MOTO 为例）</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>1、刷入手机闪存分区表（请不要乱刷其他机型的，可能导致变砖，请在有教程指引下操作）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash partition gpt.bin</div></pre></td></tr></table></figure></p>\n<p>2、刷入摩托罗拉bootleader（请一定不要跨机型刷，或者降版本刷，否则分分钟变砖）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash motoboot motoboot.img</div></pre></td></tr></table></figure></p>","more":"<p>3、刷入基带<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash modem NON-HLOS.bin</div></pre></td></tr></table></figure></p>\n<p>4、刷入efs射频表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash fsg fsg.mbn</div></pre></td></tr></table></figure></p>\n<p>5、清理基带缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot erase modemst1</div></pre></td></tr></table></figure></p>\n<p>6、清理efs射频表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot erase modemst2</div></pre></td></tr></table></figure></p>\n<p>7、刷入缓存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash cache cache.img</div></pre></td></tr></table></figure></p>\n<p>8、输入用户数据<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash userdata userdata.img</div></pre></td></tr></table></figure></p>\n<p>9、重新进入bootleader模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot reboot-bootloader</div></pre></td></tr></table></figure></p>\n<p>10、刷入内核部分<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash boot boot.img</div></pre></td></tr></table></figure></p>\n<p>11、刷入系统恢复模式模块<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash recovery recovery.img</div></pre></td></tr></table></figure></p>\n<p>12、刷入系统部分（有可能system.img被分割为很多个文件 system.<strong>*</strong>.01啥的，逐个替换内容中的system.img，按照数字顺序执行即可）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash system system.img</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash system system.01</div><div class=\"line\">fastboot flash system system.02</div><div class=\"line\">fastboot flash system system.03</div></pre></td></tr></table></figure></p>\n<p>13、这句一般是用在解锁后跨版本升级，清理fastboot模式缓存，作用也是让新的分区表生效，从而可以加载非本区域的原版系统，比如用在国行刷亚太底包上，就可能会用到这一句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot oem fb_mode_clear</div></pre></td></tr></table></figure></p>\n<p>14、还有一些基带相关的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash sbl1 sbl1.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash dbi sdi.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash aboot emmc_appsboot.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash tz tz.mbn</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash LOGO logo.bin</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash misc misc.img</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot flash oppostanvbk static_nvbk.bin</div></pre></td></tr></table></figure>\n<p>15、类似双清操作，一般刷机完成之后执行一下这句话，有的不执行可能卡在开机画面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastboot -w</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>没什么技术含量，什么文件使用什么命令行，不过一般的线刷包不会这么多文件，命令行刷机还是需要有一定刷机经验的，还是那句话：<strong>刷机有风险，操作需谨慎</strong></p>"},{"title":"Android之自定义actionbar[笔记]","date":"2016-03-01T03:06:22.000Z","_content":"\n自定义actionbar或toolbar的属性样式：\n\n``` xml\n<style name=\"detail_actionbar_style\" parent=\"AppBaseTheme\">\n        <item name=\"android:windowAnimationStyle\">@null</item>\n        <item name=\"android:windowBackground\">@android:color/transparent</item>\n        <!--<item name=\"android:colorBackgroundCacheHint\">@null</item>-->\n        <!--<item name=\"android:windowFrame\">@null</item>-->\n        <!--<item name=\"android:windowIsFloating\">false</item>-->\n        <item name=\"android:windowIsTranslucent\">true</item>\n        <item name=\"android:windowTranslucentNavigation\">true</item>\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"android:windowActionBar\">false</item>\n        <!-- actionbar -->\n        <item name=\"android:windowActionBarOverlay\">true</item>\n        <item name=\"android:windowContentOverlay\">@null</item>\n        <item name=\"android:actionBarStyle\">@style/ActionBar.Style.Transparent</item>\n        <item name=\"android:actionOverflowButtonStyle\">@style/OverFlow</item>\n    </style>\n    <!-- actionbar -->\n    <style name=\"ActionBar.Transparent\" parent=\"@android:style/Theme.Holo.Light\">\n        <item name=\"android:windowActionBarOverlay\">true</item>\n        <item name=\"android:windowContentOverlay\">@null</item>\n        <item name=\"android:actionBarStyle\">@style/ActionBar.Style.Transparent</item>\n        <item name=\"android:actionOverflowButtonStyle\">@style/OverFlow</item>\n    </style>\n    <!-- 实现Actionbar的透明度 -->\n    <style name=\"ActionBar.Style.Transparent\" parent=\"@android:style/Widget.Holo.ActionBar\">\n        <item name=\"android:background\">@android:color/transparent</item>\n        <item name=\"android:titleTextStyle\">@style/ActionBarText</item>\n    </style>\n    <!-- 标题文字 -->\n    <style name=\"ActionBarText\">\n        <item name=\"android:textSize\">19sp</item>\n        <item name=\"android:textColor\">@android:color/white</item>\n    </style>\n    <!-- 重写actionbar中 OverFlow的属性 -->\n    <style name=\"OverFlow\" parent=\"@android:style/Widget.Holo.ActionButton.Overflow\">\n        <item name=\"android:src\">@drawable/custom_actionbar_overflow</item>\n    </style>\n```","source":"_posts/Android之自定义actionbar[笔记].md","raw":"title: Android之自定义actionbar[笔记]\ndate: 2016-03-01 11:06:22\ncategories: [Android]\ntags: [沉浸式状态栏]\n---\n\n自定义actionbar或toolbar的属性样式：\n\n``` xml\n<style name=\"detail_actionbar_style\" parent=\"AppBaseTheme\">\n        <item name=\"android:windowAnimationStyle\">@null</item>\n        <item name=\"android:windowBackground\">@android:color/transparent</item>\n        <!--<item name=\"android:colorBackgroundCacheHint\">@null</item>-->\n        <!--<item name=\"android:windowFrame\">@null</item>-->\n        <!--<item name=\"android:windowIsFloating\">false</item>-->\n        <item name=\"android:windowIsTranslucent\">true</item>\n        <item name=\"android:windowTranslucentNavigation\">true</item>\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"android:windowActionBar\">false</item>\n        <!-- actionbar -->\n        <item name=\"android:windowActionBarOverlay\">true</item>\n        <item name=\"android:windowContentOverlay\">@null</item>\n        <item name=\"android:actionBarStyle\">@style/ActionBar.Style.Transparent</item>\n        <item name=\"android:actionOverflowButtonStyle\">@style/OverFlow</item>\n    </style>\n    <!-- actionbar -->\n    <style name=\"ActionBar.Transparent\" parent=\"@android:style/Theme.Holo.Light\">\n        <item name=\"android:windowActionBarOverlay\">true</item>\n        <item name=\"android:windowContentOverlay\">@null</item>\n        <item name=\"android:actionBarStyle\">@style/ActionBar.Style.Transparent</item>\n        <item name=\"android:actionOverflowButtonStyle\">@style/OverFlow</item>\n    </style>\n    <!-- 实现Actionbar的透明度 -->\n    <style name=\"ActionBar.Style.Transparent\" parent=\"@android:style/Widget.Holo.ActionBar\">\n        <item name=\"android:background\">@android:color/transparent</item>\n        <item name=\"android:titleTextStyle\">@style/ActionBarText</item>\n    </style>\n    <!-- 标题文字 -->\n    <style name=\"ActionBarText\">\n        <item name=\"android:textSize\">19sp</item>\n        <item name=\"android:textColor\">@android:color/white</item>\n    </style>\n    <!-- 重写actionbar中 OverFlow的属性 -->\n    <style name=\"OverFlow\" parent=\"@android:style/Widget.Holo.ActionButton.Overflow\">\n        <item name=\"android:src\">@drawable/custom_actionbar_overflow</item>\n    </style>\n```","slug":"Android之自定义actionbar[笔记]","published":1,"updated":"2016-10-10T06:53:44.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bak001d1giy87ypfilv","content":"<p>自定义actionbar或toolbar的属性样式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"detail_actionbar_style\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"AppBaseTheme\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAnimationStyle\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowBackground\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;item name=\"android:colorBackgroundCacheHint\"&gt;@null&lt;/item&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;item name=\"android:windowFrame\"&gt;@null&lt;/item&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;item name=\"android:windowIsFloating\"&gt;false&lt;/item&gt;--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsTranslucent\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowTranslucentNavigation\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- actionbar --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowActionBarOverlay\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentOverlay\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionBarStyle\"</span>&gt;</span>@style/ActionBar.Style.Transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionOverflowButtonStyle\"</span>&gt;</span>@style/OverFlow<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- actionbar --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ActionBar.Transparent\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@android:style/Theme.Holo.Light\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowActionBarOverlay\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentOverlay\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionBarStyle\"</span>&gt;</span>@style/ActionBar.Style.Transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionOverflowButtonStyle\"</span>&gt;</span>@style/OverFlow<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 实现Actionbar的透明度 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ActionBar.Style.Transparent\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@android:style/Widget.Holo.ActionBar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:background\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:titleTextStyle\"</span>&gt;</span>@style/ActionBarText<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 标题文字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ActionBarText\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textSize\"</span>&gt;</span>19sp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textColor\"</span>&gt;</span>@android:color/white<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 重写actionbar中 OverFlow的属性 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"OverFlow\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@android:style/Widget.Holo.ActionButton.Overflow\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:src\"</span>&gt;</span>@drawable/custom_actionbar_overflow<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>自定义actionbar或toolbar的属性样式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"detail_actionbar_style\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"AppBaseTheme\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAnimationStyle\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowBackground\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;item name=\"android:colorBackgroundCacheHint\"&gt;@null&lt;/item&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;item name=\"android:windowFrame\"&gt;@null&lt;/item&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;item name=\"android:windowIsFloating\"&gt;false&lt;/item&gt;--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsTranslucent\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowTranslucentNavigation\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- actionbar --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowActionBarOverlay\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentOverlay\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionBarStyle\"</span>&gt;</span>@style/ActionBar.Style.Transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionOverflowButtonStyle\"</span>&gt;</span>@style/OverFlow<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- actionbar --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ActionBar.Transparent\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@android:style/Theme.Holo.Light\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowActionBarOverlay\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentOverlay\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionBarStyle\"</span>&gt;</span>@style/ActionBar.Style.Transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:actionOverflowButtonStyle\"</span>&gt;</span>@style/OverFlow<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 实现Actionbar的透明度 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ActionBar.Style.Transparent\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@android:style/Widget.Holo.ActionBar\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:background\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:titleTextStyle\"</span>&gt;</span>@style/ActionBarText<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 标题文字 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ActionBarText\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textSize\"</span>&gt;</span>19sp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textColor\"</span>&gt;</span>@android:color/white<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 重写actionbar中 OverFlow的属性 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"OverFlow\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@android:style/Widget.Holo.ActionButton.Overflow\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:src\"</span>&gt;</span>@drawable/custom_actionbar_overflow<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"Android刷机-基础篇","date":"2016-05-21T08:19:57.000Z","_content":"\n## 序言\n> 刷机有风险，操作需谨慎\n\n先看看[维基百科](https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5)对刷机的解释：\n\n刷机是一般的手机发烧友最开始接触到的相当有技术含量的一个词，泛指通过软件或者手机自身的OTA文件对系统文件进行更改从而使手机达到自己想要的或者更好的使用效果。有时，智能手机的系统被损坏，造成功能缺失或无法开机，也通常用刷机的方法恢复\n\n刷机在Android系统中用得更广泛，随着Android系统不断升级，用户需要通过刷机来升级自身设备，或者用户想要体验更加流畅的操作与不同而进行第三方ROM进行刷机，也有一些工具或软件可以简化刷机流程\n\n通常第一方ROM指的是操作系统开发者所发布的原生版本(如Google开发的原生Android版本)，第二方指的是个手机制造商所开发出的版本(如HTC的Sense或Sony的接口)，第三方则是由其他人或团队所开发(如Android中的Cygenmode(CM)团队， Slim等)\n<!-- more -->\n\n## 方式\nAndroid刷机分为四种方式：线刷，卡刷，软刷和厂刷\n\n- 软刷：就是利用甜椒、精灵、大师等一键刷机软件进行傻瓜式刷机\n- 卡刷：就是把刷机包直接放到SD卡上，然后通过手机的Recovery刷入\n- 线刷：就是通过计算机上的软件把刷机包用数据线连接手机载入到手机内存中，使其作为“第一启动”的刷机方法。线刷软件都为计算机软件，一般来说不同手机型号有不同的刷机软件\n- 厂刷：寄回厂子刷机，安全性最高，但时间上会更久\n\n软刷和厂刷没什么多说的，都相当于是找人代工了，这里只讲解卡刷和线刷\n\n## 线刷\n线刷也是比较方便快捷的，其实和软刷有异曲同工之妙，不同的手机品牌需要不同的工具（PC软件），下面是我了解的一些，其他的就自己找找吧，也有可能没有\n\n| 手机品牌 | 线刷工具 |\n| :-----: | :-----:|\n| 三星 | Odin |\n| MOTO | RSD Lite |\n| 小米 | MiFlash |\n| 联想 | SP_Flash_Tool |\n| 华为 | HUAWEI Multi-Upgrade Software |\n\n通用线刷步骤：\n- 下载对应手机厂商线刷工具并安装\n- 下载对应手机型号驱动并安装\n- 下载官方提供的刷机包或OTA包\n- 关机，通过组合键进入线刷模式（不同手机组合键不同，自行搜索），通常也叫挖煤模式（甚至网上有卖挖煤神器的）\n- 通过数据线（最好是原装数据线）链接电脑，如果驱动安装正常，就能正常连接手机，一般软件都会有链接提示，然后就是通过软件选择相应的刷机包（或者是需要先解压，在软件界面选择不同文件）\n- 开始刷机，等待读条完成\n\n注：线刷要保证电量足够，不建议新手操作，这里面的细节很多，很多手机出厂都是上锁的，像htc还分S-ON和S-OFF，默认线刷只是平刷或更高版本，不能降级刷，这些步骤是核心步骤，其实还有一种手动的线刷的方式，就是通过命令手动刷镜像文件，和工具的原理一样，详情请看下一篇文章\n\n","source":"_posts/Android刷机-基础篇.md","raw":"title: Android刷机-基础篇\ndate: 2016-05-21 16:19:57\ncategories: [Android]\ntags: [卡刷, 线刷]\n---\n\n## 序言\n> 刷机有风险，操作需谨慎\n\n先看看[维基百科](https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5)对刷机的解释：\n\n刷机是一般的手机发烧友最开始接触到的相当有技术含量的一个词，泛指通过软件或者手机自身的OTA文件对系统文件进行更改从而使手机达到自己想要的或者更好的使用效果。有时，智能手机的系统被损坏，造成功能缺失或无法开机，也通常用刷机的方法恢复\n\n刷机在Android系统中用得更广泛，随着Android系统不断升级，用户需要通过刷机来升级自身设备，或者用户想要体验更加流畅的操作与不同而进行第三方ROM进行刷机，也有一些工具或软件可以简化刷机流程\n\n通常第一方ROM指的是操作系统开发者所发布的原生版本(如Google开发的原生Android版本)，第二方指的是个手机制造商所开发出的版本(如HTC的Sense或Sony的接口)，第三方则是由其他人或团队所开发(如Android中的Cygenmode(CM)团队， Slim等)\n<!-- more -->\n\n## 方式\nAndroid刷机分为四种方式：线刷，卡刷，软刷和厂刷\n\n- 软刷：就是利用甜椒、精灵、大师等一键刷机软件进行傻瓜式刷机\n- 卡刷：就是把刷机包直接放到SD卡上，然后通过手机的Recovery刷入\n- 线刷：就是通过计算机上的软件把刷机包用数据线连接手机载入到手机内存中，使其作为“第一启动”的刷机方法。线刷软件都为计算机软件，一般来说不同手机型号有不同的刷机软件\n- 厂刷：寄回厂子刷机，安全性最高，但时间上会更久\n\n软刷和厂刷没什么多说的，都相当于是找人代工了，这里只讲解卡刷和线刷\n\n## 线刷\n线刷也是比较方便快捷的，其实和软刷有异曲同工之妙，不同的手机品牌需要不同的工具（PC软件），下面是我了解的一些，其他的就自己找找吧，也有可能没有\n\n| 手机品牌 | 线刷工具 |\n| :-----: | :-----:|\n| 三星 | Odin |\n| MOTO | RSD Lite |\n| 小米 | MiFlash |\n| 联想 | SP_Flash_Tool |\n| 华为 | HUAWEI Multi-Upgrade Software |\n\n通用线刷步骤：\n- 下载对应手机厂商线刷工具并安装\n- 下载对应手机型号驱动并安装\n- 下载官方提供的刷机包或OTA包\n- 关机，通过组合键进入线刷模式（不同手机组合键不同，自行搜索），通常也叫挖煤模式（甚至网上有卖挖煤神器的）\n- 通过数据线（最好是原装数据线）链接电脑，如果驱动安装正常，就能正常连接手机，一般软件都会有链接提示，然后就是通过软件选择相应的刷机包（或者是需要先解压，在软件界面选择不同文件）\n- 开始刷机，等待读条完成\n\n注：线刷要保证电量足够，不建议新手操作，这里面的细节很多，很多手机出厂都是上锁的，像htc还分S-ON和S-OFF，默认线刷只是平刷或更高版本，不能降级刷，这些步骤是核心步骤，其实还有一种手动的线刷的方式，就是通过命令手动刷镜像文件，和工具的原理一样，详情请看下一篇文章\n\n","slug":"Android刷机-基础篇","published":1,"updated":"2016-10-10T06:53:44.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bam001g1giyj85k8z0j","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><blockquote>\n<p>刷机有风险，操作需谨慎</p>\n</blockquote>\n<p>先看看<a href=\"https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5\" target=\"_blank\" rel=\"external\">维基百科</a>对刷机的解释：</p>\n<p>刷机是一般的手机发烧友最开始接触到的相当有技术含量的一个词，泛指通过软件或者手机自身的OTA文件对系统文件进行更改从而使手机达到自己想要的或者更好的使用效果。有时，智能手机的系统被损坏，造成功能缺失或无法开机，也通常用刷机的方法恢复</p>\n<p>刷机在Android系统中用得更广泛，随着Android系统不断升级，用户需要通过刷机来升级自身设备，或者用户想要体验更加流畅的操作与不同而进行第三方ROM进行刷机，也有一些工具或软件可以简化刷机流程</p>\n<p>通常第一方ROM指的是操作系统开发者所发布的原生版本(如Google开发的原生Android版本)，第二方指的是个手机制造商所开发出的版本(如HTC的Sense或Sony的接口)，第三方则是由其他人或团队所开发(如Android中的Cygenmode(CM)团队， Slim等)<br><a id=\"more\"></a></p>\n<h2 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h2><p>Android刷机分为四种方式：线刷，卡刷，软刷和厂刷</p>\n<ul>\n<li>软刷：就是利用甜椒、精灵、大师等一键刷机软件进行傻瓜式刷机</li>\n<li>卡刷：就是把刷机包直接放到SD卡上，然后通过手机的Recovery刷入</li>\n<li>线刷：就是通过计算机上的软件把刷机包用数据线连接手机载入到手机内存中，使其作为“第一启动”的刷机方法。线刷软件都为计算机软件，一般来说不同手机型号有不同的刷机软件</li>\n<li>厂刷：寄回厂子刷机，安全性最高，但时间上会更久</li>\n</ul>\n<p>软刷和厂刷没什么多说的，都相当于是找人代工了，这里只讲解卡刷和线刷</p>\n<h2 id=\"线刷\"><a href=\"#线刷\" class=\"headerlink\" title=\"线刷\"></a>线刷</h2><p>线刷也是比较方便快捷的，其实和软刷有异曲同工之妙，不同的手机品牌需要不同的工具（PC软件），下面是我了解的一些，其他的就自己找找吧，也有可能没有</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">手机品牌</th>\n<th style=\"text-align:center\">线刷工具</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">三星</td>\n<td style=\"text-align:center\">Odin</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MOTO</td>\n<td style=\"text-align:center\">RSD Lite</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">小米</td>\n<td style=\"text-align:center\">MiFlash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">联想</td>\n<td style=\"text-align:center\">SP_Flash_Tool</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">华为</td>\n<td style=\"text-align:center\">HUAWEI Multi-Upgrade Software</td>\n</tr>\n</tbody>\n</table>\n<p>通用线刷步骤：</p>\n<ul>\n<li>下载对应手机厂商线刷工具并安装</li>\n<li>下载对应手机型号驱动并安装</li>\n<li>下载官方提供的刷机包或OTA包</li>\n<li>关机，通过组合键进入线刷模式（不同手机组合键不同，自行搜索），通常也叫挖煤模式（甚至网上有卖挖煤神器的）</li>\n<li>通过数据线（最好是原装数据线）链接电脑，如果驱动安装正常，就能正常连接手机，一般软件都会有链接提示，然后就是通过软件选择相应的刷机包（或者是需要先解压，在软件界面选择不同文件）</li>\n<li>开始刷机，等待读条完成</li>\n</ul>\n<p>注：线刷要保证电量足够，不建议新手操作，这里面的细节很多，很多手机出厂都是上锁的，像htc还分S-ON和S-OFF，默认线刷只是平刷或更高版本，不能降级刷，这些步骤是核心步骤，其实还有一种手动的线刷的方式，就是通过命令手动刷镜像文件，和工具的原理一样，详情请看下一篇文章</p>\n","excerpt":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><blockquote>\n<p>刷机有风险，操作需谨慎</p>\n</blockquote>\n<p>先看看<a href=\"https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5\">维基百科</a>对刷机的解释：</p>\n<p>刷机是一般的手机发烧友最开始接触到的相当有技术含量的一个词，泛指通过软件或者手机自身的OTA文件对系统文件进行更改从而使手机达到自己想要的或者更好的使用效果。有时，智能手机的系统被损坏，造成功能缺失或无法开机，也通常用刷机的方法恢复</p>\n<p>刷机在Android系统中用得更广泛，随着Android系统不断升级，用户需要通过刷机来升级自身设备，或者用户想要体验更加流畅的操作与不同而进行第三方ROM进行刷机，也有一些工具或软件可以简化刷机流程</p>\n<p>通常第一方ROM指的是操作系统开发者所发布的原生版本(如Google开发的原生Android版本)，第二方指的是个手机制造商所开发出的版本(如HTC的Sense或Sony的接口)，第三方则是由其他人或团队所开发(如Android中的Cygenmode(CM)团队， Slim等)<br>","more":"</p>\n<h2 id=\"方式\"><a href=\"#方式\" class=\"headerlink\" title=\"方式\"></a>方式</h2><p>Android刷机分为四种方式：线刷，卡刷，软刷和厂刷</p>\n<ul>\n<li>软刷：就是利用甜椒、精灵、大师等一键刷机软件进行傻瓜式刷机</li>\n<li>卡刷：就是把刷机包直接放到SD卡上，然后通过手机的Recovery刷入</li>\n<li>线刷：就是通过计算机上的软件把刷机包用数据线连接手机载入到手机内存中，使其作为“第一启动”的刷机方法。线刷软件都为计算机软件，一般来说不同手机型号有不同的刷机软件</li>\n<li>厂刷：寄回厂子刷机，安全性最高，但时间上会更久</li>\n</ul>\n<p>软刷和厂刷没什么多说的，都相当于是找人代工了，这里只讲解卡刷和线刷</p>\n<h2 id=\"线刷\"><a href=\"#线刷\" class=\"headerlink\" title=\"线刷\"></a>线刷</h2><p>线刷也是比较方便快捷的，其实和软刷有异曲同工之妙，不同的手机品牌需要不同的工具（PC软件），下面是我了解的一些，其他的就自己找找吧，也有可能没有</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">手机品牌</th>\n<th style=\"text-align:center\">线刷工具</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">三星</td>\n<td style=\"text-align:center\">Odin</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MOTO</td>\n<td style=\"text-align:center\">RSD Lite</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">小米</td>\n<td style=\"text-align:center\">MiFlash</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">联想</td>\n<td style=\"text-align:center\">SP_Flash_Tool</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">华为</td>\n<td style=\"text-align:center\">HUAWEI Multi-Upgrade Software</td>\n</tr>\n</tbody>\n</table>\n<p>通用线刷步骤：</p>\n<ul>\n<li>下载对应手机厂商线刷工具并安装</li>\n<li>下载对应手机型号驱动并安装</li>\n<li>下载官方提供的刷机包或OTA包</li>\n<li>关机，通过组合键进入线刷模式（不同手机组合键不同，自行搜索），通常也叫挖煤模式（甚至网上有卖挖煤神器的）</li>\n<li>通过数据线（最好是原装数据线）链接电脑，如果驱动安装正常，就能正常连接手机，一般软件都会有链接提示，然后就是通过软件选择相应的刷机包（或者是需要先解压，在软件界面选择不同文件）</li>\n<li>开始刷机，等待读条完成</li>\n</ul>\n<p>注：线刷要保证电量足够，不建议新手操作，这里面的细节很多，很多手机出厂都是上锁的，像htc还分S-ON和S-OFF，默认线刷只是平刷或更高版本，不能降级刷，这些步骤是核心步骤，其实还有一种手动的线刷的方式，就是通过命令手动刷镜像文件，和工具的原理一样，详情请看下一篇文章</p>"},{"title":"Http协议简介","date":"2016-03-02T06:20:33.000Z","_content":"\n\n> 原作者：吾爱\n> 源地址：[点击跳转](http://my.oschina.net/cxz001/blog/331671)\n\n## 序言\n\n![request-response][1]\n我们平时在浏览网页的时候都是使用浏览器，输入你要的网址后回车，就会显示出我们所想要的内容，看似这个简单的用户操作行为的背后，Web的工作原理是怎样的呢？到底隐藏了些什么呢？\n\n对于传统的上网流程，系统它是这么做的：浏览器本身它是一个客户端，当输入URL地址的时候，浏览器首先会去请求DNS服务器，通过DNS查询获取相应的域名所对应的IP地址，然后通过这个映射的IP地址找到IP对应的服务器，并建立连接，等浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理，返回HTTP Response（响应）包，客户端浏览器收到来自服务器的响应后就开始渲染这个Response包里的主体（body）部分，等收到全部的内容后断开与该服务器之间的连接。\n\n![web-request-process][2]\n<!-- more -->\n\n一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是Web浏览器(其实手机端客户端内部也是浏览器实现的)。\n\n## Web服务器的工作原理可以简单地定义为：\n|       |       |\n| ----- | ----- |\n| 1 \t| 客户机通过TCP/IP协议建立到服务器的TCP连接 |\n| 2 \t| 客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档 |\n| 3 \t|服务器向客户机发送HTTP协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端 |\n| 4 \t| 客户机与服务器断开。由客户端解释HTML文档，在客户端屏幕上渲染图形结果|\n\n一个简单的HTTP事务就是这样实现的，看起来很复杂，原理其实是挺简单的。需要注意的是客户机与服务器之间的通信是非持久连接的，也就是当服务器发送了应答后就与客户机断开连接，等待下一次请求。\n\n## URL和DNS解析\n\n我们浏览网页都是通过URL访问的，那么URL到底是怎么样的呢？\nURL(Uniform Resource Locator)是“统一资源定位符”的英文缩写，用于描述一个网络上的资源, 基本格式如下：\n\n` html\nscheme://host[:port#]/path/.../[?query-string][#anchor]\n`\n\n|        |        |\n| ------ | ------ |\n| scheme | 指定低层使用的协议(例如：http, https, ftp) |\n| host   | HTTP服务器的IP地址或者域名 |\n| port   | HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 http://www.qixing318.com:80/ |\n| path   | 访问资源的路径 |\n| query-string | 发送给http服务器的数据 |\n| anchor | 锚 |\n\nDNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它从事将主机名或域名转换为实际IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。\n\n![dns-core][3]\n\n## DNS工作原理\n\n更详细的DNS解析的过程如下，这个过程有助于我们理解DNS的工作模式\n\n\n|     |     |\n| --- | --- |\n|  1  | 在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。|\n|  2  |\t如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。|\n|  3  | 如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。|\n|  4  | 如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。|\n|  5  |如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至 “根DNS服务器”，“根DNS服务器”收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qixing318.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qixing318.com域服务器，重复上面的动作，进行查询，直至找到www.qixing318.com主机。|\n|   6  | 如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。|\n\n![dns-process][4]\n\n\n## DNS解析的整个流程\n\n所谓 递归查询过程 就是 “查询的递交者” 更替, 而 迭代查询过程 则是 “查询的递交者”不变。\n> 举个例子来说，你想知道某个一起上法律课的女孩的电话，并且你偷偷拍了她的照片，回到寝室告诉一个很仗义的哥们儿，这个哥们儿二话没说，拍着胸脯告诉你，甭急，我替你查(此处完成了一次递归查询，即，问询者的角色更替)。然后他拿着照片问了学院大四学长，学长告诉他，这姑娘是xx系的；然后这哥们儿马不停蹄又问了xx系的办公室主任助理同学，助理同学说是xx系yy班的，然后很仗义的哥们儿去xx系yy班的班长那里取到了该女孩儿电话。(此处完成若干次迭代查询，即，问询者角色不变，但反复更替问询对象)最后，他把号码交到了你手里。完成整个查询过程。\n通过上面的步骤，我们最后获取的是IP地址，也就是浏览器最后发起请求的时候是基于IP来和服务器做信息交互的。\n\n## HTTP协议详解\n\nHTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。\n\nHTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议,它建立在TCP协议之上，一般采用TCP的80端口。它是一个请求、响应协议--客户端发出一个请求，服务器响应这个请求。\n\n在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。\n\nHTTP协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题， Web程序引入了Cookie机制来维护连接的可持续状态。\n\n> HTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DdoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。\n\n## HTTP请求包（浏览器信息）\n\n我们先来看看Request包的结构, Request包分为3部分，第一部分叫Request line（请求行）, 第二部分叫Request header（请求头）,第三部分是body（主体）。\n\nheader和body之间有个空行，请求包的例子所示:\n\n|     |     |\n| --- | --- |\n| GET /domains/example/ HTTP/1.1 | 请求行: 请求方法 请求URI HTTP协议/协议版本 |\n| Host：www.qixing318.com. | 服务端的主机名 |\n| User-Agent：Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4 | 客户端浏览器信息 |\n| Accept：text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 | 客户端能接收的mine类型 |\n| Accept-Encoding：gzip,deflate,sdcn | 是否支持流压缩 |\n| Accept-Charset：UTF-8,*;q=0.5 | 客户端字符编码集 |\n| \"\\r\\n\\r\\n\" | 空行,用于分割请求头和消息体 |\n| \"\\r\\n\\r\\n\" | 空行,消息体,请求资源参数,例如POST传递的参数 |\n\nHTTP协议定义了很多与服务器交互的请求方法，最基本的有4种，分别是GET,POST,PUT,DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。\n\n## 通过fiddler抓包可以看到如下请求信息:\n\n![fiddler-get][5]\n上图为：fiddler抓取的GET信息\n\n![fiddler-post][6]\n上图为：fiddler抓取的POST信息\n\n## GET和POST的区别:\n\n|     |     |\n| --- | --- |\n| 1 | 我们可以看到GET请求消息体为空，POST请求带有消息体。|\n| 2 | GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&相连，如EditPosts.aspx?name=test1&id=123456。POST方法是把提交的数据放在HTTP包的body中。|\n| 3 | GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。|\n| 4 | GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。|\n\n## HTTP响应包（服务器信息）\n\n我们再来看看HTTP的response包，他的结构如下：\n\n|     |     |\n| --- | --- |\n| HTTP/1.1 200 OK | 状态行 |\n| Server: nginx/1.0.8 | 服务器使用的WEB软件名及版本 |\n| Date:Date: Tue, 30 Oct 2012 04:14:25 GMT | 发送时间 |\n| Content-Type: text/html | 服务器发送信息的类型 |\n| Transfer-Encoding: chunked | 表示发送HTTP包是分段发的 |\n| Connection: keep-alive | 保持连接状态 |\n| Content-Length: 90 | 消息主体内容长度 |\n| \\r\\n | 空行，用来分割消息头和主体 |\n| <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"... | 消息体部分 |\n\nResponse包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。\n状态码用来告诉HTTP客户端,HTTP服务器是否产生了预期的Response。\nHTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别\n> [状态码详细查询](https://httpstatuses.com/)\n\n|     |     |\n| --- | --- |\n| 1XX | 提示信息 - 表示请求已被成功接收，继续处理 |\n| 2XX | 成功 - 表示请求已被成功接收，理解，接受 |\n| 3XX | 重定向 - 要完成请求必须进行更进一步的处理 |\n| 4XX | 客户端错误 - 请求有语法错误或请求无法实现 |\n| 5XX | 服务器端错误 - 服务器未能实现合法的请求 |\n\n我们看下面这个图展示了详细的返回信息，左边可以看到有很多的资源返回码，200是常用的，表示正常信息，302表示跳转。response header里面展示了详细的信息。\n![request-allinfo][7]\n【上图：访问一次网站的全部请求信息】\n\n## HTTP协议是无状态的和Connection: keep-alive的区别\n\n无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。\nHTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（面对无连接）。\n从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。\nKeep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件（如Apache）中设置这个时间。\n\n## 请求实例\n![request-entity][8]\n\n【上图为：一次请求的request和response】\n\n上面这张图我们可以了解到整个的通讯过程，同时细心的读者是否注意到了一点，一个URL请求但是左边栏里面为什么会有那么多的资源请求(这些都是静态文件，go对于静态文件有专门的处理方式)。\n\n这个就是浏览器的一个功能，第一次请求url，服务器端返回的是html页面，然后浏览器开始渲染HTML：当解析到HTML DOM里面的图片连接，css脚本和js脚本的链接，浏览器就会自动发起一个请求静态资源的HTTP请求，获取相对应的静态资源，然后浏览器就会渲染出来，最终将所有资源整合、渲染，完整展现在我们面前的屏幕上。\n\n> 网页优化方面有一项措施是减少HTTP请求次数，就是把尽量多的css和js资源合并在一起，目的是尽量减少网页请求静态资源的次数，提高网页加载速度，同时减缓服务器的压力。\n\n\n\n[1]: http://www.qixing318.com/uploads/blog/image/20150120/d0177c725e5b3660d9984b0f70e431f0.jpg\n[2]: http://www.qixing318.com/uploads/blog/image/20150120/9f039f15b643c9cea8bab75b92f3e26b.png\n[3]: http://www.qixing318.com/uploads/blog/image/20150120/97fc06248d4bc542a355ddfce1549044.png\n[4]: http://www.qixing318.com/uploads/blog/image/20150120/639c39cf315ddbd717d3d2d78ff74228.png\n[5]: http://www.qixing318.com/uploads/blog/image/20150120/1b655d5bc2e339010d3857fb50c841a2.png\n[6]: http://www.qixing318.com/uploads/blog/image/20150120/125b42ec4dcfb1e5601c8e2695076fb9.png\n[7]: http://www.qixing318.com/uploads/blog/image/20150120/c9e285dfb362101c4d258534ccfa5401.png\n[8]: http://www.qixing318.com/uploads/blog/image/20150120/919ca19ef2176dacecdd2824083e9baa.png","source":"_posts/Http协议简介.md","raw":"title: Http协议简介\ndate: 2016-03-02 14:20:33\ncategories: [Java]\ntags: [http协议]\n---\n\n\n> 原作者：吾爱\n> 源地址：[点击跳转](http://my.oschina.net/cxz001/blog/331671)\n\n## 序言\n\n![request-response][1]\n我们平时在浏览网页的时候都是使用浏览器，输入你要的网址后回车，就会显示出我们所想要的内容，看似这个简单的用户操作行为的背后，Web的工作原理是怎样的呢？到底隐藏了些什么呢？\n\n对于传统的上网流程，系统它是这么做的：浏览器本身它是一个客户端，当输入URL地址的时候，浏览器首先会去请求DNS服务器，通过DNS查询获取相应的域名所对应的IP地址，然后通过这个映射的IP地址找到IP对应的服务器，并建立连接，等浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理，返回HTTP Response（响应）包，客户端浏览器收到来自服务器的响应后就开始渲染这个Response包里的主体（body）部分，等收到全部的内容后断开与该服务器之间的连接。\n\n![web-request-process][2]\n<!-- more -->\n\n一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是Web浏览器(其实手机端客户端内部也是浏览器实现的)。\n\n## Web服务器的工作原理可以简单地定义为：\n|       |       |\n| ----- | ----- |\n| 1 \t| 客户机通过TCP/IP协议建立到服务器的TCP连接 |\n| 2 \t| 客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档 |\n| 3 \t|服务器向客户机发送HTTP协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端 |\n| 4 \t| 客户机与服务器断开。由客户端解释HTML文档，在客户端屏幕上渲染图形结果|\n\n一个简单的HTTP事务就是这样实现的，看起来很复杂，原理其实是挺简单的。需要注意的是客户机与服务器之间的通信是非持久连接的，也就是当服务器发送了应答后就与客户机断开连接，等待下一次请求。\n\n## URL和DNS解析\n\n我们浏览网页都是通过URL访问的，那么URL到底是怎么样的呢？\nURL(Uniform Resource Locator)是“统一资源定位符”的英文缩写，用于描述一个网络上的资源, 基本格式如下：\n\n` html\nscheme://host[:port#]/path/.../[?query-string][#anchor]\n`\n\n|        |        |\n| ------ | ------ |\n| scheme | 指定低层使用的协议(例如：http, https, ftp) |\n| host   | HTTP服务器的IP地址或者域名 |\n| port   | HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 http://www.qixing318.com:80/ |\n| path   | 访问资源的路径 |\n| query-string | 发送给http服务器的数据 |\n| anchor | 锚 |\n\nDNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它从事将主机名或域名转换为实际IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。\n\n![dns-core][3]\n\n## DNS工作原理\n\n更详细的DNS解析的过程如下，这个过程有助于我们理解DNS的工作模式\n\n\n|     |     |\n| --- | --- |\n|  1  | 在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。|\n|  2  |\t如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。|\n|  3  | 如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。|\n|  4  | 如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。|\n|  5  |如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至 “根DNS服务器”，“根DNS服务器”收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qixing318.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qixing318.com域服务器，重复上面的动作，进行查询，直至找到www.qixing318.com主机。|\n|   6  | 如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。|\n\n![dns-process][4]\n\n\n## DNS解析的整个流程\n\n所谓 递归查询过程 就是 “查询的递交者” 更替, 而 迭代查询过程 则是 “查询的递交者”不变。\n> 举个例子来说，你想知道某个一起上法律课的女孩的电话，并且你偷偷拍了她的照片，回到寝室告诉一个很仗义的哥们儿，这个哥们儿二话没说，拍着胸脯告诉你，甭急，我替你查(此处完成了一次递归查询，即，问询者的角色更替)。然后他拿着照片问了学院大四学长，学长告诉他，这姑娘是xx系的；然后这哥们儿马不停蹄又问了xx系的办公室主任助理同学，助理同学说是xx系yy班的，然后很仗义的哥们儿去xx系yy班的班长那里取到了该女孩儿电话。(此处完成若干次迭代查询，即，问询者角色不变，但反复更替问询对象)最后，他把号码交到了你手里。完成整个查询过程。\n通过上面的步骤，我们最后获取的是IP地址，也就是浏览器最后发起请求的时候是基于IP来和服务器做信息交互的。\n\n## HTTP协议详解\n\nHTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。\n\nHTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议,它建立在TCP协议之上，一般采用TCP的80端口。它是一个请求、响应协议--客户端发出一个请求，服务器响应这个请求。\n\n在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。\n\nHTTP协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题， Web程序引入了Cookie机制来维护连接的可持续状态。\n\n> HTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DdoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。\n\n## HTTP请求包（浏览器信息）\n\n我们先来看看Request包的结构, Request包分为3部分，第一部分叫Request line（请求行）, 第二部分叫Request header（请求头）,第三部分是body（主体）。\n\nheader和body之间有个空行，请求包的例子所示:\n\n|     |     |\n| --- | --- |\n| GET /domains/example/ HTTP/1.1 | 请求行: 请求方法 请求URI HTTP协议/协议版本 |\n| Host：www.qixing318.com. | 服务端的主机名 |\n| User-Agent：Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4 | 客户端浏览器信息 |\n| Accept：text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 | 客户端能接收的mine类型 |\n| Accept-Encoding：gzip,deflate,sdcn | 是否支持流压缩 |\n| Accept-Charset：UTF-8,*;q=0.5 | 客户端字符编码集 |\n| \"\\r\\n\\r\\n\" | 空行,用于分割请求头和消息体 |\n| \"\\r\\n\\r\\n\" | 空行,消息体,请求资源参数,例如POST传递的参数 |\n\nHTTP协议定义了很多与服务器交互的请求方法，最基本的有4种，分别是GET,POST,PUT,DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。\n\n## 通过fiddler抓包可以看到如下请求信息:\n\n![fiddler-get][5]\n上图为：fiddler抓取的GET信息\n\n![fiddler-post][6]\n上图为：fiddler抓取的POST信息\n\n## GET和POST的区别:\n\n|     |     |\n| --- | --- |\n| 1 | 我们可以看到GET请求消息体为空，POST请求带有消息体。|\n| 2 | GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&相连，如EditPosts.aspx?name=test1&id=123456。POST方法是把提交的数据放在HTTP包的body中。|\n| 3 | GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。|\n| 4 | GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。|\n\n## HTTP响应包（服务器信息）\n\n我们再来看看HTTP的response包，他的结构如下：\n\n|     |     |\n| --- | --- |\n| HTTP/1.1 200 OK | 状态行 |\n| Server: nginx/1.0.8 | 服务器使用的WEB软件名及版本 |\n| Date:Date: Tue, 30 Oct 2012 04:14:25 GMT | 发送时间 |\n| Content-Type: text/html | 服务器发送信息的类型 |\n| Transfer-Encoding: chunked | 表示发送HTTP包是分段发的 |\n| Connection: keep-alive | 保持连接状态 |\n| Content-Length: 90 | 消息主体内容长度 |\n| \\r\\n | 空行，用来分割消息头和主体 |\n| <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"... | 消息体部分 |\n\nResponse包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。\n状态码用来告诉HTTP客户端,HTTP服务器是否产生了预期的Response。\nHTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别\n> [状态码详细查询](https://httpstatuses.com/)\n\n|     |     |\n| --- | --- |\n| 1XX | 提示信息 - 表示请求已被成功接收，继续处理 |\n| 2XX | 成功 - 表示请求已被成功接收，理解，接受 |\n| 3XX | 重定向 - 要完成请求必须进行更进一步的处理 |\n| 4XX | 客户端错误 - 请求有语法错误或请求无法实现 |\n| 5XX | 服务器端错误 - 服务器未能实现合法的请求 |\n\n我们看下面这个图展示了详细的返回信息，左边可以看到有很多的资源返回码，200是常用的，表示正常信息，302表示跳转。response header里面展示了详细的信息。\n![request-allinfo][7]\n【上图：访问一次网站的全部请求信息】\n\n## HTTP协议是无状态的和Connection: keep-alive的区别\n\n无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。\nHTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（面对无连接）。\n从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。\nKeep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件（如Apache）中设置这个时间。\n\n## 请求实例\n![request-entity][8]\n\n【上图为：一次请求的request和response】\n\n上面这张图我们可以了解到整个的通讯过程，同时细心的读者是否注意到了一点，一个URL请求但是左边栏里面为什么会有那么多的资源请求(这些都是静态文件，go对于静态文件有专门的处理方式)。\n\n这个就是浏览器的一个功能，第一次请求url，服务器端返回的是html页面，然后浏览器开始渲染HTML：当解析到HTML DOM里面的图片连接，css脚本和js脚本的链接，浏览器就会自动发起一个请求静态资源的HTTP请求，获取相对应的静态资源，然后浏览器就会渲染出来，最终将所有资源整合、渲染，完整展现在我们面前的屏幕上。\n\n> 网页优化方面有一项措施是减少HTTP请求次数，就是把尽量多的css和js资源合并在一起，目的是尽量减少网页请求静态资源的次数，提高网页加载速度，同时减缓服务器的压力。\n\n\n\n[1]: http://www.qixing318.com/uploads/blog/image/20150120/d0177c725e5b3660d9984b0f70e431f0.jpg\n[2]: http://www.qixing318.com/uploads/blog/image/20150120/9f039f15b643c9cea8bab75b92f3e26b.png\n[3]: http://www.qixing318.com/uploads/blog/image/20150120/97fc06248d4bc542a355ddfce1549044.png\n[4]: http://www.qixing318.com/uploads/blog/image/20150120/639c39cf315ddbd717d3d2d78ff74228.png\n[5]: http://www.qixing318.com/uploads/blog/image/20150120/1b655d5bc2e339010d3857fb50c841a2.png\n[6]: http://www.qixing318.com/uploads/blog/image/20150120/125b42ec4dcfb1e5601c8e2695076fb9.png\n[7]: http://www.qixing318.com/uploads/blog/image/20150120/c9e285dfb362101c4d258534ccfa5401.png\n[8]: http://www.qixing318.com/uploads/blog/image/20150120/919ca19ef2176dacecdd2824083e9baa.png","slug":"Http协议简介","published":1,"updated":"2016-10-10T06:53:44.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6baq001k1giyq016ap9w","content":"<blockquote>\n<p>原作者：吾爱<br>源地址：<a href=\"http://my.oschina.net/cxz001/blog/331671\" target=\"_blank\" rel=\"external\">点击跳转</a></p>\n</blockquote>\n<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/d0177c725e5b3660d9984b0f70e431f0.jpg\" alt=\"request-response\"><br>我们平时在浏览网页的时候都是使用浏览器，输入你要的网址后回车，就会显示出我们所想要的内容，看似这个简单的用户操作行为的背后，Web的工作原理是怎样的呢？到底隐藏了些什么呢？</p>\n<p>对于传统的上网流程，系统它是这么做的：浏览器本身它是一个客户端，当输入URL地址的时候，浏览器首先会去请求DNS服务器，通过DNS查询获取相应的域名所对应的IP地址，然后通过这个映射的IP地址找到IP对应的服务器，并建立连接，等浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理，返回HTTP Response（响应）包，客户端浏览器收到来自服务器的响应后就开始渲染这个Response包里的主体（body）部分，等收到全部的内容后断开与该服务器之间的连接。</p>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/9f039f15b643c9cea8bab75b92f3e26b.png\" alt=\"web-request-process\"><br><a id=\"more\"></a></p>\n<p>一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是Web浏览器(其实手机端客户端内部也是浏览器实现的)。</p>\n<h2 id=\"Web服务器的工作原理可以简单地定义为：\"><a href=\"#Web服务器的工作原理可以简单地定义为：\" class=\"headerlink\" title=\"Web服务器的工作原理可以简单地定义为：\"></a>Web服务器的工作原理可以简单地定义为：</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>客户机通过TCP/IP协议建立到服务器的TCP连接</td>\n</tr>\n<tr>\n<td>2</td>\n<td>客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档</td>\n</tr>\n<tr>\n<td>3</td>\n<td>服务器向客户机发送HTTP协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端</td>\n</tr>\n<tr>\n<td>4</td>\n<td>客户机与服务器断开。由客户端解释HTML文档，在客户端屏幕上渲染图形结果</td>\n</tr>\n</tbody>\n</table>\n<p>一个简单的HTTP事务就是这样实现的，看起来很复杂，原理其实是挺简单的。需要注意的是客户机与服务器之间的通信是非持久连接的，也就是当服务器发送了应答后就与客户机断开连接，等待下一次请求。</p>\n<h2 id=\"URL和DNS解析\"><a href=\"#URL和DNS解析\" class=\"headerlink\" title=\"URL和DNS解析\"></a>URL和DNS解析</h2><p>我们浏览网页都是通过URL访问的，那么URL到底是怎么样的呢？<br>URL(Uniform Resource Locator)是“统一资源定位符”的英文缩写，用于描述一个网络上的资源, 基本格式如下：</p>\n<p><code>html\nscheme://host[:port#]/path/.../[?query-string][#anchor]</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scheme</td>\n<td>指定低层使用的协议(例如：http, https, ftp)</td>\n</tr>\n<tr>\n<td>host</td>\n<td>HTTP服务器的IP地址或者域名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href=\"http://www.qixing318.com:80/\" target=\"_blank\" rel=\"external\">http://www.qixing318.com:80/</a></td>\n</tr>\n<tr>\n<td>path</td>\n<td>访问资源的路径</td>\n</tr>\n<tr>\n<td>query-string</td>\n<td>发送给http服务器的数据</td>\n</tr>\n<tr>\n<td>anchor</td>\n<td>锚</td>\n</tr>\n</tbody>\n</table>\n<p>DNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它从事将主机名或域名转换为实际IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。</p>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/97fc06248d4bc542a355ddfce1549044.png\" alt=\"dns-core\"></p>\n<h2 id=\"DNS工作原理\"><a href=\"#DNS工作原理\" class=\"headerlink\" title=\"DNS工作原理\"></a>DNS工作原理</h2><p>更详细的DNS解析的过程如下，这个过程有助于我们理解DNS的工作模式</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至 “根DNS服务器”，“根DNS服务器”收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qixing318.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qixing318.com域服务器，重复上面的动作，进行查询，直至找到www.qixing318.com主机。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/639c39cf315ddbd717d3d2d78ff74228.png\" alt=\"dns-process\"></p>\n<h2 id=\"DNS解析的整个流程\"><a href=\"#DNS解析的整个流程\" class=\"headerlink\" title=\"DNS解析的整个流程\"></a>DNS解析的整个流程</h2><p>所谓 递归查询过程 就是 “查询的递交者” 更替, 而 迭代查询过程 则是 “查询的递交者”不变。</p>\n<blockquote>\n<p>举个例子来说，你想知道某个一起上法律课的女孩的电话，并且你偷偷拍了她的照片，回到寝室告诉一个很仗义的哥们儿，这个哥们儿二话没说，拍着胸脯告诉你，甭急，我替你查(此处完成了一次递归查询，即，问询者的角色更替)。然后他拿着照片问了学院大四学长，学长告诉他，这姑娘是xx系的；然后这哥们儿马不停蹄又问了xx系的办公室主任助理同学，助理同学说是xx系yy班的，然后很仗义的哥们儿去xx系yy班的班长那里取到了该女孩儿电话。(此处完成若干次迭代查询，即，问询者角色不变，但反复更替问询对象)最后，他把号码交到了你手里。完成整个查询过程。<br>通过上面的步骤，我们最后获取的是IP地址，也就是浏览器最后发起请求的时候是基于IP来和服务器做信息交互的。</p>\n</blockquote>\n<h2 id=\"HTTP协议详解\"><a href=\"#HTTP协议详解\" class=\"headerlink\" title=\"HTTP协议详解\"></a>HTTP协议详解</h2><p>HTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。</p>\n<p>HTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议,它建立在TCP协议之上，一般采用TCP的80端口。它是一个请求、响应协议–客户端发出一个请求，服务器响应这个请求。</p>\n<p>在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。</p>\n<p>HTTP协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题， Web程序引入了Cookie机制来维护连接的可持续状态。</p>\n<blockquote>\n<p>HTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DdoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。</p>\n</blockquote>\n<h2 id=\"HTTP请求包（浏览器信息）\"><a href=\"#HTTP请求包（浏览器信息）\" class=\"headerlink\" title=\"HTTP请求包（浏览器信息）\"></a>HTTP请求包（浏览器信息）</h2><p>我们先来看看Request包的结构, Request包分为3部分，第一部分叫Request line（请求行）, 第二部分叫Request header（请求头）,第三部分是body（主体）。</p>\n<p>header和body之间有个空行，请求包的例子所示:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET /domains/example/ HTTP/1.1</td>\n<td>请求行: 请求方法 请求URI HTTP协议/协议版本</td>\n</tr>\n<tr>\n<td>Host：www.qixing318.com.</td>\n<td>服务端的主机名</td>\n</tr>\n<tr>\n<td>User-Agent：Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4</td>\n<td>客户端浏览器信息</td>\n</tr>\n<tr>\n<td>Accept：text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</td>\n<td>客户端能接收的mine类型</td>\n</tr>\n<tr>\n<td>Accept-Encoding：gzip,deflate,sdcn</td>\n<td>是否支持流压缩</td>\n</tr>\n<tr>\n<td>Accept-Charset：UTF-8,*;q=0.5</td>\n<td>客户端字符编码集</td>\n</tr>\n<tr>\n<td>“\\r\\n\\r\\n”</td>\n<td>空行,用于分割请求头和消息体</td>\n</tr>\n<tr>\n<td>“\\r\\n\\r\\n”</td>\n<td>空行,消息体,请求资源参数,例如POST传递的参数</td>\n</tr>\n</tbody>\n</table>\n<p>HTTP协议定义了很多与服务器交互的请求方法，最基本的有4种，分别是GET,POST,PUT,DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>\n<h2 id=\"通过fiddler抓包可以看到如下请求信息\"><a href=\"#通过fiddler抓包可以看到如下请求信息\" class=\"headerlink\" title=\"通过fiddler抓包可以看到如下请求信息:\"></a>通过fiddler抓包可以看到如下请求信息:</h2><p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/1b655d5bc2e339010d3857fb50c841a2.png\" alt=\"fiddler-get\"><br>上图为：fiddler抓取的GET信息</p>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/125b42ec4dcfb1e5601c8e2695076fb9.png\" alt=\"fiddler-post\"><br>上图为：fiddler抓取的POST信息</p>\n<h2 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别:\"></a>GET和POST的区别:</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>我们可以看到GET请求消息体为空，POST请求带有消息体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456。POST方法是把提交的数据放在HTTP包的body中。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HTTP响应包（服务器信息）\"><a href=\"#HTTP响应包（服务器信息）\" class=\"headerlink\" title=\"HTTP响应包（服务器信息）\"></a>HTTP响应包（服务器信息）</h2><p>我们再来看看HTTP的response包，他的结构如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HTTP/1.1 200 OK</td>\n<td>状态行</td>\n</tr>\n<tr>\n<td>Server: nginx/1.0.8</td>\n<td>服务器使用的WEB软件名及版本</td>\n</tr>\n<tr>\n<td>Date:Date: Tue, 30 Oct 2012 04:14:25 GMT</td>\n<td>发送时间</td>\n</tr>\n<tr>\n<td>Content-Type: text/html</td>\n<td>服务器发送信息的类型</td>\n</tr>\n<tr>\n<td>Transfer-Encoding: chunked</td>\n<td>表示发送HTTP包是分段发的</td>\n</tr>\n<tr>\n<td>Connection: keep-alive</td>\n<td>保持连接状态</td>\n</tr>\n<tr>\n<td>Content-Length: 90</td>\n<td>消息主体内容长度</td>\n</tr>\n<tr>\n<td>\\r\\n</td>\n<td>空行，用来分割消息头和主体</td>\n</tr>\n<tr>\n<td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN”…</td>\n<td>消息体部分</td>\n</tr>\n</tbody>\n</table>\n<p>Response包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>状态码用来告诉HTTP客户端,HTTP服务器是否产生了预期的Response。<br>HTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别</p>\n<blockquote>\n<p><a href=\"https://httpstatuses.com/\" target=\"_blank\" rel=\"external\">状态码详细查询</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td>提示信息 - 表示请求已被成功接收，继续处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>成功 - 表示请求已被成功接收，理解，接受</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>重定向 - 要完成请求必须进行更进一步的处理</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>客户端错误 - 请求有语法错误或请求无法实现</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器端错误 - 服务器未能实现合法的请求</td>\n</tr>\n</tbody>\n</table>\n<p>我们看下面这个图展示了详细的返回信息，左边可以看到有很多的资源返回码，200是常用的，表示正常信息，302表示跳转。response header里面展示了详细的信息。<br><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/c9e285dfb362101c4d258534ccfa5401.png\" alt=\"request-allinfo\"><br>【上图：访问一次网站的全部请求信息】</p>\n<h2 id=\"HTTP协议是无状态的和Connection-keep-alive的区别\"><a href=\"#HTTP协议是无状态的和Connection-keep-alive的区别\" class=\"headerlink\" title=\"HTTP协议是无状态的和Connection: keep-alive的区别\"></a>HTTP协议是无状态的和Connection: keep-alive的区别</h2><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<br>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（面对无连接）。<br>从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。<br>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件（如Apache）中设置这个时间。</p>\n<h2 id=\"请求实例\"><a href=\"#请求实例\" class=\"headerlink\" title=\"请求实例\"></a>请求实例</h2><p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/919ca19ef2176dacecdd2824083e9baa.png\" alt=\"request-entity\"></p>\n<p>【上图为：一次请求的request和response】</p>\n<p>上面这张图我们可以了解到整个的通讯过程，同时细心的读者是否注意到了一点，一个URL请求但是左边栏里面为什么会有那么多的资源请求(这些都是静态文件，go对于静态文件有专门的处理方式)。</p>\n<p>这个就是浏览器的一个功能，第一次请求url，服务器端返回的是html页面，然后浏览器开始渲染HTML：当解析到HTML DOM里面的图片连接，css脚本和js脚本的链接，浏览器就会自动发起一个请求静态资源的HTTP请求，获取相对应的静态资源，然后浏览器就会渲染出来，最终将所有资源整合、渲染，完整展现在我们面前的屏幕上。</p>\n<blockquote>\n<p>网页优化方面有一项措施是减少HTTP请求次数，就是把尽量多的css和js资源合并在一起，目的是尽量减少网页请求静态资源的次数，提高网页加载速度，同时减缓服务器的压力。</p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>原作者：吾爱<br>源地址：<a href=\"http://my.oschina.net/cxz001/blog/331671\">点击跳转</a></p>\n</blockquote>\n<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/d0177c725e5b3660d9984b0f70e431f0.jpg\" alt=\"request-response\"><br>我们平时在浏览网页的时候都是使用浏览器，输入你要的网址后回车，就会显示出我们所想要的内容，看似这个简单的用户操作行为的背后，Web的工作原理是怎样的呢？到底隐藏了些什么呢？</p>\n<p>对于传统的上网流程，系统它是这么做的：浏览器本身它是一个客户端，当输入URL地址的时候，浏览器首先会去请求DNS服务器，通过DNS查询获取相应的域名所对应的IP地址，然后通过这个映射的IP地址找到IP对应的服务器，并建立连接，等浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理，返回HTTP Response（响应）包，客户端浏览器收到来自服务器的响应后就开始渲染这个Response包里的主体（body）部分，等收到全部的内容后断开与该服务器之间的连接。</p>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/9f039f15b643c9cea8bab75b92f3e26b.png\" alt=\"web-request-process\"><br>","more":"</p>\n<p>一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是Web浏览器(其实手机端客户端内部也是浏览器实现的)。</p>\n<h2 id=\"Web服务器的工作原理可以简单地定义为：\"><a href=\"#Web服务器的工作原理可以简单地定义为：\" class=\"headerlink\" title=\"Web服务器的工作原理可以简单地定义为：\"></a>Web服务器的工作原理可以简单地定义为：</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>客户机通过TCP/IP协议建立到服务器的TCP连接</td>\n</tr>\n<tr>\n<td>2</td>\n<td>客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档</td>\n</tr>\n<tr>\n<td>3</td>\n<td>服务器向客户机发送HTTP协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端</td>\n</tr>\n<tr>\n<td>4</td>\n<td>客户机与服务器断开。由客户端解释HTML文档，在客户端屏幕上渲染图形结果</td>\n</tr>\n</tbody>\n</table>\n<p>一个简单的HTTP事务就是这样实现的，看起来很复杂，原理其实是挺简单的。需要注意的是客户机与服务器之间的通信是非持久连接的，也就是当服务器发送了应答后就与客户机断开连接，等待下一次请求。</p>\n<h2 id=\"URL和DNS解析\"><a href=\"#URL和DNS解析\" class=\"headerlink\" title=\"URL和DNS解析\"></a>URL和DNS解析</h2><p>我们浏览网页都是通过URL访问的，那么URL到底是怎么样的呢？<br>URL(Uniform Resource Locator)是“统一资源定位符”的英文缩写，用于描述一个网络上的资源, 基本格式如下：</p>\n<p><code>html\nscheme://host[:port#]/path/.../[?query-string][#anchor]</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scheme</td>\n<td>指定低层使用的协议(例如：http, https, ftp)</td>\n</tr>\n<tr>\n<td>host</td>\n<td>HTTP服务器的IP地址或者域名</td>\n</tr>\n<tr>\n<td>port</td>\n<td>HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href=\"http://www.qixing318.com:80/\">http://www.qixing318.com:80/</a></td>\n</tr>\n<tr>\n<td>path</td>\n<td>访问资源的路径</td>\n</tr>\n<tr>\n<td>query-string</td>\n<td>发送给http服务器的数据</td>\n</tr>\n<tr>\n<td>anchor</td>\n<td>锚</td>\n</tr>\n</tbody>\n</table>\n<p>DNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它从事将主机名或域名转换为实际IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。</p>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/97fc06248d4bc542a355ddfce1549044.png\" alt=\"dns-core\"></p>\n<h2 id=\"DNS工作原理\"><a href=\"#DNS工作原理\" class=\"headerlink\" title=\"DNS工作原理\"></a>DNS工作原理</h2><p>更详细的DNS解析的过程如下，这个过程有助于我们理解DNS的工作模式</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至 “根DNS服务器”，“根DNS服务器”收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qixing318.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qixing318.com域服务器，重复上面的动作，进行查询，直至找到www.qixing318.com主机。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/639c39cf315ddbd717d3d2d78ff74228.png\" alt=\"dns-process\"></p>\n<h2 id=\"DNS解析的整个流程\"><a href=\"#DNS解析的整个流程\" class=\"headerlink\" title=\"DNS解析的整个流程\"></a>DNS解析的整个流程</h2><p>所谓 递归查询过程 就是 “查询的递交者” 更替, 而 迭代查询过程 则是 “查询的递交者”不变。</p>\n<blockquote>\n<p>举个例子来说，你想知道某个一起上法律课的女孩的电话，并且你偷偷拍了她的照片，回到寝室告诉一个很仗义的哥们儿，这个哥们儿二话没说，拍着胸脯告诉你，甭急，我替你查(此处完成了一次递归查询，即，问询者的角色更替)。然后他拿着照片问了学院大四学长，学长告诉他，这姑娘是xx系的；然后这哥们儿马不停蹄又问了xx系的办公室主任助理同学，助理同学说是xx系yy班的，然后很仗义的哥们儿去xx系yy班的班长那里取到了该女孩儿电话。(此处完成若干次迭代查询，即，问询者角色不变，但反复更替问询对象)最后，他把号码交到了你手里。完成整个查询过程。<br>通过上面的步骤，我们最后获取的是IP地址，也就是浏览器最后发起请求的时候是基于IP来和服务器做信息交互的。</p>\n</blockquote>\n<h2 id=\"HTTP协议详解\"><a href=\"#HTTP协议详解\" class=\"headerlink\" title=\"HTTP协议详解\"></a>HTTP协议详解</h2><p>HTTP协议是Web工作的核心，所以要了解清楚Web的工作方式就需要详细的了解清楚HTTP是怎么样工作的。</p>\n<p>HTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议,它建立在TCP协议之上，一般采用TCP的80端口。它是一个请求、响应协议–客户端发出一个请求，服务器响应这个请求。</p>\n<p>在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。</p>\n<p>HTTP协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题， Web程序引入了Cookie机制来维护连接的可持续状态。</p>\n<blockquote>\n<p>HTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DdoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。</p>\n</blockquote>\n<h2 id=\"HTTP请求包（浏览器信息）\"><a href=\"#HTTP请求包（浏览器信息）\" class=\"headerlink\" title=\"HTTP请求包（浏览器信息）\"></a>HTTP请求包（浏览器信息）</h2><p>我们先来看看Request包的结构, Request包分为3部分，第一部分叫Request line（请求行）, 第二部分叫Request header（请求头）,第三部分是body（主体）。</p>\n<p>header和body之间有个空行，请求包的例子所示:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET /domains/example/ HTTP/1.1</td>\n<td>请求行: 请求方法 请求URI HTTP协议/协议版本</td>\n</tr>\n<tr>\n<td>Host：www.qixing318.com.</td>\n<td>服务端的主机名</td>\n</tr>\n<tr>\n<td>User-Agent：Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4</td>\n<td>客户端浏览器信息</td>\n</tr>\n<tr>\n<td>Accept：text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</td>\n<td>客户端能接收的mine类型</td>\n</tr>\n<tr>\n<td>Accept-Encoding：gzip,deflate,sdcn</td>\n<td>是否支持流压缩</td>\n</tr>\n<tr>\n<td>Accept-Charset：UTF-8,*;q=0.5</td>\n<td>客户端字符编码集</td>\n</tr>\n<tr>\n<td>“\\r\\n\\r\\n”</td>\n<td>空行,用于分割请求头和消息体</td>\n</tr>\n<tr>\n<td>“\\r\\n\\r\\n”</td>\n<td>空行,消息体,请求资源参数,例如POST传递的参数</td>\n</tr>\n</tbody>\n</table>\n<p>HTTP协议定义了很多与服务器交互的请求方法，最基本的有4种，分别是GET,POST,PUT,DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>\n<h2 id=\"通过fiddler抓包可以看到如下请求信息\"><a href=\"#通过fiddler抓包可以看到如下请求信息\" class=\"headerlink\" title=\"通过fiddler抓包可以看到如下请求信息:\"></a>通过fiddler抓包可以看到如下请求信息:</h2><p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/1b655d5bc2e339010d3857fb50c841a2.png\" alt=\"fiddler-get\"><br>上图为：fiddler抓取的GET信息</p>\n<p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/125b42ec4dcfb1e5601c8e2695076fb9.png\" alt=\"fiddler-post\"><br>上图为：fiddler抓取的POST信息</p>\n<h2 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别:\"></a>GET和POST的区别:</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>我们可以看到GET请求消息体为空，POST请求带有消息体。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456。POST方法是把提交的数据放在HTTP包的body中。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HTTP响应包（服务器信息）\"><a href=\"#HTTP响应包（服务器信息）\" class=\"headerlink\" title=\"HTTP响应包（服务器信息）\"></a>HTTP响应包（服务器信息）</h2><p>我们再来看看HTTP的response包，他的结构如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HTTP/1.1 200 OK</td>\n<td>状态行</td>\n</tr>\n<tr>\n<td>Server: nginx/1.0.8</td>\n<td>服务器使用的WEB软件名及版本</td>\n</tr>\n<tr>\n<td>Date:Date: Tue, 30 Oct 2012 04:14:25 GMT</td>\n<td>发送时间</td>\n</tr>\n<tr>\n<td>Content-Type: text/html</td>\n<td>服务器发送信息的类型</td>\n</tr>\n<tr>\n<td>Transfer-Encoding: chunked</td>\n<td>表示发送HTTP包是分段发的</td>\n</tr>\n<tr>\n<td>Connection: keep-alive</td>\n<td>保持连接状态</td>\n</tr>\n<tr>\n<td>Content-Length: 90</td>\n<td>消息主体内容长度</td>\n</tr>\n<tr>\n<td>\\r\\n</td>\n<td>空行，用来分割消息头和主体</td>\n</tr>\n<tr>\n<td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN”…</td>\n<td>消息体部分</td>\n</tr>\n</tbody>\n</table>\n<p>Response包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>状态码用来告诉HTTP客户端,HTTP服务器是否产生了预期的Response。<br>HTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别</p>\n<blockquote>\n<p><a href=\"https://httpstatuses.com/\">状态码详细查询</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1XX</td>\n<td>提示信息 - 表示请求已被成功接收，继续处理</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>成功 - 表示请求已被成功接收，理解，接受</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>重定向 - 要完成请求必须进行更进一步的处理</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>客户端错误 - 请求有语法错误或请求无法实现</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器端错误 - 服务器未能实现合法的请求</td>\n</tr>\n</tbody>\n</table>\n<p>我们看下面这个图展示了详细的返回信息，左边可以看到有很多的资源返回码，200是常用的，表示正常信息，302表示跳转。response header里面展示了详细的信息。<br><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/c9e285dfb362101c4d258534ccfa5401.png\" alt=\"request-allinfo\"><br>【上图：访问一次网站的全部请求信息】</p>\n<h2 id=\"HTTP协议是无状态的和Connection-keep-alive的区别\"><a href=\"#HTTP协议是无状态的和Connection-keep-alive的区别\" class=\"headerlink\" title=\"HTTP协议是无状态的和Connection: keep-alive的区别\"></a>HTTP协议是无状态的和Connection: keep-alive的区别</h2><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<br>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（面对无连接）。<br>从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。<br>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件（如Apache）中设置这个时间。</p>\n<h2 id=\"请求实例\"><a href=\"#请求实例\" class=\"headerlink\" title=\"请求实例\"></a>请求实例</h2><p><img src=\"http://www.qixing318.com/uploads/blog/image/20150120/919ca19ef2176dacecdd2824083e9baa.png\" alt=\"request-entity\"></p>\n<p>【上图为：一次请求的request和response】</p>\n<p>上面这张图我们可以了解到整个的通讯过程，同时细心的读者是否注意到了一点，一个URL请求但是左边栏里面为什么会有那么多的资源请求(这些都是静态文件，go对于静态文件有专门的处理方式)。</p>\n<p>这个就是浏览器的一个功能，第一次请求url，服务器端返回的是html页面，然后浏览器开始渲染HTML：当解析到HTML DOM里面的图片连接，css脚本和js脚本的链接，浏览器就会自动发起一个请求静态资源的HTTP请求，获取相对应的静态资源，然后浏览器就会渲染出来，最终将所有资源整合、渲染，完整展现在我们面前的屏幕上。</p>\n<blockquote>\n<p>网页优化方面有一项措施是减少HTTP请求次数，就是把尽量多的css和js资源合并在一起，目的是尽量减少网页请求静态资源的次数，提高网页加载速度，同时减缓服务器的压力。</p>\n</blockquote>"},{"title":"Java之HashMap和HashTable的不同","date":"2016-02-19T07:13:32.000Z","_content":"\nHashTable和HashMap的6个不同点：Java热门面试题例子\n\nHashTable和HashMa的区别是面试题中经常被问到的问题。还有其他比较热门的问题，像ArrayList和Vector、Comparator和Comparable。这些问题经常在面试中被问题，以检查我们是否正确理解集合类的使用和拥有的替代解决方案的知识。这两者之间的不同，包括6个点，分别是_Synchronization_、_Null keys and values_、_Iterating values_、_Fail fast iterator_、_Performance_、_Superclass_\n\n\n## HashTable和HashMap的不同\n\n**1.Synchronization or Thread Safe :**\n\n这是它们最重要的不同点。HashMap不是同步的，并且不是是线程安全的。相反，HashTable是线程安全和同步的。\n\n什么时候使用HashMap？答案是如果你的应用不需要任何多线程任务，就是说HashMap适用于没有线程的应用。HashTable应该在多线程应用中使用。\n<!-- more -->\n\n扩展：\nJava提供了ConcurrentHashMap，它是HashTable的替代品，比HashTable的扩展性更好。HashMap可以通过下面的语句进行同步：\n``` java\nMap m = Collections.synchronizeMap(hashMap);\n```\n\n**2. Null keys and null values :**\n\nHashMap允许一个空的key和多个空的value， 然而HashTable不允许空的键值。\n\n**3. Iterating the values:**\n\nHashMap对象的值是通过Iterator迭代的。HashTable是除vector之外惟一的一个使用了enumerator迭代器来迭代其对象值的类。\n\n**4.  Fail-fast iterator :**\n\n在HashMap中是**fail-fast**迭代器，而HashTable的emumerator不是。根据[Oracle Docs][1],如果HashTable对象的iterator以任何方式被创建之后它在“结构上”被修改，那么除了迭代器自己的remove方法，否则迭代器将抛出ConcurrentModificationException异常。\n\n结构上的更改指的是删除或者插入一个元素（hashtable和hashmap），因此，由Hashtable的键和元素方法返回的enumerations不是Fail-fast。关于[iterator and enumeration的不同][2].\n\n扩展：\n如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。\n\n**5. Performance :**\nHashMap是比较快的，并且使用了很少的内存。在单个的线程环境中，不同步的对象通常在性能上是比同步的对象要好的。\n\n**6.Superclass and Legacy :**\nHashTable是Dictionary的子类，在jdk 1.7中已经过时了，因此它不再被使用。它是最好的外部实现同步的方法，或者使用一个ConcurrentMap实现（如ConcurrentHashMap）HashMap是AbstractMap的子类，尽管HashMap和HashTable有不同的父类，但是他们都继承了抽象类“Map”。\n\n\n## HashMap和HashTable的例子\n``` java\nimport java.util.Hashtable;\n\n\npublic class HashMapHashtableExample {\n    \n    public static void main(String[] args) { \n \n           \n  \n        Hashtable<String,String> hashtableobj = new Hashtable<String, String>();\n        hashtableobj.put(\"Alive is \", \"awesome\");\n        hashtableobj.put(\"Love\", \"yourself\");\n        System.out.println(\"Hashtable object output :\"+ hashtableobj);\n \n         \n \n        HashMap hashmapobj = new HashMap();\n        hashmapobj.put(\"Alive is \", \"awesome\");  \n        hashmapobj.put(\"Love\", \"yourself\"); \n        System.out.println(\"HashMap object output :\"+hashmapobj);   \n \n \t}\n}\n```\n\n输出结果：\n```\nHashtable object output :{Love=yourself, Alive is =awesome}\nHashMap object output :{Alive is =awesome, Love=yourself}\n```\n\n## HashMap和Hashtable的相似之处\n\n- **1.插入顺序：** 随着时间的推移，HashMap和HashTable都不能保证集合的顺序，相反的，使用LinkedHashMap不会因为时间的推移而改变顺序。\n\n- **2.Map接口：** HashMap和HashTable都是实现了Map接口。\n\n- **3.存和取的方法：** HashMap和HashTable为存取提供了稳定的时间性能\n\n- **4.内部原理：** HashMap和HashTable遵顼的是散列的原则：[HashMap是如何工作的？][3]\n\n## HashMap和HashTable什么时候使用？\n\n- **1. 单线程应用**\n在非线程应用中，HashMap要优于HashTable的，简单来说，使用HashMap在非同步或者单线程的应用中。\n\n- **2. 多线程应用**\n我们应该避免使用Hashtable，因为这个类在最近的jdk1.8中过时了。Oracle已经提供了很好的替代的类：**ConcurrentHashMap**，对于多线程应用，使用ConcurrentHashMap而不是Hashtable。\n\n\n## 总结  \n\n|   区别   | HashMap        | HashTable        | \n| --------| --------------- | ---------------- |\n| 同步     | NO             |    Yes           |\n| 线程安全  | NO             |    Yes           |\n| 空键值   | 一个空键，任意空值 | 不允许空键值       |\n| 迭代类型  | Fail fast迭代器 | Fail safe迭代器   |\n| 性能     | 快              | 作比较慢          |\n| 父类和遗弃| AbstractMap，NO  | Dictionary , Yes |\n\n\n\n\n\n[1]: http://docs.oracle.com/javase/7/docs/api/java/util/Hashtable.html\n[2]: http://javahungry.blogspot.com/2013/06/difference-between-iterator-and-enumeration-collections-java-interview-question-with-example.html\n[2]: http://javahungry.blogspot.com/2013/08/hashing-how-hash-map-works-in-java-or.html","source":"_posts/Java之HashMap和HashTable的不同.md","raw":"title: Java之HashMap和HashTable的不同\ndate: 2016-02-19 15:13:32\ncategories: [Java]\ntags: [HashTable, HashMap]\n---\n\nHashTable和HashMap的6个不同点：Java热门面试题例子\n\nHashTable和HashMa的区别是面试题中经常被问到的问题。还有其他比较热门的问题，像ArrayList和Vector、Comparator和Comparable。这些问题经常在面试中被问题，以检查我们是否正确理解集合类的使用和拥有的替代解决方案的知识。这两者之间的不同，包括6个点，分别是_Synchronization_、_Null keys and values_、_Iterating values_、_Fail fast iterator_、_Performance_、_Superclass_\n\n\n## HashTable和HashMap的不同\n\n**1.Synchronization or Thread Safe :**\n\n这是它们最重要的不同点。HashMap不是同步的，并且不是是线程安全的。相反，HashTable是线程安全和同步的。\n\n什么时候使用HashMap？答案是如果你的应用不需要任何多线程任务，就是说HashMap适用于没有线程的应用。HashTable应该在多线程应用中使用。\n<!-- more -->\n\n扩展：\nJava提供了ConcurrentHashMap，它是HashTable的替代品，比HashTable的扩展性更好。HashMap可以通过下面的语句进行同步：\n``` java\nMap m = Collections.synchronizeMap(hashMap);\n```\n\n**2. Null keys and null values :**\n\nHashMap允许一个空的key和多个空的value， 然而HashTable不允许空的键值。\n\n**3. Iterating the values:**\n\nHashMap对象的值是通过Iterator迭代的。HashTable是除vector之外惟一的一个使用了enumerator迭代器来迭代其对象值的类。\n\n**4.  Fail-fast iterator :**\n\n在HashMap中是**fail-fast**迭代器，而HashTable的emumerator不是。根据[Oracle Docs][1],如果HashTable对象的iterator以任何方式被创建之后它在“结构上”被修改，那么除了迭代器自己的remove方法，否则迭代器将抛出ConcurrentModificationException异常。\n\n结构上的更改指的是删除或者插入一个元素（hashtable和hashmap），因此，由Hashtable的键和元素方法返回的enumerations不是Fail-fast。关于[iterator and enumeration的不同][2].\n\n扩展：\n如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。\n\n**5. Performance :**\nHashMap是比较快的，并且使用了很少的内存。在单个的线程环境中，不同步的对象通常在性能上是比同步的对象要好的。\n\n**6.Superclass and Legacy :**\nHashTable是Dictionary的子类，在jdk 1.7中已经过时了，因此它不再被使用。它是最好的外部实现同步的方法，或者使用一个ConcurrentMap实现（如ConcurrentHashMap）HashMap是AbstractMap的子类，尽管HashMap和HashTable有不同的父类，但是他们都继承了抽象类“Map”。\n\n\n## HashMap和HashTable的例子\n``` java\nimport java.util.Hashtable;\n\n\npublic class HashMapHashtableExample {\n    \n    public static void main(String[] args) { \n \n           \n  \n        Hashtable<String,String> hashtableobj = new Hashtable<String, String>();\n        hashtableobj.put(\"Alive is \", \"awesome\");\n        hashtableobj.put(\"Love\", \"yourself\");\n        System.out.println(\"Hashtable object output :\"+ hashtableobj);\n \n         \n \n        HashMap hashmapobj = new HashMap();\n        hashmapobj.put(\"Alive is \", \"awesome\");  \n        hashmapobj.put(\"Love\", \"yourself\"); \n        System.out.println(\"HashMap object output :\"+hashmapobj);   \n \n \t}\n}\n```\n\n输出结果：\n```\nHashtable object output :{Love=yourself, Alive is =awesome}\nHashMap object output :{Alive is =awesome, Love=yourself}\n```\n\n## HashMap和Hashtable的相似之处\n\n- **1.插入顺序：** 随着时间的推移，HashMap和HashTable都不能保证集合的顺序，相反的，使用LinkedHashMap不会因为时间的推移而改变顺序。\n\n- **2.Map接口：** HashMap和HashTable都是实现了Map接口。\n\n- **3.存和取的方法：** HashMap和HashTable为存取提供了稳定的时间性能\n\n- **4.内部原理：** HashMap和HashTable遵顼的是散列的原则：[HashMap是如何工作的？][3]\n\n## HashMap和HashTable什么时候使用？\n\n- **1. 单线程应用**\n在非线程应用中，HashMap要优于HashTable的，简单来说，使用HashMap在非同步或者单线程的应用中。\n\n- **2. 多线程应用**\n我们应该避免使用Hashtable，因为这个类在最近的jdk1.8中过时了。Oracle已经提供了很好的替代的类：**ConcurrentHashMap**，对于多线程应用，使用ConcurrentHashMap而不是Hashtable。\n\n\n## 总结  \n\n|   区别   | HashMap        | HashTable        | \n| --------| --------------- | ---------------- |\n| 同步     | NO             |    Yes           |\n| 线程安全  | NO             |    Yes           |\n| 空键值   | 一个空键，任意空值 | 不允许空键值       |\n| 迭代类型  | Fail fast迭代器 | Fail safe迭代器   |\n| 性能     | 快              | 作比较慢          |\n| 父类和遗弃| AbstractMap，NO  | Dictionary , Yes |\n\n\n\n\n\n[1]: http://docs.oracle.com/javase/7/docs/api/java/util/Hashtable.html\n[2]: http://javahungry.blogspot.com/2013/06/difference-between-iterator-and-enumeration-collections-java-interview-question-with-example.html\n[2]: http://javahungry.blogspot.com/2013/08/hashing-how-hash-map-works-in-java-or.html","slug":"Java之HashMap和HashTable的不同","published":1,"updated":"2016-10-10T06:53:44.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bat001m1giykaq700q0","content":"<p>HashTable和HashMap的6个不同点：Java热门面试题例子</p>\n<p>HashTable和HashMa的区别是面试题中经常被问到的问题。还有其他比较热门的问题，像ArrayList和Vector、Comparator和Comparable。这些问题经常在面试中被问题，以检查我们是否正确理解集合类的使用和拥有的替代解决方案的知识。这两者之间的不同，包括6个点，分别是<em>Synchronization</em>、<em>Null keys and values</em>、<em>Iterating values</em>、<em>Fail fast iterator</em>、<em>Performance</em>、<em>Superclass</em></p>\n<h2 id=\"HashTable和HashMap的不同\"><a href=\"#HashTable和HashMap的不同\" class=\"headerlink\" title=\"HashTable和HashMap的不同\"></a>HashTable和HashMap的不同</h2><p><strong>1.Synchronization or Thread Safe :</strong></p>\n<p>这是它们最重要的不同点。HashMap不是同步的，并且不是是线程安全的。相反，HashTable是线程安全和同步的。</p>\n<p>什么时候使用HashMap？答案是如果你的应用不需要任何多线程任务，就是说HashMap适用于没有线程的应用。HashTable应该在多线程应用中使用。<br><a id=\"more\"></a></p>\n<p>扩展：<br>Java提供了ConcurrentHashMap，它是HashTable的替代品，比HashTable的扩展性更好。HashMap可以通过下面的语句进行同步：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map m = Collections.synchronizeMap(hashMap);</div></pre></td></tr></table></figure></p>\n<p><strong>2. Null keys and null values :</strong></p>\n<p>HashMap允许一个空的key和多个空的value， 然而HashTable不允许空的键值。</p>\n<p><strong>3. Iterating the values:</strong></p>\n<p>HashMap对象的值是通过Iterator迭代的。HashTable是除vector之外惟一的一个使用了enumerator迭代器来迭代其对象值的类。</p>\n<p><strong>4.  Fail-fast iterator :</strong></p>\n<p>在HashMap中是<strong>fail-fast</strong>迭代器，而HashTable的emumerator不是。根据<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Hashtable.html\" target=\"_blank\" rel=\"external\">Oracle Docs</a>,如果HashTable对象的iterator以任何方式被创建之后它在“结构上”被修改，那么除了迭代器自己的remove方法，否则迭代器将抛出ConcurrentModificationException异常。</p>\n<p>结构上的更改指的是删除或者插入一个元素（hashtable和hashmap），因此，由Hashtable的键和元素方法返回的enumerations不是Fail-fast。关于<a href=\"http://javahungry.blogspot.com/2013/08/hashing-how-hash-map-works-in-java-or.html\" target=\"_blank\" rel=\"external\">iterator and enumeration的不同</a>.</p>\n<p>扩展：<br>如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</p>\n<p><strong>5. Performance :</strong><br>HashMap是比较快的，并且使用了很少的内存。在单个的线程环境中，不同步的对象通常在性能上是比同步的对象要好的。</p>\n<p><strong>6.Superclass and Legacy :</strong><br>HashTable是Dictionary的子类，在jdk 1.7中已经过时了，因此它不再被使用。它是最好的外部实现同步的方法，或者使用一个ConcurrentMap实现（如ConcurrentHashMap）HashMap是AbstractMap的子类，尽管HashMap和HashTable有不同的父类，但是他们都继承了抽象类“Map”。</p>\n<h2 id=\"HashMap和HashTable的例子\"><a href=\"#HashMap和HashTable的例子\" class=\"headerlink\" title=\"HashMap和HashTable的例子\"></a>HashMap和HashTable的例子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMapHashtableExample</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </div><div class=\"line\"> </div><div class=\"line\">           </div><div class=\"line\">  </div><div class=\"line\">        Hashtable&lt;String,String&gt; hashtableobj = <span class=\"keyword\">new</span> Hashtable&lt;String, String&gt;();</div><div class=\"line\">        hashtableobj.put(<span class=\"string\">\"Alive is \"</span>, <span class=\"string\">\"awesome\"</span>);</div><div class=\"line\">        hashtableobj.put(<span class=\"string\">\"Love\"</span>, <span class=\"string\">\"yourself\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Hashtable object output :\"</span>+ hashtableobj);</div><div class=\"line\"> </div><div class=\"line\">         </div><div class=\"line\"> </div><div class=\"line\">        HashMap hashmapobj = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        hashmapobj.put(<span class=\"string\">\"Alive is \"</span>, <span class=\"string\">\"awesome\"</span>);  </div><div class=\"line\">        hashmapobj.put(<span class=\"string\">\"Love\"</span>, <span class=\"string\">\"yourself\"</span>); </div><div class=\"line\">        System.out.println(<span class=\"string\">\"HashMap object output :\"</span>+hashmapobj);   </div><div class=\"line\"> </div><div class=\"line\"> \t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hashtable object output :&#123;Love=yourself, Alive is =awesome&#125;</div><div class=\"line\">HashMap object output :&#123;Alive is =awesome, Love=yourself&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"HashMap和Hashtable的相似之处\"><a href=\"#HashMap和Hashtable的相似之处\" class=\"headerlink\" title=\"HashMap和Hashtable的相似之处\"></a>HashMap和Hashtable的相似之处</h2><ul>\n<li><p><strong>1.插入顺序：</strong> 随着时间的推移，HashMap和HashTable都不能保证集合的顺序，相反的，使用LinkedHashMap不会因为时间的推移而改变顺序。</p>\n</li>\n<li><p><strong>2.Map接口：</strong> HashMap和HashTable都是实现了Map接口。</p>\n</li>\n<li><p><strong>3.存和取的方法：</strong> HashMap和HashTable为存取提供了稳定的时间性能</p>\n</li>\n<li><p><strong>4.内部原理：</strong> HashMap和HashTable遵顼的是散列的原则：[HashMap是如何工作的？][3]</p>\n</li>\n</ul>\n<h2 id=\"HashMap和HashTable什么时候使用？\"><a href=\"#HashMap和HashTable什么时候使用？\" class=\"headerlink\" title=\"HashMap和HashTable什么时候使用？\"></a>HashMap和HashTable什么时候使用？</h2><ul>\n<li><p><strong>1. 单线程应用</strong><br>在非线程应用中，HashMap要优于HashTable的，简单来说，使用HashMap在非同步或者单线程的应用中。</p>\n</li>\n<li><p><strong>2. 多线程应用</strong><br>我们应该避免使用Hashtable，因为这个类在最近的jdk1.8中过时了。Oracle已经提供了很好的替代的类：<strong>ConcurrentHashMap</strong>，对于多线程应用，使用ConcurrentHashMap而不是Hashtable。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>HashMap</th>\n<th>HashTable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步</td>\n<td>NO</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>线程安全</td>\n<td>NO</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>空键值</td>\n<td>一个空键，任意空值</td>\n<td>不允许空键值</td>\n</tr>\n<tr>\n<td>迭代类型</td>\n<td>Fail fast迭代器</td>\n<td>Fail safe迭代器</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>快</td>\n<td>作比较慢</td>\n</tr>\n<tr>\n<td>父类和遗弃</td>\n<td>AbstractMap，NO</td>\n<td>Dictionary , Yes</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>HashTable和HashMap的6个不同点：Java热门面试题例子</p>\n<p>HashTable和HashMa的区别是面试题中经常被问到的问题。还有其他比较热门的问题，像ArrayList和Vector、Comparator和Comparable。这些问题经常在面试中被问题，以检查我们是否正确理解集合类的使用和拥有的替代解决方案的知识。这两者之间的不同，包括6个点，分别是<em>Synchronization</em>、<em>Null keys and values</em>、<em>Iterating values</em>、<em>Fail fast iterator</em>、<em>Performance</em>、<em>Superclass</em></p>\n<h2 id=\"HashTable和HashMap的不同\"><a href=\"#HashTable和HashMap的不同\" class=\"headerlink\" title=\"HashTable和HashMap的不同\"></a>HashTable和HashMap的不同</h2><p><strong>1.Synchronization or Thread Safe :</strong></p>\n<p>这是它们最重要的不同点。HashMap不是同步的，并且不是是线程安全的。相反，HashTable是线程安全和同步的。</p>\n<p>什么时候使用HashMap？答案是如果你的应用不需要任何多线程任务，就是说HashMap适用于没有线程的应用。HashTable应该在多线程应用中使用。<br>","more":"</p>\n<p>扩展：<br>Java提供了ConcurrentHashMap，它是HashTable的替代品，比HashTable的扩展性更好。HashMap可以通过下面的语句进行同步：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map m = Collections.synchronizeMap(hashMap);</div></pre></td></tr></table></figure></p>\n<p><strong>2. Null keys and null values :</strong></p>\n<p>HashMap允许一个空的key和多个空的value， 然而HashTable不允许空的键值。</p>\n<p><strong>3. Iterating the values:</strong></p>\n<p>HashMap对象的值是通过Iterator迭代的。HashTable是除vector之外惟一的一个使用了enumerator迭代器来迭代其对象值的类。</p>\n<p><strong>4.  Fail-fast iterator :</strong></p>\n<p>在HashMap中是<strong>fail-fast</strong>迭代器，而HashTable的emumerator不是。根据<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Hashtable.html\">Oracle Docs</a>,如果HashTable对象的iterator以任何方式被创建之后它在“结构上”被修改，那么除了迭代器自己的remove方法，否则迭代器将抛出ConcurrentModificationException异常。</p>\n<p>结构上的更改指的是删除或者插入一个元素（hashtable和hashmap），因此，由Hashtable的键和元素方法返回的enumerations不是Fail-fast。关于<a href=\"http://javahungry.blogspot.com/2013/08/hashing-how-hash-map-works-in-java-or.html\">iterator and enumeration的不同</a>.</p>\n<p>扩展：<br>如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</p>\n<p><strong>5. Performance :</strong><br>HashMap是比较快的，并且使用了很少的内存。在单个的线程环境中，不同步的对象通常在性能上是比同步的对象要好的。</p>\n<p><strong>6.Superclass and Legacy :</strong><br>HashTable是Dictionary的子类，在jdk 1.7中已经过时了，因此它不再被使用。它是最好的外部实现同步的方法，或者使用一个ConcurrentMap实现（如ConcurrentHashMap）HashMap是AbstractMap的子类，尽管HashMap和HashTable有不同的父类，但是他们都继承了抽象类“Map”。</p>\n<h2 id=\"HashMap和HashTable的例子\"><a href=\"#HashMap和HashTable的例子\" class=\"headerlink\" title=\"HashMap和HashTable的例子\"></a>HashMap和HashTable的例子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashMapHashtableExample</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123; </div><div class=\"line\"> </div><div class=\"line\">           </div><div class=\"line\">  </div><div class=\"line\">        Hashtable&lt;String,String&gt; hashtableobj = <span class=\"keyword\">new</span> Hashtable&lt;String, String&gt;();</div><div class=\"line\">        hashtableobj.put(<span class=\"string\">\"Alive is \"</span>, <span class=\"string\">\"awesome\"</span>);</div><div class=\"line\">        hashtableobj.put(<span class=\"string\">\"Love\"</span>, <span class=\"string\">\"yourself\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Hashtable object output :\"</span>+ hashtableobj);</div><div class=\"line\"> </div><div class=\"line\">         </div><div class=\"line\"> </div><div class=\"line\">        HashMap hashmapobj = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        hashmapobj.put(<span class=\"string\">\"Alive is \"</span>, <span class=\"string\">\"awesome\"</span>);  </div><div class=\"line\">        hashmapobj.put(<span class=\"string\">\"Love\"</span>, <span class=\"string\">\"yourself\"</span>); </div><div class=\"line\">        System.out.println(<span class=\"string\">\"HashMap object output :\"</span>+hashmapobj);   </div><div class=\"line\"> </div><div class=\"line\"> \t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hashtable object output :&#123;Love=yourself, Alive is =awesome&#125;</div><div class=\"line\">HashMap object output :&#123;Alive is =awesome, Love=yourself&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"HashMap和Hashtable的相似之处\"><a href=\"#HashMap和Hashtable的相似之处\" class=\"headerlink\" title=\"HashMap和Hashtable的相似之处\"></a>HashMap和Hashtable的相似之处</h2><ul>\n<li><p><strong>1.插入顺序：</strong> 随着时间的推移，HashMap和HashTable都不能保证集合的顺序，相反的，使用LinkedHashMap不会因为时间的推移而改变顺序。</p>\n</li>\n<li><p><strong>2.Map接口：</strong> HashMap和HashTable都是实现了Map接口。</p>\n</li>\n<li><p><strong>3.存和取的方法：</strong> HashMap和HashTable为存取提供了稳定的时间性能</p>\n</li>\n<li><p><strong>4.内部原理：</strong> HashMap和HashTable遵顼的是散列的原则：[HashMap是如何工作的？][3]</p>\n</li>\n</ul>\n<h2 id=\"HashMap和HashTable什么时候使用？\"><a href=\"#HashMap和HashTable什么时候使用？\" class=\"headerlink\" title=\"HashMap和HashTable什么时候使用？\"></a>HashMap和HashTable什么时候使用？</h2><ul>\n<li><p><strong>1. 单线程应用</strong><br>在非线程应用中，HashMap要优于HashTable的，简单来说，使用HashMap在非同步或者单线程的应用中。</p>\n</li>\n<li><p><strong>2. 多线程应用</strong><br>我们应该避免使用Hashtable，因为这个类在最近的jdk1.8中过时了。Oracle已经提供了很好的替代的类：<strong>ConcurrentHashMap</strong>，对于多线程应用，使用ConcurrentHashMap而不是Hashtable。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>HashMap</th>\n<th>HashTable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同步</td>\n<td>NO</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>线程安全</td>\n<td>NO</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>空键值</td>\n<td>一个空键，任意空值</td>\n<td>不允许空键值</td>\n</tr>\n<tr>\n<td>迭代类型</td>\n<td>Fail fast迭代器</td>\n<td>Fail safe迭代器</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>快</td>\n<td>作比较慢</td>\n</tr>\n<tr>\n<td>父类和遗弃</td>\n<td>AbstractMap，NO</td>\n<td>Dictionary , Yes</td>\n</tr>\n</tbody>\n</table>"},{"title":"Java之静态绑定和动态绑定","date":"2015-11-24T02:07:20.000Z","_content":"#### 概念\n- 程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 **静态绑定**和**动态绑定**\n- 动态绑定：在面向过程中又称为**后期绑定**，在程序**运行期**进行了绑定，根据实际情况有选择的进行绑定\n- 静态绑定：在面向过程中又称为**前期绑定**，在程序**编译期**进行了绑定，即在还没运行时，就已经加载到内存\n#### 对比\n- 动态绑定\n\t- 又称为后期绑定\n\t- 发生在运行时期\n\t- 虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定\n\t- 动态绑定使用对象信息来完成\n\t- 典型应用是方法的重写（Override）\n- 静态绑定\n\t- 又称为前期绑定\n\t- 发生在编译时期\n\t- 使用private或static或final修饰的变量或者方法（包括构造方法）\n\t- 静态绑定使用类信息来完成\n\t- 典型应用是方法重载（Overload）\n\n<!-- more -->\n\t\n- 运行期\nJava的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错\n- 编译期\nJava的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序\n\nJava字节码的执行有两种方式： \n- 即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码\n- 解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。\n\nJava程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行\n\n#### 验证\n关于final、static、private和构造方法是前期绑定的理解：\n- **private** \n对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起\n- **final**\nfinal方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)\n- **static**\n对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏\n就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法\n由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。\n- **构造**\n构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类\n\n**示例代码**\n```\npublic class SuperClass {\n\n\tprotected String attribute = \"from SuperClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n}\n\npublic class SubClass extends SuperClass {\n\n\tprotected String attribute = \"from SubClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\t\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tSuperClass superClass = new SubClass();\n\t\t\n\t\tSubClass subClass = new SubClass();\n\t\t\n\t\tsuperClass.print(superClass);\n\t\t\n\t\tsubClass.print(subClass);\n\t\t\n\t\tSystem.out.println(\" attribute \" + superClass.attribute);\n\t\t\n\t\tSystem.out.println(\" method \" + superClass.getAttribute());\n\t\t\n\t}\n}\n```\n**输出结果**\n```\n static method from SuperClass\n static method from SuperClass\n attribute from SuperClass\n method from SubClass\n```\n\n#### 反编译\n使用JDK自带的javap命令反编译看看：\n`>javap -c SubClass`\n```\nWarning: Binary file SubClass contains com.gogh.bind.SubClass\nCompiled from \"SubClass.java\"\npublic class com.gogh.bind.SubClass extends com.gogh.bind.SuperClass {\n  protected java.lang.String attribute;\n\n  public com.gogh.bind.SubClass();\n    Code:\n       0: aload_0\n       1: invokespecial #10                 // Method com/gogh/bind/SuperClass.\"<init>\":()V\n       4: aload_0\n       5: ldc           #12                 // String from SubClass\n       7: putfield      #14                 // Field attribute:Ljava/lang/String;\n      10: return\n\n  public java.lang.String getAttribute();\n    Code:\n       0: aload_0\n       1: getfield      #14                 // Field attribute:Ljava/lang/String;\n       4: areturn\n\n  public static void print(com.gogh.bind.SuperClass);\n    Code:\n       0: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #30                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #32                 // String  static method\n       9: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #1                  // class com/gogh/bind/SubClass\n       3: dup\n       4: invokespecial #54                 // Method \"<init>\":()V\n       7: astore_1\n       8: new           #1                  // class com/gogh/bind/SubClass\n      11: dup\n      12: invokespecial #54                 // Method \"<init>\":()V\n      15: astore_2\n      16: aload_1\n      17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n      20: aload_2\n      21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n      24: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      27: new           #30                 // class java/lang/StringBuilder\n      30: dup\n      31: ldc           #58                 // String  attribute\n      33: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      36: aload_1\n      37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      40: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      43: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      46: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      49: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      52: new           #30                 // class java/lang/StringBuilder\n      55: dup\n      56: ldc           #60                 // String  method\n      58: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      61: aload_1\n      62: invokevirtual #62                 // Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;\n      65: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      68: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      71: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      74: return\n}\n```\n通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：\n-  17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n调用的SuperClass.print方法\n- 21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n- 37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n这个也是调用的SuperClass.print方法\n#### 总结\nJava中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。\n\n与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。\n\nJava因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。\n\n内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。","source":"_posts/Java之静态绑定和动态绑定.md","raw":"title: Java之静态绑定和动态绑定\ndate: 2015-11-24 10:07:20\ncategories: [Java]\ntags: [动态绑定, 静态绑定, 重载, 重写]\n---\n#### 概念\n- 程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 **静态绑定**和**动态绑定**\n- 动态绑定：在面向过程中又称为**后期绑定**，在程序**运行期**进行了绑定，根据实际情况有选择的进行绑定\n- 静态绑定：在面向过程中又称为**前期绑定**，在程序**编译期**进行了绑定，即在还没运行时，就已经加载到内存\n#### 对比\n- 动态绑定\n\t- 又称为后期绑定\n\t- 发生在运行时期\n\t- 虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定\n\t- 动态绑定使用对象信息来完成\n\t- 典型应用是方法的重写（Override）\n- 静态绑定\n\t- 又称为前期绑定\n\t- 发生在编译时期\n\t- 使用private或static或final修饰的变量或者方法（包括构造方法）\n\t- 静态绑定使用类信息来完成\n\t- 典型应用是方法重载（Overload）\n\n<!-- more -->\n\t\n- 运行期\nJava的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错\n- 编译期\nJava的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序\n\nJava字节码的执行有两种方式： \n- 即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码\n- 解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。\n\nJava程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行\n\n#### 验证\n关于final、static、private和构造方法是前期绑定的理解：\n- **private** \n对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起\n- **final**\nfinal方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)\n- **static**\n对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏\n就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法\n由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。\n- **构造**\n构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类\n\n**示例代码**\n```\npublic class SuperClass {\n\n\tprotected String attribute = \"from SuperClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n}\n\npublic class SubClass extends SuperClass {\n\n\tprotected String attribute = \"from SubClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\t\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tSuperClass superClass = new SubClass();\n\t\t\n\t\tSubClass subClass = new SubClass();\n\t\t\n\t\tsuperClass.print(superClass);\n\t\t\n\t\tsubClass.print(subClass);\n\t\t\n\t\tSystem.out.println(\" attribute \" + superClass.attribute);\n\t\t\n\t\tSystem.out.println(\" method \" + superClass.getAttribute());\n\t\t\n\t}\n}\n```\n**输出结果**\n```\n static method from SuperClass\n static method from SuperClass\n attribute from SuperClass\n method from SubClass\n```\n\n#### 反编译\n使用JDK自带的javap命令反编译看看：\n`>javap -c SubClass`\n```\nWarning: Binary file SubClass contains com.gogh.bind.SubClass\nCompiled from \"SubClass.java\"\npublic class com.gogh.bind.SubClass extends com.gogh.bind.SuperClass {\n  protected java.lang.String attribute;\n\n  public com.gogh.bind.SubClass();\n    Code:\n       0: aload_0\n       1: invokespecial #10                 // Method com/gogh/bind/SuperClass.\"<init>\":()V\n       4: aload_0\n       5: ldc           #12                 // String from SubClass\n       7: putfield      #14                 // Field attribute:Ljava/lang/String;\n      10: return\n\n  public java.lang.String getAttribute();\n    Code:\n       0: aload_0\n       1: getfield      #14                 // Field attribute:Ljava/lang/String;\n       4: areturn\n\n  public static void print(com.gogh.bind.SuperClass);\n    Code:\n       0: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #30                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #32                 // String  static method\n       9: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #1                  // class com/gogh/bind/SubClass\n       3: dup\n       4: invokespecial #54                 // Method \"<init>\":()V\n       7: astore_1\n       8: new           #1                  // class com/gogh/bind/SubClass\n      11: dup\n      12: invokespecial #54                 // Method \"<init>\":()V\n      15: astore_2\n      16: aload_1\n      17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n      20: aload_2\n      21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n      24: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      27: new           #30                 // class java/lang/StringBuilder\n      30: dup\n      31: ldc           #58                 // String  attribute\n      33: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      36: aload_1\n      37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      40: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      43: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      46: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      49: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      52: new           #30                 // class java/lang/StringBuilder\n      55: dup\n      56: ldc           #60                 // String  method\n      58: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      61: aload_1\n      62: invokevirtual #62                 // Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;\n      65: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      68: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      71: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      74: return\n}\n```\n通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：\n-  17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n调用的SuperClass.print方法\n- 21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n- 37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n这个也是调用的SuperClass.print方法\n#### 总结\nJava中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。\n\n与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。\n\nJava因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。\n\n内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。","slug":"Java之静态绑定和动态绑定","published":1,"updated":"2016-10-10T06:53:44.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bav001q1giy8wuskadu","content":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ul>\n<li>程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 <strong>静态绑定</strong>和<strong>动态绑定</strong></li>\n<li>动态绑定：在面向过程中又称为<strong>后期绑定</strong>，在程序<strong>运行期</strong>进行了绑定，根据实际情况有选择的进行绑定</li>\n<li>静态绑定：在面向过程中又称为<strong>前期绑定</strong>，在程序<strong>编译期</strong>进行了绑定，即在还没运行时，就已经加载到内存<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4></li>\n<li>动态绑定<ul>\n<li>又称为后期绑定</li>\n<li>发生在运行时期</li>\n<li>虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定</li>\n<li>动态绑定使用对象信息来完成</li>\n<li>典型应用是方法的重写（Override）</li>\n</ul>\n</li>\n<li>静态绑定<ul>\n<li>又称为前期绑定</li>\n<li>发生在编译时期</li>\n<li>使用private或static或final修饰的变量或者方法（包括构造方法）</li>\n<li>静态绑定使用类信息来完成</li>\n<li>典型应用是方法重载（Overload）</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>运行期<br>Java的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错</li>\n<li>编译期<br>Java的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序</li>\n</ul>\n<p>Java字节码的执行有两种方式： </p>\n<ul>\n<li>即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码</li>\n<li>解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。</li>\n</ul>\n<p>Java程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>关于final、static、private和构造方法是前期绑定的理解：</p>\n<ul>\n<li><strong>private</strong><br>对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起</li>\n<li><strong>final</strong><br>final方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)</li>\n<li><strong>static</strong><br>对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏<br>就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法<br>由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。</li>\n<li><strong>构造</strong><br>构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类</li>\n</ul>\n<p><strong>示例代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SuperClass &#123;</div><div class=\"line\"></div><div class=\"line\">\tprotected String attribute = &quot;from SuperClass&quot;;</div><div class=\"line\"></div><div class=\"line\">\tpublic String getAttribute() &#123;</div><div class=\"line\">\t\treturn attribute;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void print(SuperClass superClass) &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot; static method &quot; + superClass.attribute);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class SubClass extends SuperClass &#123;</div><div class=\"line\"></div><div class=\"line\">\tprotected String attribute = &quot;from SubClass&quot;;</div><div class=\"line\"></div><div class=\"line\">\tpublic String getAttribute() &#123;</div><div class=\"line\">\t\treturn attribute;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void print(SuperClass superClass) &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot; static method &quot; + superClass.attribute);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSuperClass superClass = new SubClass();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSubClass subClass = new SubClass();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsuperClass.print(superClass);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsubClass.print(subClass);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(&quot; attribute &quot; + superClass.attribute);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(&quot; method &quot; + superClass.getAttribute());</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static method from SuperClass</div><div class=\"line\">static method from SuperClass</div><div class=\"line\">attribute from SuperClass</div><div class=\"line\">method from SubClass</div></pre></td></tr></table></figure></p>\n<h4 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h4><p>使用JDK自带的javap命令反编译看看：<br><code>&gt;javap -c SubClass</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">Warning: Binary file SubClass contains com.gogh.bind.SubClass</div><div class=\"line\">Compiled from &quot;SubClass.java&quot;</div><div class=\"line\">public class com.gogh.bind.SubClass extends com.gogh.bind.SuperClass &#123;</div><div class=\"line\">  protected java.lang.String attribute;</div><div class=\"line\"></div><div class=\"line\">  public com.gogh.bind.SubClass();</div><div class=\"line\">    Code:</div><div class=\"line\">       0: aload_0</div><div class=\"line\">       1: invokespecial #10                 // Method com/gogh/bind/SuperClass.&quot;&lt;init&gt;&quot;:()V</div><div class=\"line\">       4: aload_0</div><div class=\"line\">       5: ldc           #12                 // String from SubClass</div><div class=\"line\">       7: putfield      #14                 // Field attribute:Ljava/lang/String;</div><div class=\"line\">      10: return</div><div class=\"line\"></div><div class=\"line\">  public java.lang.String getAttribute();</div><div class=\"line\">    Code:</div><div class=\"line\">       0: aload_0</div><div class=\"line\">       1: getfield      #14                 // Field attribute:Ljava/lang/String;</div><div class=\"line\">       4: areturn</div><div class=\"line\"></div><div class=\"line\">  public static void print(com.gogh.bind.SuperClass);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">       3: new           #30                 // class java/lang/StringBuilder</div><div class=\"line\">       6: dup</div><div class=\"line\">       7: ldc           #32                 // String  static method</div><div class=\"line\">       9: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class=\"line\">      12: aload_0</div><div class=\"line\">      13: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;</div><div class=\"line\">      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class=\"line\">      19: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class=\"line\">      22: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class=\"line\">      25: return</div><div class=\"line\"></div><div class=\"line\">  public static void main(java.lang.String[]);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: new           #1                  // class com/gogh/bind/SubClass</div><div class=\"line\">       3: dup</div><div class=\"line\">       4: invokespecial #54                 // Method &quot;&lt;init&gt;&quot;:()V</div><div class=\"line\">       7: astore_1</div><div class=\"line\">       8: new           #1                  // class com/gogh/bind/SubClass</div><div class=\"line\">      11: dup</div><div class=\"line\">      12: invokespecial #54                 // Method &quot;&lt;init&gt;&quot;:()V</div><div class=\"line\">      15: astore_2</div><div class=\"line\">      16: aload_1</div><div class=\"line\">      17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V</div><div class=\"line\">      20: aload_2</div><div class=\"line\">      21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V</div><div class=\"line\">      24: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      27: new           #30                 // class java/lang/StringBuilder</div><div class=\"line\">      30: dup</div><div class=\"line\">      31: ldc           #58                 // String  attribute</div><div class=\"line\">      33: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class=\"line\">      36: aload_1</div><div class=\"line\">      37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;</div><div class=\"line\">      40: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class=\"line\">      43: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class=\"line\">      46: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class=\"line\">      49: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      52: new           #30                 // class java/lang/StringBuilder</div><div class=\"line\">      55: dup</div><div class=\"line\">      56: ldc           #60                 // String  method</div><div class=\"line\">      58: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class=\"line\">      61: aload_1</div><div class=\"line\">      62: invokevirtual #62                 // Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;</div><div class=\"line\">      65: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class=\"line\">      68: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class=\"line\">      71: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class=\"line\">      74: return</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：</p>\n<ul>\n<li>17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V<br>调用的SuperClass.print方法</li>\n<li>21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V</li>\n<li>37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;<br>这个也是调用的SuperClass.print方法<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>Java中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。</li>\n</ul>\n<p>与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。</p>\n<p>Java因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。</p>\n<p>内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。</p>\n","excerpt":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ul>\n<li>程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 <strong>静态绑定</strong>和<strong>动态绑定</strong></li>\n<li>动态绑定：在面向过程中又称为<strong>后期绑定</strong>，在程序<strong>运行期</strong>进行了绑定，根据实际情况有选择的进行绑定</li>\n<li>静态绑定：在面向过程中又称为<strong>前期绑定</strong>，在程序<strong>编译期</strong>进行了绑定，即在还没运行时，就已经加载到内存<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4></li>\n<li>动态绑定<ul>\n<li>又称为后期绑定</li>\n<li>发生在运行时期</li>\n<li>虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定</li>\n<li>动态绑定使用对象信息来完成</li>\n<li>典型应用是方法的重写（Override）</li>\n</ul>\n</li>\n<li>静态绑定<ul>\n<li>又称为前期绑定</li>\n<li>发生在编译时期</li>\n<li>使用private或static或final修饰的变量或者方法（包括构造方法）</li>\n<li>静态绑定使用类信息来完成</li>\n<li>典型应用是方法重载（Overload）</li>\n</ul>\n</li>\n</ul>","more":"<ul>\n<li>运行期<br>Java的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错</li>\n<li>编译期<br>Java的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序</li>\n</ul>\n<p>Java字节码的执行有两种方式： </p>\n<ul>\n<li>即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码</li>\n<li>解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。</li>\n</ul>\n<p>Java程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>关于final、static、private和构造方法是前期绑定的理解：</p>\n<ul>\n<li><strong>private</strong><br>对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起</li>\n<li><strong>final</strong><br>final方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)</li>\n<li><strong>static</strong><br>对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏<br>就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法<br>由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。</li>\n<li><strong>构造</strong><br>构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类</li>\n</ul>\n<p><strong>示例代码</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SuperClass &#123;</div><div class=\"line\"></div><div class=\"line\">\tprotected String attribute = &quot;from SuperClass&quot;;</div><div class=\"line\"></div><div class=\"line\">\tpublic String getAttribute() &#123;</div><div class=\"line\">\t\treturn attribute;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void print(SuperClass superClass) &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot; static method &quot; + superClass.attribute);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class SubClass extends SuperClass &#123;</div><div class=\"line\"></div><div class=\"line\">\tprotected String attribute = &quot;from SubClass&quot;;</div><div class=\"line\"></div><div class=\"line\">\tpublic String getAttribute() &#123;</div><div class=\"line\">\t\treturn attribute;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void print(SuperClass superClass) &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot; static method &quot; + superClass.attribute);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSuperClass superClass = new SubClass();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSubClass subClass = new SubClass();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsuperClass.print(superClass);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsubClass.print(subClass);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(&quot; attribute &quot; + superClass.attribute);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(&quot; method &quot; + superClass.getAttribute());</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>输出结果</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static method from SuperClass</div><div class=\"line\">static method from SuperClass</div><div class=\"line\">attribute from SuperClass</div><div class=\"line\">method from SubClass</div></pre></td></tr></table></figure></p>\n<h4 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h4><p>使用JDK自带的javap命令反编译看看：<br><code>&gt;javap -c SubClass</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">Warning: Binary file SubClass contains com.gogh.bind.SubClass</div><div class=\"line\">Compiled from &quot;SubClass.java&quot;</div><div class=\"line\">public class com.gogh.bind.SubClass extends com.gogh.bind.SuperClass &#123;</div><div class=\"line\">  protected java.lang.String attribute;</div><div class=\"line\"></div><div class=\"line\">  public com.gogh.bind.SubClass();</div><div class=\"line\">    Code:</div><div class=\"line\">       0: aload_0</div><div class=\"line\">       1: invokespecial #10                 // Method com/gogh/bind/SuperClass.&quot;&lt;init&gt;&quot;:()V</div><div class=\"line\">       4: aload_0</div><div class=\"line\">       5: ldc           #12                 // String from SubClass</div><div class=\"line\">       7: putfield      #14                 // Field attribute:Ljava/lang/String;</div><div class=\"line\">      10: return</div><div class=\"line\"></div><div class=\"line\">  public java.lang.String getAttribute();</div><div class=\"line\">    Code:</div><div class=\"line\">       0: aload_0</div><div class=\"line\">       1: getfield      #14                 // Field attribute:Ljava/lang/String;</div><div class=\"line\">       4: areturn</div><div class=\"line\"></div><div class=\"line\">  public static void print(com.gogh.bind.SuperClass);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">       3: new           #30                 // class java/lang/StringBuilder</div><div class=\"line\">       6: dup</div><div class=\"line\">       7: ldc           #32                 // String  static method</div><div class=\"line\">       9: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class=\"line\">      12: aload_0</div><div class=\"line\">      13: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;</div><div class=\"line\">      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class=\"line\">      19: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class=\"line\">      22: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class=\"line\">      25: return</div><div class=\"line\"></div><div class=\"line\">  public static void main(java.lang.String[]);</div><div class=\"line\">    Code:</div><div class=\"line\">       0: new           #1                  // class com/gogh/bind/SubClass</div><div class=\"line\">       3: dup</div><div class=\"line\">       4: invokespecial #54                 // Method &quot;&lt;init&gt;&quot;:()V</div><div class=\"line\">       7: astore_1</div><div class=\"line\">       8: new           #1                  // class com/gogh/bind/SubClass</div><div class=\"line\">      11: dup</div><div class=\"line\">      12: invokespecial #54                 // Method &quot;&lt;init&gt;&quot;:()V</div><div class=\"line\">      15: astore_2</div><div class=\"line\">      16: aload_1</div><div class=\"line\">      17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V</div><div class=\"line\">      20: aload_2</div><div class=\"line\">      21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V</div><div class=\"line\">      24: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      27: new           #30                 // class java/lang/StringBuilder</div><div class=\"line\">      30: dup</div><div class=\"line\">      31: ldc           #58                 // String  attribute</div><div class=\"line\">      33: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class=\"line\">      36: aload_1</div><div class=\"line\">      37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;</div><div class=\"line\">      40: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class=\"line\">      43: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class=\"line\">      46: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class=\"line\">      49: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class=\"line\">      52: new           #30                 // class java/lang/StringBuilder</div><div class=\"line\">      55: dup</div><div class=\"line\">      56: ldc           #60                 // String  method</div><div class=\"line\">      58: invokespecial #34                 // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</div><div class=\"line\">      61: aload_1</div><div class=\"line\">      62: invokevirtual #62                 // Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;</div><div class=\"line\">      65: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class=\"line\">      68: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</div><div class=\"line\">      71: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class=\"line\">      74: return</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：</p>\n<ul>\n<li>17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V<br>调用的SuperClass.print方法</li>\n<li>21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V</li>\n<li>37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;<br>这个也是调用的SuperClass.print方法<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4>Java中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。</li>\n</ul>\n<p>与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。</p>\n<p>Java因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。</p>\n<p>内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。</p>"},{"title":"Java同步之synchronized关键字","date":"2016-10-19T07:28:03.793Z","_content":"\n### 序言\n在开发中，避免不了多任务的操作，往往一个线程很难满足任务需要，所以就有了多线程，并行的任务，但是当使用多个线程来访问同一个数据时，非常容易出现线程安全问题(比如多个线程都在操作同一数据导致数据不一致),所以我们用同步机制来解决这些问题，其中的一种解决方式就是使用synchronized关键字\n\n### 使用\nsynchronized主要有四种用法：\n\n- 第一是在方法声明时使用\n\n> 放在范围操作符(public等)之后,返回类型声明(void等)之前。这时,线程获得的是 _成员锁_,即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在Synchronized方法内部的线程)执行完该方法后,别的线程才能进入，例：\n\n``` java\npublic synchronized void method() {\n    // do something\n}\n```\n<!-- more -->\n\n- 第二是针对某一代码块使用\n\n> synchronized后跟括号,括号里是变量,这样,一次只有一个线程进入该代码块，此时，线程获得的是 _成员锁_\n\n``` java\npublic int method(int arg1){\n    synchronized(arg1) {\n        //一次只能有一个线程进入\n    }\n}\n```\n\n- 第三是对某一对象使用\n\n> synchronized后面括号里是对象,此时,线程获得的是 _对象锁_\n\n``` java\npublic void method(String arg){   \n    synchronized (this){\n        //取得该类实例化后对象的锁   \n    }   \n} \n```\n等同于\n``` java\npublic synchronized void method(String arg){ \n    //取得Demo实例化后对象的锁   \n} \n```\n\n- 第四是对某一类使用。\n\n> synchronized后面括号里是类,此时,线程获得的是 _对象锁_\n\n``` java\npublic static void method(String arg){   \n    synchronized (Demo.class) { \n        //取得Demo.class类的锁  \n}\n```\n等同于：\n\n``` java\npublic synchronized static void method(String arg){\n    //取得Demo.class类的锁   \n} \n```\n### 性能\n\n实现同步机制注意以下几点\n- 多线程：安全性高，性能低\n- 单线程：性能高，安全性低\n\n所以：\n- 不要对线程安全类的所有方法都进行同步操作，只对那些持有共享资源的方法进行同步\n- 如果该类有两种运行环境，单线程环境和多线程环境。则应该为该类提供两种版本：线程安全版本和线程不安全版本(没有同步方法和同步块)。在单线程中环境中，使用线程不安全版本以保证性能，在多线程中使用线程安全版本.\n\n### 其它\n- 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块\n\n- 当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块\n     \n- 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞\n\n - 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n\n` 注：synchronized关键字可以修饰方法，也可以修饰代码块，但不能修饰构造器，属性等 `","source":"_posts/Java同步之synchronized关键字.md","raw":"---\ntitle: Java同步之synchronized关键字\ndate: 2016-04-29 10：11:22\ncategories: [Java]\ntags: [synchronized]\n---\n\n### 序言\n在开发中，避免不了多任务的操作，往往一个线程很难满足任务需要，所以就有了多线程，并行的任务，但是当使用多个线程来访问同一个数据时，非常容易出现线程安全问题(比如多个线程都在操作同一数据导致数据不一致),所以我们用同步机制来解决这些问题，其中的一种解决方式就是使用synchronized关键字\n\n### 使用\nsynchronized主要有四种用法：\n\n- 第一是在方法声明时使用\n\n> 放在范围操作符(public等)之后,返回类型声明(void等)之前。这时,线程获得的是 _成员锁_,即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在Synchronized方法内部的线程)执行完该方法后,别的线程才能进入，例：\n\n``` java\npublic synchronized void method() {\n    // do something\n}\n```\n<!-- more -->\n\n- 第二是针对某一代码块使用\n\n> synchronized后跟括号,括号里是变量,这样,一次只有一个线程进入该代码块，此时，线程获得的是 _成员锁_\n\n``` java\npublic int method(int arg1){\n    synchronized(arg1) {\n        //一次只能有一个线程进入\n    }\n}\n```\n\n- 第三是对某一对象使用\n\n> synchronized后面括号里是对象,此时,线程获得的是 _对象锁_\n\n``` java\npublic void method(String arg){   \n    synchronized (this){\n        //取得该类实例化后对象的锁   \n    }   \n} \n```\n等同于\n``` java\npublic synchronized void method(String arg){ \n    //取得Demo实例化后对象的锁   \n} \n```\n\n- 第四是对某一类使用。\n\n> synchronized后面括号里是类,此时,线程获得的是 _对象锁_\n\n``` java\npublic static void method(String arg){   \n    synchronized (Demo.class) { \n        //取得Demo.class类的锁  \n}\n```\n等同于：\n\n``` java\npublic synchronized static void method(String arg){\n    //取得Demo.class类的锁   \n} \n```\n### 性能\n\n实现同步机制注意以下几点\n- 多线程：安全性高，性能低\n- 单线程：性能高，安全性低\n\n所以：\n- 不要对线程安全类的所有方法都进行同步操作，只对那些持有共享资源的方法进行同步\n- 如果该类有两种运行环境，单线程环境和多线程环境。则应该为该类提供两种版本：线程安全版本和线程不安全版本(没有同步方法和同步块)。在单线程中环境中，使用线程不安全版本以保证性能，在多线程中使用线程安全版本.\n\n### 其它\n- 当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块\n\n- 当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块\n     \n- 尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞\n\n - 第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。\n\n` 注：synchronized关键字可以修饰方法，也可以修饰代码块，但不能修饰构造器，属性等 `","slug":"Java同步之synchronized关键字","published":1,"updated":"2016-10-10T06:53:44.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bax001t1giyk9s5uim0","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>在开发中，避免不了多任务的操作，往往一个线程很难满足任务需要，所以就有了多线程，并行的任务，但是当使用多个线程来访问同一个数据时，非常容易出现线程安全问题(比如多个线程都在操作同一数据导致数据不一致),所以我们用同步机制来解决这些问题，其中的一种解决方式就是使用synchronized关键字</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>synchronized主要有四种用法：</p>\n<ul>\n<li>第一是在方法声明时使用</li>\n</ul>\n<blockquote>\n<p>放在范围操作符(public等)之后,返回类型声明(void等)之前。这时,线程获得的是 <em>成员锁</em>,即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在Synchronized方法内部的线程)执行完该方法后,别的线程才能进入，例：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>第二是针对某一代码块使用</li>\n</ul>\n<blockquote>\n<p>synchronized后跟括号,括号里是变量,这样,一次只有一个线程进入该代码块，此时，线程获得的是 <em>成员锁</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> arg1)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span>(arg1) &#123;</div><div class=\"line\">        <span class=\"comment\">//一次只能有一个线程进入</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第三是对某一对象使用</li>\n</ul>\n<blockquote>\n<p>synchronized后面括号里是对象,此时,线程获得的是 <em>对象锁</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//取得该类实例化后对象的锁   </span></div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>等同于<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123; </div><div class=\"line\">    <span class=\"comment\">//取得Demo实例化后对象的锁   </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>第四是对某一类使用。</li>\n</ul>\n<blockquote>\n<p>synchronized后面括号里是类,此时,线程获得的是 <em>对象锁</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (Demo.class) &#123; </div><div class=\"line\">        <span class=\"comment\">//取得Demo.class类的锁  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//取得Demo.class类的锁   </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>实现同步机制注意以下几点</p>\n<ul>\n<li>多线程：安全性高，性能低</li>\n<li>单线程：性能高，安全性低</li>\n</ul>\n<p>所以：</p>\n<ul>\n<li>不要对线程安全类的所有方法都进行同步操作，只对那些持有共享资源的方法进行同步</li>\n<li>如果该类有两种运行环境，单线程环境和多线程环境。则应该为该类提供两种版本：线程安全版本和线程不安全版本(没有同步方法和同步块)。在单线程中环境中，使用线程不安全版本以保证性能，在多线程中使用线程安全版本.</li>\n</ul>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><p>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块</p>\n</li>\n<li><p>当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块</p>\n</li>\n<li><p>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞</p>\n<ul>\n<li>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。</li>\n</ul>\n</li>\n</ul>\n<p><code>注：synchronized关键字可以修饰方法，也可以修饰代码块，但不能修饰构造器，属性等</code></p>\n","excerpt":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>在开发中，避免不了多任务的操作，往往一个线程很难满足任务需要，所以就有了多线程，并行的任务，但是当使用多个线程来访问同一个数据时，非常容易出现线程安全问题(比如多个线程都在操作同一数据导致数据不一致),所以我们用同步机制来解决这些问题，其中的一种解决方式就是使用synchronized关键字</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>synchronized主要有四种用法：</p>\n<ul>\n<li>第一是在方法声明时使用</li>\n</ul>\n<blockquote>\n<p>放在范围操作符(public等)之后,返回类型声明(void等)之前。这时,线程获得的是 <em>成员锁</em>,即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,只能排队等候,当前线程(就是在Synchronized方法内部的线程)执行完该方法后,别的线程才能进入，例：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<ul>\n<li>第二是针对某一代码块使用</li>\n</ul>\n<blockquote>\n<p>synchronized后跟括号,括号里是变量,这样,一次只有一个线程进入该代码块，此时，线程获得的是 <em>成员锁</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> arg1)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span>(arg1) &#123;</div><div class=\"line\">        <span class=\"comment\">//一次只能有一个线程进入</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第三是对某一对象使用</li>\n</ul>\n<blockquote>\n<p>synchronized后面括号里是对象,此时,线程获得的是 <em>对象锁</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//取得该类实例化后对象的锁   </span></div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>等同于<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123; </div><div class=\"line\">    <span class=\"comment\">//取得Demo实例化后对象的锁   </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>第四是对某一类使用。</li>\n</ul>\n<blockquote>\n<p>synchronized后面括号里是类,此时,线程获得的是 <em>对象锁</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (Demo.class) &#123; </div><div class=\"line\">        <span class=\"comment\">//取得Demo.class类的锁  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(String arg)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//取得Demo.class类的锁   </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>实现同步机制注意以下几点</p>\n<ul>\n<li>多线程：安全性高，性能低</li>\n<li>单线程：性能高，安全性低</li>\n</ul>\n<p>所以：</p>\n<ul>\n<li>不要对线程安全类的所有方法都进行同步操作，只对那些持有共享资源的方法进行同步</li>\n<li>如果该类有两种运行环境，单线程环境和多线程环境。则应该为该类提供两种版本：线程安全版本和线程不安全版本(没有同步方法和同步块)。在单线程中环境中，使用线程不安全版本以保证性能，在多线程中使用线程安全版本.</li>\n</ul>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><p>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块</p>\n</li>\n<li><p>当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块</p>\n</li>\n<li><p>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞</p>\n<ul>\n<li>第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。</li>\n</ul>\n</li>\n</ul>\n<p><code>注：synchronized关键字可以修饰方法，也可以修饰代码块，但不能修饰构造器，属性等</code></p>"},{"title":"Java的连接与初始化","date":"2015-12-09T04:52:53.000Z","photos":["http://img.blog.csdn.net/20151010184504881"],"_content":"> 原文作者：iceAeterna\n> 原文链接：[http://www.cnblogs.com/iceAeterNa/p/4876747.html](http://www.cnblogs.com/iceAeterNa/p/4876747.html)\n\n\n#### 序言\nJava虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。\n![](http://img.blog.csdn.net/20151010184504881)\n\n#### 解析\n解析过程可以推迟到类的初始化之后再进行，但这是有条件的，Java虚拟机必须在每个类或接口主动使用时进行初始化。 \n以下为主动使用的情况： \n- 创建某个类新的实例(无论直接通过new创建出来的，还是通过反射、克隆、序列化创建的)\n- 使用某个类的静态方法 \n- 访问某个类或接口的静态字段 \n- 调用JavaAPI中的某些反射方法 \n- 初始化某个类的子类(要求其祖先类都要被初始化，否则无法正确访问其继承的成员) \n- 启动某个标明为启动类的类(含有main()方法) \n主动使用会导致类的初始化，其超类均将在该类的初始化之前被初始化，但通过子类访问父类的静态字段或方法时，对于子类(或子接口、接口的实现类)来说，这种访问就是被动访问，或者说访问了该类(接口)中的不在该类(接口)中声明的静态成员。 \n<!-- more -->\n\nGrandpa的定义如下：\n``` java\npackage com.ice.passiveaccess;\n \npublic class Grandpa {\n\n    static{\n        System.out.println(\"Grandpa was initialized.\");\n    }\n    \n}\n```\nParent的定义如下：\n```java\npackage com.ice.passiveaccess;\n\npublic class Parent extends Grandpa{\n\n    static String language = \"Chinese\";\n    \n    static{\n        System.out.println(\"Parent was initialized.\");\n    }\n    \n}\n```\nCindy的定义如下：\n```java\npackage com.ice.passiveaccess;\n\npublic class Cindy extends Parent{\n\n    static{\n        System.out.println(\"Child was initialized.\");\n    }\n    \n}\n```\n现在通过Cindy访问父类的language成员:\n```java\npackage com.ice.passiveaccess;\n\npublic class PassiveAccessTest {\n    public static void main(String args[]){\n        System.out.println(Cindy.language);\n    }\n}\n```\n结果如下： \n```java\nGrandpa was initialized.\nParent was initialized.\nChinese\n```\n\n可见这是被动访问，Cindy自身并没有初始化\n\n#### 装载\n装载的过程：\n- (1).找到该类型的class文件，产生一个该类型的class文件二进制数据流(ClassLoader需要实现的loadClassData()方法) \n- (2).解析该二进制数据流为方法区内的数据结构 \n- (3).创建一个该类型的java.lang.Class实例 \n\n在加载器的相关代码中可以看到，最终通过defineClass()创建一个Java类型对象(Class对象)。 \n\n#### 验证 \nclass文件校验器需要四趟独立的扫描来完成验证工作，其中： \n- 第一趟扫描在装载时进行，会对class文件进行结构检查，如 \n\t- (1).对魔数进行检查，以判断该文件是否是一个正常的class文件 \n\t- (2).对主次版本号进行检查，以判断class文件是否与java虚拟机兼容 \n\t- (3).对class文件的长度和类型进行检查，避免class文件部分缺失或被附加内容。 　\n- 第二趟扫描在连接过程中进行，会对类型数据进行语义检查，主要检查各个类的二进制兼容性(主要是查看超类和子类的关系)和类本身是否符合特定的语义条件 \n\t- (1).final类不能拥有子类 \n\t- (2).final方法不能被重写(覆盖) \n\t- (3).子类和超类之间没有不兼容的方法声明 \n\t- (4).检查常量池入口类型是否一致(如CONSTANT_Class常量池的内容是否指向一个CONSTANT_Utf8字符串常量池) \n\t- (5).检查常量池的所有特殊字符串，以确定它们是否是其所属类型的实例，以及是否符合特定的上下文无关语法、格式 \n- 第三趟扫描为字节码验证，其验证内容和实现较为复杂，主要检验字节码是否可以被java虚拟机安全地执行。 \n- 第四趟扫描在解析过程中进行，为对符号引用的验证。在动态连接过程中，通过保存在常量池的符号引用查找被引用的类、接口、字段、方法时，在把符号引用替换成直接引用时，首先需要确认查找的元素真正存在，然后需要检查访问权限、查找的元素是否是静态类成员而非实例成员。 \n\n#### 准备 \n为类变量分配内存、设置默认初始值(内存设置初始值，而非对类变量真正地进行初始化，即类中声明int i = 5，但实际上这里是分配内存并设置初始值为0) \n\n#### 解析\n在类的常量池中寻找类、接口、字段、方法的符号引用，将这些符号引用替换成直接引用 \n\n#### 初始化\n对类变量赋予指定的初始值(这个时候int i = 5就必须赋予i以初值5)。这个初始值的给定方式有两种，一种是通过类变量的初始化语句，一种是静态初始化语句。而这些初始化语句都将被Java编译器一起放在方法中。 \n如前面所述，一个类的初始化需要初始化其直接超类，并递归初始化其祖先类，初始化是通过调用类的初始化方法完成的。此外，对于接口，并不需要初始化其父接口，而只需要执行该接口的接口初始化方法就可以了。\n\n注意：\n- (1).在初始化阶段，只会为类变量(静态全局变量)进行初始化工作，并且当类变量声明为final类型切初始化语句采用了常量表达式方式进行初始化赋值，那么，也不会对其进行初始化，它将会直接被编译器计算并保存在常量池中，并且对这些变量的使用也将直接将其变量值嵌入到字节码中。\n如UsefulParameter类如下： \n```java\nClass UsefulParameter{ \n\tstatic final int height = 2; \n\tstatic final int width = height * 2; \n} \n```\n类Area的类变量初始化如下： \n```java\nClass Area{ \n\tstatic int height = UsefulParameter.height * 2 ; \n\tstatic int width = UsefulParameter.width * 2; \n} \n```\n在Area的< clinit>中，将直接把2、4嵌入到字节码中:\n![clinit](http://images2015.cnblogs.com/blog/821477/201510/821477-20151014103108788-81357571.png)\n\n- (2).接口的初始化与类有所不同，在初始化阶段，会为在接口中声明的所有public、static和final类型的、无法被编译为常量的字段进行初始化 \n\n#### 类实例化 \n这里需要明白什么是类初始化，什么是类实例化，以及类的实例对象的初始化\n\n如前面所述，类初始化时对类(静态)变量赋予指定的初始值，类初始化之后就可以访问类的静态字段和方法，而访问类的非静态(实例)字段和方法，就需要创建类的对象实例，故类的实例化是在类的初始化之后，是在堆上创建一个该类的对象。 \n类的静态方法和字段属于类，作为类型数据保存在方法区，其生命周期取决于类，而实例方法和字段位于Java堆，其生命周期取决于对象的生命周期。\n　　\n**类的初始化会从祖先类到子类、按出现顺序，对类变量的初始化语句、静态初始化语句块依次进行初始化。而对类实例的初始化也类似，会从祖先类到子类、按出现顺序，对类成员的初始化语句、实例初始化块、构造方法依次进行初始化。 **\n\n比如：\n```java\npackage com.ice.init;\n\npublic class Parent {\n    public static int i = print(\"parent static:i\");\n    public int ii = print(\"parent:ii\");\n\n    static{\n        print(\"父类静态初始化\");\n    }\n\n    {\n        print(\"父类实例初始化\");\n    }\n\n    public Parent(String str) {\n        System.out.println(\"parent constructor:\" + str);\n    }\n\n    public static int print(String str){\n        System.out.println(\"initial:\" + str);\n        return i;\n    }\n}\n```\n子类Child如下：\n```java\npackage com.ice.init;\n\npublic class Child extends Parent{\n    public static int i = print(\"child static:i\");\n    public int ii = print(\"child:ii\");\n\n    static{\n        print(\"子类静态初始化\");\n    }\n\n    {\n        print(\"子类实例初始化\");\n    }\n\n    public Child(String str) {\n        super(str);\n        System.out.println(\"Child constructor:\" + str);\n    }\n\n    public static int print(String str){\n        System.out.println(\"initial:\" + str);\n        return i;\n    }\n\n    public static void main(String args[]){\n        Child child = new Child(\"cindy\");\n    }\n}\n```\n其初始化顺序为：\n```java\ninitial:parent static:i\ninitial:父类静态初始化\ninitial:child static:i\ninitial:子类静态初始化\ninitial:parent:ii\ninitial:父类实例初始化\nparent constructor:cindy\ninitial:child:ii\ninitial:子类实例初始化\nChild constructor:cindy\n```\nJava编译器为每个类生成了至少一个实例初始化方法< init >，一个< init >方法分为三部分： 另一个初始化方法< init >()，对任意实例成员的初始化的字节码，构造方法的方法体的字节码\n\n< init >方法的调用如下： \n若< init >指明从this()方法明确调用另一个构造方法，那么将调用另一个构造方法，否则，若该类有直接超类，那么，若< init >指明从super()方法明确调用其超类的构造方法，那么将调用超类的构造方法，否则，将默认调用超类的无参构造方法。这样，将从其祖先类到该类，分别完成对应的实例成员的初始化(可能被子类覆盖) \n\n接下来以一道题结束本节： \n判断输出：\n```java\npackage com.ice.init;\n\nclass T  implements Cloneable{\n      public static int k = 0;\n      public static T t1 = new T(\"t1\");\n      public static T t2 = new T(\"t2\");\n      public static int i = print(\"i\");\n      public static int n = 99;\n\n      public int j = print(\"j\");\n      {\n          print(\"构造块\");\n      }\n\n      static {\n          print(\"静态块\");\n      }\n\n      public T(String str) {\n          System.out.println((++k) + \":\" + str + \"    i=\" + i + \"  n=\" + n);\n          ++n; ++ i;\n      }\n\n      public static int print(String str){\n          System.out.println((++k) +\":\" + str + \"   i=\" + i + \"   n=\" + n);\n          ++n;\n          return ++ i;\n      }\n\n      public static void main(String[] args){\n          T t = new T(\"init\");\n      }\n    }\n```\n题解如下：\n\n(1).首先T类被加载、连接后进行初始化，会先对字段k、t1、t2、i、n以及static块进行初始化。 \n(2).t1实例的初始化会初始化实例成员j，(实际上先进行父类实例内容的初始化)先调用静态方法print，并执行实例初始化块{}，\t    输出： \n 1: j i=0 n= 0(i和n都还没有初始化) \n 2:构造块 i=1 n=1 \n(3)随后调用t1实例的构造函数，输出： \n 3:t1 i=2 n=2 \n(4).类似有t2实例的初始化： \n 4: j i=3 n= 3 \n 5:构造块 i=4 n=4 \n 6:t2 i=5 n=5 \n(5).i的初始化： \n 7.i i=6 n=6 \n(6).n的初始化和静态块的初始化： \n 8.静态块 i=7 n=99(n已经被初始化) \n(7).t实例的初始化： \n 9.j i=8 n= 100 \n 10.构造块 i=9 n= 101 \n 11.init i=10 n= 102\n","source":"_posts/Java的连接与初始化.md","raw":"title: Java的连接与初始化\ndate: 2015-12-09 12:52:53\ncategories: [Java]\ntags: [类初始化,虚拟机,Java]\nphotos:\n- http://img.blog.csdn.net/20151010184504881\n\n---\n> 原文作者：iceAeterna\n> 原文链接：[http://www.cnblogs.com/iceAeterNa/p/4876747.html](http://www.cnblogs.com/iceAeterNa/p/4876747.html)\n\n\n#### 序言\nJava虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。\n![](http://img.blog.csdn.net/20151010184504881)\n\n#### 解析\n解析过程可以推迟到类的初始化之后再进行，但这是有条件的，Java虚拟机必须在每个类或接口主动使用时进行初始化。 \n以下为主动使用的情况： \n- 创建某个类新的实例(无论直接通过new创建出来的，还是通过反射、克隆、序列化创建的)\n- 使用某个类的静态方法 \n- 访问某个类或接口的静态字段 \n- 调用JavaAPI中的某些反射方法 \n- 初始化某个类的子类(要求其祖先类都要被初始化，否则无法正确访问其继承的成员) \n- 启动某个标明为启动类的类(含有main()方法) \n主动使用会导致类的初始化，其超类均将在该类的初始化之前被初始化，但通过子类访问父类的静态字段或方法时，对于子类(或子接口、接口的实现类)来说，这种访问就是被动访问，或者说访问了该类(接口)中的不在该类(接口)中声明的静态成员。 \n<!-- more -->\n\nGrandpa的定义如下：\n``` java\npackage com.ice.passiveaccess;\n \npublic class Grandpa {\n\n    static{\n        System.out.println(\"Grandpa was initialized.\");\n    }\n    \n}\n```\nParent的定义如下：\n```java\npackage com.ice.passiveaccess;\n\npublic class Parent extends Grandpa{\n\n    static String language = \"Chinese\";\n    \n    static{\n        System.out.println(\"Parent was initialized.\");\n    }\n    \n}\n```\nCindy的定义如下：\n```java\npackage com.ice.passiveaccess;\n\npublic class Cindy extends Parent{\n\n    static{\n        System.out.println(\"Child was initialized.\");\n    }\n    \n}\n```\n现在通过Cindy访问父类的language成员:\n```java\npackage com.ice.passiveaccess;\n\npublic class PassiveAccessTest {\n    public static void main(String args[]){\n        System.out.println(Cindy.language);\n    }\n}\n```\n结果如下： \n```java\nGrandpa was initialized.\nParent was initialized.\nChinese\n```\n\n可见这是被动访问，Cindy自身并没有初始化\n\n#### 装载\n装载的过程：\n- (1).找到该类型的class文件，产生一个该类型的class文件二进制数据流(ClassLoader需要实现的loadClassData()方法) \n- (2).解析该二进制数据流为方法区内的数据结构 \n- (3).创建一个该类型的java.lang.Class实例 \n\n在加载器的相关代码中可以看到，最终通过defineClass()创建一个Java类型对象(Class对象)。 \n\n#### 验证 \nclass文件校验器需要四趟独立的扫描来完成验证工作，其中： \n- 第一趟扫描在装载时进行，会对class文件进行结构检查，如 \n\t- (1).对魔数进行检查，以判断该文件是否是一个正常的class文件 \n\t- (2).对主次版本号进行检查，以判断class文件是否与java虚拟机兼容 \n\t- (3).对class文件的长度和类型进行检查，避免class文件部分缺失或被附加内容。 　\n- 第二趟扫描在连接过程中进行，会对类型数据进行语义检查，主要检查各个类的二进制兼容性(主要是查看超类和子类的关系)和类本身是否符合特定的语义条件 \n\t- (1).final类不能拥有子类 \n\t- (2).final方法不能被重写(覆盖) \n\t- (3).子类和超类之间没有不兼容的方法声明 \n\t- (4).检查常量池入口类型是否一致(如CONSTANT_Class常量池的内容是否指向一个CONSTANT_Utf8字符串常量池) \n\t- (5).检查常量池的所有特殊字符串，以确定它们是否是其所属类型的实例，以及是否符合特定的上下文无关语法、格式 \n- 第三趟扫描为字节码验证，其验证内容和实现较为复杂，主要检验字节码是否可以被java虚拟机安全地执行。 \n- 第四趟扫描在解析过程中进行，为对符号引用的验证。在动态连接过程中，通过保存在常量池的符号引用查找被引用的类、接口、字段、方法时，在把符号引用替换成直接引用时，首先需要确认查找的元素真正存在，然后需要检查访问权限、查找的元素是否是静态类成员而非实例成员。 \n\n#### 准备 \n为类变量分配内存、设置默认初始值(内存设置初始值，而非对类变量真正地进行初始化，即类中声明int i = 5，但实际上这里是分配内存并设置初始值为0) \n\n#### 解析\n在类的常量池中寻找类、接口、字段、方法的符号引用，将这些符号引用替换成直接引用 \n\n#### 初始化\n对类变量赋予指定的初始值(这个时候int i = 5就必须赋予i以初值5)。这个初始值的给定方式有两种，一种是通过类变量的初始化语句，一种是静态初始化语句。而这些初始化语句都将被Java编译器一起放在方法中。 \n如前面所述，一个类的初始化需要初始化其直接超类，并递归初始化其祖先类，初始化是通过调用类的初始化方法完成的。此外，对于接口，并不需要初始化其父接口，而只需要执行该接口的接口初始化方法就可以了。\n\n注意：\n- (1).在初始化阶段，只会为类变量(静态全局变量)进行初始化工作，并且当类变量声明为final类型切初始化语句采用了常量表达式方式进行初始化赋值，那么，也不会对其进行初始化，它将会直接被编译器计算并保存在常量池中，并且对这些变量的使用也将直接将其变量值嵌入到字节码中。\n如UsefulParameter类如下： \n```java\nClass UsefulParameter{ \n\tstatic final int height = 2; \n\tstatic final int width = height * 2; \n} \n```\n类Area的类变量初始化如下： \n```java\nClass Area{ \n\tstatic int height = UsefulParameter.height * 2 ; \n\tstatic int width = UsefulParameter.width * 2; \n} \n```\n在Area的< clinit>中，将直接把2、4嵌入到字节码中:\n![clinit](http://images2015.cnblogs.com/blog/821477/201510/821477-20151014103108788-81357571.png)\n\n- (2).接口的初始化与类有所不同，在初始化阶段，会为在接口中声明的所有public、static和final类型的、无法被编译为常量的字段进行初始化 \n\n#### 类实例化 \n这里需要明白什么是类初始化，什么是类实例化，以及类的实例对象的初始化\n\n如前面所述，类初始化时对类(静态)变量赋予指定的初始值，类初始化之后就可以访问类的静态字段和方法，而访问类的非静态(实例)字段和方法，就需要创建类的对象实例，故类的实例化是在类的初始化之后，是在堆上创建一个该类的对象。 \n类的静态方法和字段属于类，作为类型数据保存在方法区，其生命周期取决于类，而实例方法和字段位于Java堆，其生命周期取决于对象的生命周期。\n　　\n**类的初始化会从祖先类到子类、按出现顺序，对类变量的初始化语句、静态初始化语句块依次进行初始化。而对类实例的初始化也类似，会从祖先类到子类、按出现顺序，对类成员的初始化语句、实例初始化块、构造方法依次进行初始化。 **\n\n比如：\n```java\npackage com.ice.init;\n\npublic class Parent {\n    public static int i = print(\"parent static:i\");\n    public int ii = print(\"parent:ii\");\n\n    static{\n        print(\"父类静态初始化\");\n    }\n\n    {\n        print(\"父类实例初始化\");\n    }\n\n    public Parent(String str) {\n        System.out.println(\"parent constructor:\" + str);\n    }\n\n    public static int print(String str){\n        System.out.println(\"initial:\" + str);\n        return i;\n    }\n}\n```\n子类Child如下：\n```java\npackage com.ice.init;\n\npublic class Child extends Parent{\n    public static int i = print(\"child static:i\");\n    public int ii = print(\"child:ii\");\n\n    static{\n        print(\"子类静态初始化\");\n    }\n\n    {\n        print(\"子类实例初始化\");\n    }\n\n    public Child(String str) {\n        super(str);\n        System.out.println(\"Child constructor:\" + str);\n    }\n\n    public static int print(String str){\n        System.out.println(\"initial:\" + str);\n        return i;\n    }\n\n    public static void main(String args[]){\n        Child child = new Child(\"cindy\");\n    }\n}\n```\n其初始化顺序为：\n```java\ninitial:parent static:i\ninitial:父类静态初始化\ninitial:child static:i\ninitial:子类静态初始化\ninitial:parent:ii\ninitial:父类实例初始化\nparent constructor:cindy\ninitial:child:ii\ninitial:子类实例初始化\nChild constructor:cindy\n```\nJava编译器为每个类生成了至少一个实例初始化方法< init >，一个< init >方法分为三部分： 另一个初始化方法< init >()，对任意实例成员的初始化的字节码，构造方法的方法体的字节码\n\n< init >方法的调用如下： \n若< init >指明从this()方法明确调用另一个构造方法，那么将调用另一个构造方法，否则，若该类有直接超类，那么，若< init >指明从super()方法明确调用其超类的构造方法，那么将调用超类的构造方法，否则，将默认调用超类的无参构造方法。这样，将从其祖先类到该类，分别完成对应的实例成员的初始化(可能被子类覆盖) \n\n接下来以一道题结束本节： \n判断输出：\n```java\npackage com.ice.init;\n\nclass T  implements Cloneable{\n      public static int k = 0;\n      public static T t1 = new T(\"t1\");\n      public static T t2 = new T(\"t2\");\n      public static int i = print(\"i\");\n      public static int n = 99;\n\n      public int j = print(\"j\");\n      {\n          print(\"构造块\");\n      }\n\n      static {\n          print(\"静态块\");\n      }\n\n      public T(String str) {\n          System.out.println((++k) + \":\" + str + \"    i=\" + i + \"  n=\" + n);\n          ++n; ++ i;\n      }\n\n      public static int print(String str){\n          System.out.println((++k) +\":\" + str + \"   i=\" + i + \"   n=\" + n);\n          ++n;\n          return ++ i;\n      }\n\n      public static void main(String[] args){\n          T t = new T(\"init\");\n      }\n    }\n```\n题解如下：\n\n(1).首先T类被加载、连接后进行初始化，会先对字段k、t1、t2、i、n以及static块进行初始化。 \n(2).t1实例的初始化会初始化实例成员j，(实际上先进行父类实例内容的初始化)先调用静态方法print，并执行实例初始化块{}，\t    输出： \n 1: j i=0 n= 0(i和n都还没有初始化) \n 2:构造块 i=1 n=1 \n(3)随后调用t1实例的构造函数，输出： \n 3:t1 i=2 n=2 \n(4).类似有t2实例的初始化： \n 4: j i=3 n= 3 \n 5:构造块 i=4 n=4 \n 6:t2 i=5 n=5 \n(5).i的初始化： \n 7.i i=6 n=6 \n(6).n的初始化和静态块的初始化： \n 8.静态块 i=7 n=99(n已经被初始化) \n(7).t实例的初始化： \n 9.j i=8 n= 100 \n 10.构造块 i=9 n= 101 \n 11.init i=10 n= 102\n","slug":"Java的连接与初始化","published":1,"updated":"2016-10-10T06:53:44.528Z","comments":1,"layout":"post","link":"","_id":"ciugm6bb1001x1giy4ttb0kby","content":"<blockquote>\n<p>原文作者：iceAeterna<br>原文链接：<a href=\"http://www.cnblogs.com/iceAeterNa/p/4876747.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/iceAeterNa/p/4876747.html</a></p>\n</blockquote>\n<h4 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h4><p>Java虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。<br><img src=\"http://img.blog.csdn.net/20151010184504881\" alt=\"\"></p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>解析过程可以推迟到类的初始化之后再进行，但这是有条件的，Java虚拟机必须在每个类或接口主动使用时进行初始化。<br>以下为主动使用的情况： </p>\n<ul>\n<li>创建某个类新的实例(无论直接通过new创建出来的，还是通过反射、克隆、序列化创建的)</li>\n<li>使用某个类的静态方法 </li>\n<li>访问某个类或接口的静态字段 </li>\n<li>调用JavaAPI中的某些反射方法 </li>\n<li>初始化某个类的子类(要求其祖先类都要被初始化，否则无法正确访问其继承的成员) </li>\n<li>启动某个标明为启动类的类(含有main()方法)<br>主动使用会导致类的初始化，其超类均将在该类的初始化之前被初始化，但通过子类访问父类的静态字段或方法时，对于子类(或子接口、接口的实现类)来说，这种访问就是被动访问，或者说访问了该类(接口)中的不在该类(接口)中声明的静态成员。 <a id=\"more\"></a>\n</li>\n</ul>\n<p>Grandpa的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grandpa</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Grandpa was initialized.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Parent的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Grandpa</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> String language = <span class=\"string\">\"Chinese\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Parent was initialized.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Cindy的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cindy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Child was initialized.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在通过Cindy访问父类的language成员:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PassiveAccessTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">        System.out.println(Cindy.language);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Grandpa was initialized.</div><div class=\"line\">Parent was initialized.</div><div class=\"line\">Chinese</div></pre></td></tr></table></figure></p>\n<p>可见这是被动访问，Cindy自身并没有初始化</p>\n<h4 id=\"装载\"><a href=\"#装载\" class=\"headerlink\" title=\"装载\"></a>装载</h4><p>装载的过程：</p>\n<ul>\n<li>(1).找到该类型的class文件，产生一个该类型的class文件二进制数据流(ClassLoader需要实现的loadClassData()方法) </li>\n<li>(2).解析该二进制数据流为方法区内的数据结构 </li>\n<li>(3).创建一个该类型的java.lang.Class实例 </li>\n</ul>\n<p>在加载器的相关代码中可以看到，最终通过defineClass()创建一个Java类型对象(Class对象)。 </p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>class文件校验器需要四趟独立的扫描来完成验证工作，其中： </p>\n<ul>\n<li>第一趟扫描在装载时进行，会对class文件进行结构检查，如 <ul>\n<li>(1).对魔数进行检查，以判断该文件是否是一个正常的class文件 </li>\n<li>(2).对主次版本号进行检查，以判断class文件是否与java虚拟机兼容 </li>\n<li>(3).对class文件的长度和类型进行检查，避免class文件部分缺失或被附加内容。 　</li>\n</ul>\n</li>\n<li>第二趟扫描在连接过程中进行，会对类型数据进行语义检查，主要检查各个类的二进制兼容性(主要是查看超类和子类的关系)和类本身是否符合特定的语义条件 <ul>\n<li>(1).final类不能拥有子类 </li>\n<li>(2).final方法不能被重写(覆盖) </li>\n<li>(3).子类和超类之间没有不兼容的方法声明 </li>\n<li>(4).检查常量池入口类型是否一致(如CONSTANT_Class常量池的内容是否指向一个CONSTANT_Utf8字符串常量池) </li>\n<li>(5).检查常量池的所有特殊字符串，以确定它们是否是其所属类型的实例，以及是否符合特定的上下文无关语法、格式 </li>\n</ul>\n</li>\n<li>第三趟扫描为字节码验证，其验证内容和实现较为复杂，主要检验字节码是否可以被java虚拟机安全地执行。 </li>\n<li>第四趟扫描在解析过程中进行，为对符号引用的验证。在动态连接过程中，通过保存在常量池的符号引用查找被引用的类、接口、字段、方法时，在把符号引用替换成直接引用时，首先需要确认查找的元素真正存在，然后需要检查访问权限、查找的元素是否是静态类成员而非实例成员。 </li>\n</ul>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>为类变量分配内存、设置默认初始值(内存设置初始值，而非对类变量真正地进行初始化，即类中声明int i = 5，但实际上这里是分配内存并设置初始值为0) </p>\n<h4 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>在类的常量池中寻找类、接口、字段、方法的符号引用，将这些符号引用替换成直接引用 </p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>对类变量赋予指定的初始值(这个时候int i = 5就必须赋予i以初值5)。这个初始值的给定方式有两种，一种是通过类变量的初始化语句，一种是静态初始化语句。而这些初始化语句都将被Java编译器一起放在方法中。<br>如前面所述，一个类的初始化需要初始化其直接超类，并递归初始化其祖先类，初始化是通过调用类的初始化方法完成的。此外，对于接口，并不需要初始化其父接口，而只需要执行该接口的接口初始化方法就可以了。</p>\n<p>注意：</p>\n<ul>\n<li>(1).在初始化阶段，只会为类变量(静态全局变量)进行初始化工作，并且当类变量声明为final类型切初始化语句采用了常量表达式方式进行初始化赋值，那么，也不会对其进行初始化，它将会直接被编译器计算并保存在常量池中，并且对这些变量的使用也将直接将其变量值嵌入到字节码中。<br>如UsefulParameter类如下： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class UsefulParameter&#123; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = <span class=\"number\">2</span>; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = height * <span class=\"number\">2</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类Area的类变量初始化如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class Area&#123; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> height = UsefulParameter.height * <span class=\"number\">2</span> ; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> width = UsefulParameter.width * <span class=\"number\">2</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Area的&lt; clinit&gt;中，将直接把2、4嵌入到字节码中:<br><img src=\"http://images2015.cnblogs.com/blog/821477/201510/821477-20151014103108788-81357571.png\" alt=\"clinit\"></p>\n<ul>\n<li>(2).接口的初始化与类有所不同，在初始化阶段，会为在接口中声明的所有public、static和final类型的、无法被编译为常量的字段进行初始化 </li>\n</ul>\n<h4 id=\"类实例化\"><a href=\"#类实例化\" class=\"headerlink\" title=\"类实例化\"></a>类实例化</h4><p>这里需要明白什么是类初始化，什么是类实例化，以及类的实例对象的初始化</p>\n<p>如前面所述，类初始化时对类(静态)变量赋予指定的初始值，类初始化之后就可以访问类的静态字段和方法，而访问类的非静态(实例)字段和方法，就需要创建类的对象实例，故类的实例化是在类的初始化之后，是在堆上创建一个该类的对象。<br>类的静态方法和字段属于类，作为类型数据保存在方法区，其生命周期取决于类，而实例方法和字段位于Java堆，其生命周期取决于对象的生命周期。<br>　　<br><strong>类的初始化会从祖先类到子类、按出现顺序，对类变量的初始化语句、静态初始化语句块依次进行初始化。而对类实例的初始化也类似，会从祖先类到子类、按出现顺序，对类成员的初始化语句、实例初始化块、构造方法依次进行初始化。 </strong></p>\n<p>比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.init;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = print(<span class=\"string\">\"parent static:i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ii = print(<span class=\"string\">\"parent:ii\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        print(<span class=\"string\">\"父类静态初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\">        print(<span class=\"string\">\"父类实例初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"parent constructor:\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"initial:\"</span> + str);</div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>子类Child如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.init;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = print(<span class=\"string\">\"child static:i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ii = print(<span class=\"string\">\"child:ii\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        print(<span class=\"string\">\"子类静态初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\">        print(<span class=\"string\">\"子类实例初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Child</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(str);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Child constructor:\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"initial:\"</span> + str);</div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">        Child child = <span class=\"keyword\">new</span> Child(<span class=\"string\">\"cindy\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其初始化顺序为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">initial:parent <span class=\"keyword\">static</span>:i</div><div class=\"line\">initial:父类静态初始化</div><div class=\"line\">initial:child <span class=\"keyword\">static</span>:i</div><div class=\"line\">initial:子类静态初始化</div><div class=\"line\">initial:parent:ii</div><div class=\"line\">initial:父类实例初始化</div><div class=\"line\">parent constructor:cindy</div><div class=\"line\">initial:child:ii</div><div class=\"line\">initial:子类实例初始化</div><div class=\"line\">Child constructor:cindy</div></pre></td></tr></table></figure></p>\n<p>Java编译器为每个类生成了至少一个实例初始化方法&lt; init &gt;，一个&lt; init &gt;方法分为三部分： 另一个初始化方法&lt; init &gt;()，对任意实例成员的初始化的字节码，构造方法的方法体的字节码</p>\n<p>&lt; init &gt;方法的调用如下：<br>若&lt; init &gt;指明从this()方法明确调用另一个构造方法，那么将调用另一个构造方法，否则，若该类有直接超类，那么，若&lt; init &gt;指明从super()方法明确调用其超类的构造方法，那么将调用超类的构造方法，否则，将默认调用超类的无参构造方法。这样，将从其祖先类到该类，分别完成对应的实例成员的初始化(可能被子类覆盖) </p>\n<p>接下来以一道题结束本节：<br>判断输出：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.init;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T t1 = <span class=\"keyword\">new</span> T(<span class=\"string\">\"t1\"</span>);</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T t2 = <span class=\"keyword\">new</span> T(<span class=\"string\">\"t2\"</span>);</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = print(<span class=\"string\">\"i\"</span>);</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> n = <span class=\"number\">99</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> j = print(<span class=\"string\">\"j\"</span>);</div><div class=\"line\">      &#123;</div><div class=\"line\">          print(<span class=\"string\">\"构造块\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">          print(<span class=\"string\">\"静态块\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">T</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">          System.out.println((++k) + <span class=\"string\">\":\"</span> + str + <span class=\"string\">\"    i=\"</span> + i + <span class=\"string\">\"  n=\"</span> + n);</div><div class=\"line\">          ++n; ++ i;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">          System.out.println((++k) +<span class=\"string\">\":\"</span> + str + <span class=\"string\">\"   i=\"</span> + i + <span class=\"string\">\"   n=\"</span> + n);</div><div class=\"line\">          ++n;</div><div class=\"line\">          <span class=\"keyword\">return</span> ++ i;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">          T t = <span class=\"keyword\">new</span> T(<span class=\"string\">\"init\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>题解如下：</p>\n<p>(1).首先T类被加载、连接后进行初始化，会先对字段k、t1、t2、i、n以及static块进行初始化。<br>(2).t1实例的初始化会初始化实例成员j，(实际上先进行父类实例内容的初始化)先调用静态方法print，并执行实例初始化块{}，        输出：<br> 1: j i=0 n= 0(i和n都还没有初始化)<br> 2:构造块 i=1 n=1<br>(3)随后调用t1实例的构造函数，输出：<br> 3:t1 i=2 n=2<br>(4).类似有t2实例的初始化：<br> 4: j i=3 n= 3<br> 5:构造块 i=4 n=4<br> 6:t2 i=5 n=5<br>(5).i的初始化：<br> 7.i i=6 n=6<br>(6).n的初始化和静态块的初始化：<br> 8.静态块 i=7 n=99(n已经被初始化)<br>(7).t实例的初始化：<br> 9.j i=8 n= 100<br> 10.构造块 i=9 n= 101<br> 11.init i=10 n= 102</p>\n","excerpt":"<blockquote>\n<p>原文作者：iceAeterna<br>原文链接：<a href=\"http://www.cnblogs.com/iceAeterNa/p/4876747.html\">http://www.cnblogs.com/iceAeterNa/p/4876747.html</a></p>\n</blockquote>\n<h4 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h4><p>Java虚拟机通过装载、连接、初始化来使得一个Java类型可以被Java程序所使用，如下图所示，其中连接过程又分为验证、准备、解析三个部分。其中部分类的解析过程可以推迟到程序真正使用其某个符号引用时再去解析。<br><img src=\"http://img.blog.csdn.net/20151010184504881\" alt=\"\"></p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>解析过程可以推迟到类的初始化之后再进行，但这是有条件的，Java虚拟机必须在每个类或接口主动使用时进行初始化。<br>以下为主动使用的情况： </p>\n<ul>\n<li>创建某个类新的实例(无论直接通过new创建出来的，还是通过反射、克隆、序列化创建的)</li>\n<li>使用某个类的静态方法 </li>\n<li>访问某个类或接口的静态字段 </li>\n<li>调用JavaAPI中的某些反射方法 </li>\n<li>初始化某个类的子类(要求其祖先类都要被初始化，否则无法正确访问其继承的成员) </li>\n<li>启动某个标明为启动类的类(含有main()方法)<br>主动使用会导致类的初始化，其超类均将在该类的初始化之前被初始化，但通过子类访问父类的静态字段或方法时，对于子类(或子接口、接口的实现类)来说，这种访问就是被动访问，或者说访问了该类(接口)中的不在该类(接口)中声明的静态成员。","more":"</li>\n</ul>\n<p>Grandpa的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grandpa</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Grandpa was initialized.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Parent的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Grandpa</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> String language = <span class=\"string\">\"Chinese\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Parent was initialized.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Cindy的定义如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cindy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Child was initialized.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在通过Cindy访问父类的language成员:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.passiveaccess;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PassiveAccessTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">        System.out.println(Cindy.language);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Grandpa was initialized.</div><div class=\"line\">Parent was initialized.</div><div class=\"line\">Chinese</div></pre></td></tr></table></figure></p>\n<p>可见这是被动访问，Cindy自身并没有初始化</p>\n<h4 id=\"装载\"><a href=\"#装载\" class=\"headerlink\" title=\"装载\"></a>装载</h4><p>装载的过程：</p>\n<ul>\n<li>(1).找到该类型的class文件，产生一个该类型的class文件二进制数据流(ClassLoader需要实现的loadClassData()方法) </li>\n<li>(2).解析该二进制数据流为方法区内的数据结构 </li>\n<li>(3).创建一个该类型的java.lang.Class实例 </li>\n</ul>\n<p>在加载器的相关代码中可以看到，最终通过defineClass()创建一个Java类型对象(Class对象)。 </p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><p>class文件校验器需要四趟独立的扫描来完成验证工作，其中： </p>\n<ul>\n<li>第一趟扫描在装载时进行，会对class文件进行结构检查，如 <ul>\n<li>(1).对魔数进行检查，以判断该文件是否是一个正常的class文件 </li>\n<li>(2).对主次版本号进行检查，以判断class文件是否与java虚拟机兼容 </li>\n<li>(3).对class文件的长度和类型进行检查，避免class文件部分缺失或被附加内容。 　</li>\n</ul>\n</li>\n<li>第二趟扫描在连接过程中进行，会对类型数据进行语义检查，主要检查各个类的二进制兼容性(主要是查看超类和子类的关系)和类本身是否符合特定的语义条件 <ul>\n<li>(1).final类不能拥有子类 </li>\n<li>(2).final方法不能被重写(覆盖) </li>\n<li>(3).子类和超类之间没有不兼容的方法声明 </li>\n<li>(4).检查常量池入口类型是否一致(如CONSTANT_Class常量池的内容是否指向一个CONSTANT_Utf8字符串常量池) </li>\n<li>(5).检查常量池的所有特殊字符串，以确定它们是否是其所属类型的实例，以及是否符合特定的上下文无关语法、格式 </li>\n</ul>\n</li>\n<li>第三趟扫描为字节码验证，其验证内容和实现较为复杂，主要检验字节码是否可以被java虚拟机安全地执行。 </li>\n<li>第四趟扫描在解析过程中进行，为对符号引用的验证。在动态连接过程中，通过保存在常量池的符号引用查找被引用的类、接口、字段、方法时，在把符号引用替换成直接引用时，首先需要确认查找的元素真正存在，然后需要检查访问权限、查找的元素是否是静态类成员而非实例成员。 </li>\n</ul>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>为类变量分配内存、设置默认初始值(内存设置初始值，而非对类变量真正地进行初始化，即类中声明int i = 5，但实际上这里是分配内存并设置初始值为0) </p>\n<h4 id=\"解析-1\"><a href=\"#解析-1\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>在类的常量池中寻找类、接口、字段、方法的符号引用，将这些符号引用替换成直接引用 </p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>对类变量赋予指定的初始值(这个时候int i = 5就必须赋予i以初值5)。这个初始值的给定方式有两种，一种是通过类变量的初始化语句，一种是静态初始化语句。而这些初始化语句都将被Java编译器一起放在方法中。<br>如前面所述，一个类的初始化需要初始化其直接超类，并递归初始化其祖先类，初始化是通过调用类的初始化方法完成的。此外，对于接口，并不需要初始化其父接口，而只需要执行该接口的接口初始化方法就可以了。</p>\n<p>注意：</p>\n<ul>\n<li>(1).在初始化阶段，只会为类变量(静态全局变量)进行初始化工作，并且当类变量声明为final类型切初始化语句采用了常量表达式方式进行初始化赋值，那么，也不会对其进行初始化，它将会直接被编译器计算并保存在常量池中，并且对这些变量的使用也将直接将其变量值嵌入到字节码中。<br>如UsefulParameter类如下： <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class UsefulParameter&#123; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = <span class=\"number\">2</span>; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = height * <span class=\"number\">2</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类Area的类变量初始化如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class Area&#123; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> height = UsefulParameter.height * <span class=\"number\">2</span> ; </div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> width = UsefulParameter.width * <span class=\"number\">2</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Area的&lt; clinit&gt;中，将直接把2、4嵌入到字节码中:<br><img src=\"http://images2015.cnblogs.com/blog/821477/201510/821477-20151014103108788-81357571.png\" alt=\"clinit\"></p>\n<ul>\n<li>(2).接口的初始化与类有所不同，在初始化阶段，会为在接口中声明的所有public、static和final类型的、无法被编译为常量的字段进行初始化 </li>\n</ul>\n<h4 id=\"类实例化\"><a href=\"#类实例化\" class=\"headerlink\" title=\"类实例化\"></a>类实例化</h4><p>这里需要明白什么是类初始化，什么是类实例化，以及类的实例对象的初始化</p>\n<p>如前面所述，类初始化时对类(静态)变量赋予指定的初始值，类初始化之后就可以访问类的静态字段和方法，而访问类的非静态(实例)字段和方法，就需要创建类的对象实例，故类的实例化是在类的初始化之后，是在堆上创建一个该类的对象。<br>类的静态方法和字段属于类，作为类型数据保存在方法区，其生命周期取决于类，而实例方法和字段位于Java堆，其生命周期取决于对象的生命周期。<br>　　<br><strong>类的初始化会从祖先类到子类、按出现顺序，对类变量的初始化语句、静态初始化语句块依次进行初始化。而对类实例的初始化也类似，会从祖先类到子类、按出现顺序，对类成员的初始化语句、实例初始化块、构造方法依次进行初始化。 </strong></p>\n<p>比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.init;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = print(<span class=\"string\">\"parent static:i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ii = print(<span class=\"string\">\"parent:ii\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        print(<span class=\"string\">\"父类静态初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\">        print(<span class=\"string\">\"父类实例初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"parent constructor:\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"initial:\"</span> + str);</div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>子类Child如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.init;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = print(<span class=\"string\">\"child static:i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ii = print(<span class=\"string\">\"child:ii\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span>&#123;</div><div class=\"line\">        print(<span class=\"string\">\"子类静态初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\">        print(<span class=\"string\">\"子类实例初始化\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Child</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(str);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Child constructor:\"</span> + str);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"initial:\"</span> + str);</div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">        Child child = <span class=\"keyword\">new</span> Child(<span class=\"string\">\"cindy\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其初始化顺序为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">initial:parent <span class=\"keyword\">static</span>:i</div><div class=\"line\">initial:父类静态初始化</div><div class=\"line\">initial:child <span class=\"keyword\">static</span>:i</div><div class=\"line\">initial:子类静态初始化</div><div class=\"line\">initial:parent:ii</div><div class=\"line\">initial:父类实例初始化</div><div class=\"line\">parent constructor:cindy</div><div class=\"line\">initial:child:ii</div><div class=\"line\">initial:子类实例初始化</div><div class=\"line\">Child constructor:cindy</div></pre></td></tr></table></figure></p>\n<p>Java编译器为每个类生成了至少一个实例初始化方法&lt; init &gt;，一个&lt; init &gt;方法分为三部分： 另一个初始化方法&lt; init &gt;()，对任意实例成员的初始化的字节码，构造方法的方法体的字节码</p>\n<p>&lt; init &gt;方法的调用如下：<br>若&lt; init &gt;指明从this()方法明确调用另一个构造方法，那么将调用另一个构造方法，否则，若该类有直接超类，那么，若&lt; init &gt;指明从super()方法明确调用其超类的构造方法，那么将调用超类的构造方法，否则，将默认调用超类的无参构造方法。这样，将从其祖先类到该类，分别完成对应的实例成员的初始化(可能被子类覆盖) </p>\n<p>接下来以一道题结束本节：<br>判断输出：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.ice.init;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T t1 = <span class=\"keyword\">new</span> T(<span class=\"string\">\"t1\"</span>);</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T t2 = <span class=\"keyword\">new</span> T(<span class=\"string\">\"t2\"</span>);</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = print(<span class=\"string\">\"i\"</span>);</div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> n = <span class=\"number\">99</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> j = print(<span class=\"string\">\"j\"</span>);</div><div class=\"line\">      &#123;</div><div class=\"line\">          print(<span class=\"string\">\"构造块\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">          print(<span class=\"string\">\"静态块\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">T</span><span class=\"params\">(String str)</span> </span>&#123;</div><div class=\"line\">          System.out.println((++k) + <span class=\"string\">\":\"</span> + str + <span class=\"string\">\"    i=\"</span> + i + <span class=\"string\">\"  n=\"</span> + n);</div><div class=\"line\">          ++n; ++ i;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">print</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">          System.out.println((++k) +<span class=\"string\">\":\"</span> + str + <span class=\"string\">\"   i=\"</span> + i + <span class=\"string\">\"   n=\"</span> + n);</div><div class=\"line\">          ++n;</div><div class=\"line\">          <span class=\"keyword\">return</span> ++ i;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">          T t = <span class=\"keyword\">new</span> T(<span class=\"string\">\"init\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>题解如下：</p>\n<p>(1).首先T类被加载、连接后进行初始化，会先对字段k、t1、t2、i、n以及static块进行初始化。<br>(2).t1实例的初始化会初始化实例成员j，(实际上先进行父类实例内容的初始化)先调用静态方法print，并执行实例初始化块{}，        输出：<br> 1: j i=0 n= 0(i和n都还没有初始化)<br> 2:构造块 i=1 n=1<br>(3)随后调用t1实例的构造函数，输出：<br> 3:t1 i=2 n=2<br>(4).类似有t2实例的初始化：<br> 4: j i=3 n= 3<br> 5:构造块 i=4 n=4<br> 6:t2 i=5 n=5<br>(5).i的初始化：<br> 7.i i=6 n=6<br>(6).n的初始化和静态块的初始化：<br> 8.静态块 i=7 n=99(n已经被初始化)<br>(7).t实例的初始化：<br> 9.j i=8 n= 100<br> 10.构造块 i=9 n= 101<br> 11.init i=10 n= 102</p>"},{"title":"Parcelable vs Serializable","date":"2015-12-24T07:49:15.000Z","_content":"\n#### 序论\n在Android中，我们需要传递对象的引用在activity和fragment之间，因此我们不得不放在Intent/Bundle中。\n\n通过api我们了解到有两种选择，可以使用对象的**[Parcelable][1]**或者**[Serializable][2]**形式，作为Java的开发者，我们已经知道Serializable机制，那么为什么还有Parcelable？\n\n要回答这个问题，先让我们看看这两个方法。\n#### **Serializable**，简单之主\n\n``` java\n// access modifiers, accessors and constructors omitted for brevity\npublic class SerializableDeveloper implements Serializable\n    String name;\n    int yearsOfExperience;\n    List<Skill> skillSet;\n    float favoriteFloat;\n\n    static class Skill implements Serializable {\n        String name;\n        boolean programmingRelated;\n    }\n}\n```\n\nSerializable的美在于你只需要将类和他的子类实现Serializable接口，这是一个标记接口，意味着没有方法来实现，Java可以简单有效的实现它的序列化。\n\n这个方法的问题是，他使用到了反射，并且它是一个缓慢的进程。正是这个机制，创造了大量的临时对象，并且造成大量的gc。\n<!-- more -->\n\n#### **Parcelable**, 速度之王\n\n``` java\n// access modifiers, accessors and regular constructors ommited for brevity\nclass ParcelableDeveloper implements Parcelable {\n    String name;\n    int yearsOfExperience;\n    List<Skill> skillSet;\n    float favoriteFloat;\n\n    ParcelableDeveloper(Parcel in) {\n        this.name = in.readString();\n        this.yearsOfExperience = in.readInt();\n        this.skillSet = new ArrayList<Skill>();\n        in.readTypedList(skillSet, Skill.CREATOR);\n        this.favoriteFloat = in.readFloat();\n    }\n\n    void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(name);\n        dest.writeInt(yearsOfExperience);\n        dest.writeTypedList(skillSet);\n        dest.writeFloat(favoriteFloat);\n    }\n\n    int describeContents() {\n        return 0;\n    }\n\n\n    static final Parcelable.Creator<ParcelableDeveloper> CREATOR\n            = new Parcelable.Creator<ParcelableDeveloper>() {\n\n        ParcelableDeveloper createFromParcel(Parcel in) {\n            return new ParcelableDeveloper(in);\n        }\n\n        ParcelableDeveloper[] newArray(int size) {\n            return new ParcelableDeveloper[size];\n        }\n    };\n\n    static class Skill implements Parcelable {\n        String name;\n        boolean programmingRelated;\n\n        Skill(Parcel in) {\n            this.name = in.readString();\n            this.programmingRelated = (in.readInt() == 1);\n        }\n\n        @Override\n        void writeToParcel(Parcel dest, int flags) {\n            dest.writeString(name);\n            dest.writeInt(programmingRelated ? 1 : 0);\n        }\n\n        static final Parcelable.Creator<Skill> CREATOR\n            = new Parcelable.Creator<Skill>() {\n\n            Skill createFromParcel(Parcel in) {\n                return new Skill(in);\n            }\n\n            Skill[] newArray(int size) {\n                return new Skill[size];\n            }\n        };\n\n        @Override\n        int describeContents() {\n            return 0;\n        }\n    }\n}\n```\n\n根据**[google engineers][3]**，这段代码明显运行的很快。其中一个原因就是，我们明确实例化的进程，而不是使用反射来推断它。支撑他的另一个原因就是，它也为此目的做了大量的优化。\n\n无论怎样，可以明显的看出实现Parcelable不是免费的，他会有大量的样板代码，并且是类很难阅读和维护。\n\n#### 速度测试\n\n当然，我们想要知道Parcelable有多快。\n\n#### 方法论\n\n- 1.模拟传递对象给activity的过程，通过将一个对象放入bundle并调用**[Bundle#writeToParcel(Parcel,int)](https://developer.android.com/intl/zh-cn/reference/android/os/Bundle.html#writeToParcel(android.os.Parcel, int)**，然后取出来。\n- 2.循环执行1000次\n- 3.取10次独立运行的内存占用平均值，其他应用使用这个cpu\n- 4.被测试对象是上面展示的SerializableDeveloper和ParcelableDeveloper\n- 5.在多个设备上测试 - android版本\n\t- LG Nexus 4 - Android 4.2.2 \n\t- Samsung Nexus 10 - Android 4.2.2\n\t- HTC Desire Z - Android 2.3.3\n\n#### 结果\n\n![result](http://www.developerphil.com/assets/parcelable-vs-serializable-e1366334109758.png) \n**Nexus 10**\n\nSerializable: 1.0004ms,  Parcelable: 0.0850ms - 10.16x improvement.\n\n**Nexus 4**\n\nSerializable: 1.8539ms - Parcelable: 0.1824ms - 11.80x improvement.\n\n**Desire Z**\n\nSerializable: 5.1224ms - Parcelable: 0.2938ms - 17.36x improvement.\n\n想必你已经知道了，Parcelable比Serializable快了10倍。\n\n#### 本质\n\n \n如果你想要成为一个好公民，那就花费更多的时间来实现**[Parcelable][1]**，因为这将快10倍的速度，而且占用更少的资源。\n\n然而，在大部分情况下，**[Serializable][2]**的慢并不是很明显，你可以随意使用它，但是记住，序列化是一个昂贵的操作，它将保持在一个低速状态。\n\n如果你正在传递上千的序列化对象队列，整个过程很有可能超过了一秒钟，它可以使转换或旋转从纵向到横向感到十分缓慢。\n\n [1]: http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html\n [2]: https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html\n [3]: http://stackoverflow.com/questions/3611843/is-using-serializable-in-android-bad/3612364#3612364","source":"_posts/Parcelable-vs-Serializable.md","raw":"title: Parcelable vs Serializable\ndate: 2015-12-24 15:49:15\ncategories: [Complex]\ntags: [Parcelable, Serializable, 序列化]\n---\n\n#### 序论\n在Android中，我们需要传递对象的引用在activity和fragment之间，因此我们不得不放在Intent/Bundle中。\n\n通过api我们了解到有两种选择，可以使用对象的**[Parcelable][1]**或者**[Serializable][2]**形式，作为Java的开发者，我们已经知道Serializable机制，那么为什么还有Parcelable？\n\n要回答这个问题，先让我们看看这两个方法。\n#### **Serializable**，简单之主\n\n``` java\n// access modifiers, accessors and constructors omitted for brevity\npublic class SerializableDeveloper implements Serializable\n    String name;\n    int yearsOfExperience;\n    List<Skill> skillSet;\n    float favoriteFloat;\n\n    static class Skill implements Serializable {\n        String name;\n        boolean programmingRelated;\n    }\n}\n```\n\nSerializable的美在于你只需要将类和他的子类实现Serializable接口，这是一个标记接口，意味着没有方法来实现，Java可以简单有效的实现它的序列化。\n\n这个方法的问题是，他使用到了反射，并且它是一个缓慢的进程。正是这个机制，创造了大量的临时对象，并且造成大量的gc。\n<!-- more -->\n\n#### **Parcelable**, 速度之王\n\n``` java\n// access modifiers, accessors and regular constructors ommited for brevity\nclass ParcelableDeveloper implements Parcelable {\n    String name;\n    int yearsOfExperience;\n    List<Skill> skillSet;\n    float favoriteFloat;\n\n    ParcelableDeveloper(Parcel in) {\n        this.name = in.readString();\n        this.yearsOfExperience = in.readInt();\n        this.skillSet = new ArrayList<Skill>();\n        in.readTypedList(skillSet, Skill.CREATOR);\n        this.favoriteFloat = in.readFloat();\n    }\n\n    void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(name);\n        dest.writeInt(yearsOfExperience);\n        dest.writeTypedList(skillSet);\n        dest.writeFloat(favoriteFloat);\n    }\n\n    int describeContents() {\n        return 0;\n    }\n\n\n    static final Parcelable.Creator<ParcelableDeveloper> CREATOR\n            = new Parcelable.Creator<ParcelableDeveloper>() {\n\n        ParcelableDeveloper createFromParcel(Parcel in) {\n            return new ParcelableDeveloper(in);\n        }\n\n        ParcelableDeveloper[] newArray(int size) {\n            return new ParcelableDeveloper[size];\n        }\n    };\n\n    static class Skill implements Parcelable {\n        String name;\n        boolean programmingRelated;\n\n        Skill(Parcel in) {\n            this.name = in.readString();\n            this.programmingRelated = (in.readInt() == 1);\n        }\n\n        @Override\n        void writeToParcel(Parcel dest, int flags) {\n            dest.writeString(name);\n            dest.writeInt(programmingRelated ? 1 : 0);\n        }\n\n        static final Parcelable.Creator<Skill> CREATOR\n            = new Parcelable.Creator<Skill>() {\n\n            Skill createFromParcel(Parcel in) {\n                return new Skill(in);\n            }\n\n            Skill[] newArray(int size) {\n                return new Skill[size];\n            }\n        };\n\n        @Override\n        int describeContents() {\n            return 0;\n        }\n    }\n}\n```\n\n根据**[google engineers][3]**，这段代码明显运行的很快。其中一个原因就是，我们明确实例化的进程，而不是使用反射来推断它。支撑他的另一个原因就是，它也为此目的做了大量的优化。\n\n无论怎样，可以明显的看出实现Parcelable不是免费的，他会有大量的样板代码，并且是类很难阅读和维护。\n\n#### 速度测试\n\n当然，我们想要知道Parcelable有多快。\n\n#### 方法论\n\n- 1.模拟传递对象给activity的过程，通过将一个对象放入bundle并调用**[Bundle#writeToParcel(Parcel,int)](https://developer.android.com/intl/zh-cn/reference/android/os/Bundle.html#writeToParcel(android.os.Parcel, int)**，然后取出来。\n- 2.循环执行1000次\n- 3.取10次独立运行的内存占用平均值，其他应用使用这个cpu\n- 4.被测试对象是上面展示的SerializableDeveloper和ParcelableDeveloper\n- 5.在多个设备上测试 - android版本\n\t- LG Nexus 4 - Android 4.2.2 \n\t- Samsung Nexus 10 - Android 4.2.2\n\t- HTC Desire Z - Android 2.3.3\n\n#### 结果\n\n![result](http://www.developerphil.com/assets/parcelable-vs-serializable-e1366334109758.png) \n**Nexus 10**\n\nSerializable: 1.0004ms,  Parcelable: 0.0850ms - 10.16x improvement.\n\n**Nexus 4**\n\nSerializable: 1.8539ms - Parcelable: 0.1824ms - 11.80x improvement.\n\n**Desire Z**\n\nSerializable: 5.1224ms - Parcelable: 0.2938ms - 17.36x improvement.\n\n想必你已经知道了，Parcelable比Serializable快了10倍。\n\n#### 本质\n\n \n如果你想要成为一个好公民，那就花费更多的时间来实现**[Parcelable][1]**，因为这将快10倍的速度，而且占用更少的资源。\n\n然而，在大部分情况下，**[Serializable][2]**的慢并不是很明显，你可以随意使用它，但是记住，序列化是一个昂贵的操作，它将保持在一个低速状态。\n\n如果你正在传递上千的序列化对象队列，整个过程很有可能超过了一秒钟，它可以使转换或旋转从纵向到横向感到十分缓慢。\n\n [1]: http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html\n [2]: https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html\n [3]: http://stackoverflow.com/questions/3611843/is-using-serializable-in-android-bad/3612364#3612364","slug":"Parcelable-vs-Serializable","published":1,"updated":"2016-10-10T06:53:44.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bb500201giygk0ouagg","content":"<h4 id=\"序论\"><a href=\"#序论\" class=\"headerlink\" title=\"序论\"></a>序论</h4><p>在Android中，我们需要传递对象的引用在activity和fragment之间，因此我们不得不放在Intent/Bundle中。</p>\n<p>通过api我们了解到有两种选择，可以使用对象的<strong><a href=\"http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html\" target=\"_blank\" rel=\"external\">Parcelable</a></strong>或者<strong><a href=\"https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html\" target=\"_blank\" rel=\"external\">Serializable</a></strong>形式，作为Java的开发者，我们已经知道Serializable机制，那么为什么还有Parcelable？</p>\n<p>要回答这个问题，先让我们看看这两个方法。</p>\n<h4 id=\"Serializable，简单之主\"><a href=\"#Serializable，简单之主\" class=\"headerlink\" title=\"Serializable，简单之主\"></a><strong>Serializable</strong>，简单之主</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// access modifiers, accessors and constructors omitted for brevity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerializableDeveloper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span></div><div class=\"line\">    <span class=\"title\">String</span> <span class=\"title\">name</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> yearsOfExperience;</div><div class=\"line\">    List&lt;Skill&gt; skillSet;</div><div class=\"line\">    <span class=\"keyword\">float</span> favoriteFloat;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Skill</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">        String name;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> programmingRelated;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Serializable的美在于你只需要将类和他的子类实现Serializable接口，这是一个标记接口，意味着没有方法来实现，Java可以简单有效的实现它的序列化。</p>\n<p>这个方法的问题是，他使用到了反射，并且它是一个缓慢的进程。正是这个机制，创造了大量的临时对象，并且造成大量的gc。<br><a id=\"more\"></a></p>\n<h4 id=\"Parcelable-速度之王\"><a href=\"#Parcelable-速度之王\" class=\"headerlink\" title=\"Parcelable, 速度之王\"></a><strong>Parcelable</strong>, 速度之王</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// access modifiers, accessors and regular constructors ommited for brevity</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParcelableDeveloper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">    String name;</div><div class=\"line\">    <span class=\"keyword\">int</span> yearsOfExperience;</div><div class=\"line\">    List&lt;Skill&gt; skillSet;</div><div class=\"line\">    <span class=\"keyword\">float</span> favoriteFloat;</div><div class=\"line\"></div><div class=\"line\">    ParcelableDeveloper(Parcel in) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.yearsOfExperience = in.readInt();</div><div class=\"line\">        <span class=\"keyword\">this</span>.skillSet = <span class=\"keyword\">new</span> ArrayList&lt;Skill&gt;();</div><div class=\"line\">        in.readTypedList(skillSet, Skill.CREATOR);</div><div class=\"line\">        <span class=\"keyword\">this</span>.favoriteFloat = in.readFloat();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        dest.writeString(name);</div><div class=\"line\">        dest.writeInt(yearsOfExperience);</div><div class=\"line\">        dest.writeTypedList(skillSet);</div><div class=\"line\">        dest.writeFloat(favoriteFloat);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;ParcelableDeveloper&gt; CREATOR</div><div class=\"line\">            = <span class=\"keyword\">new</span> Parcelable.Creator&lt;ParcelableDeveloper&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">ParcelableDeveloper <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ParcelableDeveloper(in);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ParcelableDeveloper[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ParcelableDeveloper[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Skill</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">        String name;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> programmingRelated;</div><div class=\"line\"></div><div class=\"line\">        Skill(Parcel in) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">            <span class=\"keyword\">this</span>.programmingRelated = (in.readInt() == <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">            dest.writeString(name);</div><div class=\"line\">            dest.writeInt(programmingRelated ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Skill&gt; CREATOR</div><div class=\"line\">            = <span class=\"keyword\">new</span> Parcelable.Creator&lt;Skill&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\">Skill <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Skill(in);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Skill[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Skill[size];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>根据<strong><a href=\"http://stackoverflow.com/questions/3611843/is-using-serializable-in-android-bad/3612364#3612364\" target=\"_blank\" rel=\"external\">google engineers</a></strong>，这段代码明显运行的很快。其中一个原因就是，我们明确实例化的进程，而不是使用反射来推断它。支撑他的另一个原因就是，它也为此目的做了大量的优化。</p>\n<p>无论怎样，可以明显的看出实现Parcelable不是免费的，他会有大量的样板代码，并且是类很难阅读和维护。</p>\n<h4 id=\"速度测试\"><a href=\"#速度测试\" class=\"headerlink\" title=\"速度测试\"></a>速度测试</h4><p>当然，我们想要知道Parcelable有多快。</p>\n<h4 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h4><ul>\n<li>1.模拟传递对象给activity的过程，通过将一个对象放入bundle并调用<strong><a href=\"https://developer.android.com/intl/zh-cn/reference/android/os/Bundle.html#writeToParcel(android.os.Parcel, int\" target=\"_blank\" rel=\"external\">Bundle#writeToParcel(Parcel,int)</a></strong>，然后取出来。</li>\n<li>2.循环执行1000次</li>\n<li>3.取10次独立运行的内存占用平均值，其他应用使用这个cpu</li>\n<li>4.被测试对象是上面展示的SerializableDeveloper和ParcelableDeveloper</li>\n<li>5.在多个设备上测试 - android版本<ul>\n<li>LG Nexus 4 - Android 4.2.2 </li>\n<li>Samsung Nexus 10 - Android 4.2.2</li>\n<li>HTC Desire Z - Android 2.3.3</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"http://www.developerphil.com/assets/parcelable-vs-serializable-e1366334109758.png\" alt=\"result\"><br><strong>Nexus 10</strong></p>\n<p>Serializable: 1.0004ms,  Parcelable: 0.0850ms - 10.16x improvement.</p>\n<p><strong>Nexus 4</strong></p>\n<p>Serializable: 1.8539ms - Parcelable: 0.1824ms - 11.80x improvement.</p>\n<p><strong>Desire Z</strong></p>\n<p>Serializable: 5.1224ms - Parcelable: 0.2938ms - 17.36x improvement.</p>\n<p>想必你已经知道了，Parcelable比Serializable快了10倍。</p>\n<h4 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h4><p>如果你想要成为一个好公民，那就花费更多的时间来实现<strong><a href=\"http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html\" target=\"_blank\" rel=\"external\">Parcelable</a></strong>，因为这将快10倍的速度，而且占用更少的资源。</p>\n<p>然而，在大部分情况下，<strong><a href=\"https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html\" target=\"_blank\" rel=\"external\">Serializable</a></strong>的慢并不是很明显，你可以随意使用它，但是记住，序列化是一个昂贵的操作，它将保持在一个低速状态。</p>\n<p>如果你正在传递上千的序列化对象队列，整个过程很有可能超过了一秒钟，它可以使转换或旋转从纵向到横向感到十分缓慢。</p>\n","excerpt":"<h4 id=\"序论\"><a href=\"#序论\" class=\"headerlink\" title=\"序论\"></a>序论</h4><p>在Android中，我们需要传递对象的引用在activity和fragment之间，因此我们不得不放在Intent/Bundle中。</p>\n<p>通过api我们了解到有两种选择，可以使用对象的<strong><a href=\"http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html\">Parcelable</a></strong>或者<strong><a href=\"https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html\">Serializable</a></strong>形式，作为Java的开发者，我们已经知道Serializable机制，那么为什么还有Parcelable？</p>\n<p>要回答这个问题，先让我们看看这两个方法。</p>\n<h4 id=\"Serializable，简单之主\"><a href=\"#Serializable，简单之主\" class=\"headerlink\" title=\"Serializable，简单之主\"></a><strong>Serializable</strong>，简单之主</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// access modifiers, accessors and constructors omitted for brevity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerializableDeveloper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></div><div class=\"line\">    <span class=\"title\">String</span> <span class=\"title\">name</span></span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> yearsOfExperience;</div><div class=\"line\">    List&lt;Skill&gt; skillSet;</div><div class=\"line\">    <span class=\"keyword\">float</span> favoriteFloat;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Skill</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">        String name;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> programmingRelated;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Serializable的美在于你只需要将类和他的子类实现Serializable接口，这是一个标记接口，意味着没有方法来实现，Java可以简单有效的实现它的序列化。</p>\n<p>这个方法的问题是，他使用到了反射，并且它是一个缓慢的进程。正是这个机制，创造了大量的临时对象，并且造成大量的gc。<br>","more":"</p>\n<h4 id=\"Parcelable-速度之王\"><a href=\"#Parcelable-速度之王\" class=\"headerlink\" title=\"Parcelable, 速度之王\"></a><strong>Parcelable</strong>, 速度之王</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// access modifiers, accessors and regular constructors ommited for brevity</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParcelableDeveloper</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">    String name;</div><div class=\"line\">    <span class=\"keyword\">int</span> yearsOfExperience;</div><div class=\"line\">    List&lt;Skill&gt; skillSet;</div><div class=\"line\">    <span class=\"keyword\">float</span> favoriteFloat;</div><div class=\"line\"></div><div class=\"line\">    ParcelableDeveloper(Parcel in) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">        <span class=\"keyword\">this</span>.yearsOfExperience = in.readInt();</div><div class=\"line\">        <span class=\"keyword\">this</span>.skillSet = <span class=\"keyword\">new</span> ArrayList&lt;Skill&gt;();</div><div class=\"line\">        in.readTypedList(skillSet, Skill.CREATOR);</div><div class=\"line\">        <span class=\"keyword\">this</span>.favoriteFloat = in.readFloat();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">        dest.writeString(name);</div><div class=\"line\">        dest.writeInt(yearsOfExperience);</div><div class=\"line\">        dest.writeTypedList(skillSet);</div><div class=\"line\">        dest.writeFloat(favoriteFloat);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;ParcelableDeveloper&gt; CREATOR</div><div class=\"line\">            = <span class=\"keyword\">new</span> Parcelable.Creator&lt;ParcelableDeveloper&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">ParcelableDeveloper <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ParcelableDeveloper(in);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ParcelableDeveloper[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ParcelableDeveloper[size];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Skill</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</div><div class=\"line\">        String name;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> programmingRelated;</div><div class=\"line\"></div><div class=\"line\">        Skill(Parcel in) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = in.readString();</div><div class=\"line\">            <span class=\"keyword\">this</span>.programmingRelated = (in.readInt() == <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</div><div class=\"line\">            dest.writeString(name);</div><div class=\"line\">            dest.writeInt(programmingRelated ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Skill&gt; CREATOR</div><div class=\"line\">            = <span class=\"keyword\">new</span> Parcelable.Creator&lt;Skill&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\">Skill <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel in)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Skill(in);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            Skill[] newArray(<span class=\"keyword\">int</span> size) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Skill[size];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>根据<strong><a href=\"http://stackoverflow.com/questions/3611843/is-using-serializable-in-android-bad/3612364#3612364\">google engineers</a></strong>，这段代码明显运行的很快。其中一个原因就是，我们明确实例化的进程，而不是使用反射来推断它。支撑他的另一个原因就是，它也为此目的做了大量的优化。</p>\n<p>无论怎样，可以明显的看出实现Parcelable不是免费的，他会有大量的样板代码，并且是类很难阅读和维护。</p>\n<h4 id=\"速度测试\"><a href=\"#速度测试\" class=\"headerlink\" title=\"速度测试\"></a>速度测试</h4><p>当然，我们想要知道Parcelable有多快。</p>\n<h4 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h4><ul>\n<li>1.模拟传递对象给activity的过程，通过将一个对象放入bundle并调用<strong><a href=\"https://developer.android.com/intl/zh-cn/reference/android/os/Bundle.html#writeToParcel(android.os.Parcel, int\">Bundle#writeToParcel(Parcel,int)</a></strong>，然后取出来。</li>\n<li>2.循环执行1000次</li>\n<li>3.取10次独立运行的内存占用平均值，其他应用使用这个cpu</li>\n<li>4.被测试对象是上面展示的SerializableDeveloper和ParcelableDeveloper</li>\n<li>5.在多个设备上测试 - android版本<ul>\n<li>LG Nexus 4 - Android 4.2.2 </li>\n<li>Samsung Nexus 10 - Android 4.2.2</li>\n<li>HTC Desire Z - Android 2.3.3</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"http://www.developerphil.com/assets/parcelable-vs-serializable-e1366334109758.png\" alt=\"result\"><br><strong>Nexus 10</strong></p>\n<p>Serializable: 1.0004ms,  Parcelable: 0.0850ms - 10.16x improvement.</p>\n<p><strong>Nexus 4</strong></p>\n<p>Serializable: 1.8539ms - Parcelable: 0.1824ms - 11.80x improvement.</p>\n<p><strong>Desire Z</strong></p>\n<p>Serializable: 5.1224ms - Parcelable: 0.2938ms - 17.36x improvement.</p>\n<p>想必你已经知道了，Parcelable比Serializable快了10倍。</p>\n<h4 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h4><p>如果你想要成为一个好公民，那就花费更多的时间来实现<strong><a href=\"http://developer.android.com/intl/zh-cn/reference/android/os/Parcelable.html\">Parcelable</a></strong>，因为这将快10倍的速度，而且占用更少的资源。</p>\n<p>然而，在大部分情况下，<strong><a href=\"https://developer.android.com/intl/zh-cn/reference/java/io/Serializable.html\">Serializable</a></strong>的慢并不是很明显，你可以随意使用它，但是记住，序列化是一个昂贵的操作，它将保持在一个低速状态。</p>\n<p>如果你正在传递上千的序列化对象队列，整个过程很有可能超过了一秒钟，它可以使转换或旋转从纵向到横向感到十分缓慢。</p>"},{"title":"Java重载匹配优先级","date":"2015-11-23T08:31:05.000Z","_content":"#### 前情提要\nJava面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；\n\n#### 示例代码\n无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：\n``` java\npublic class OverloadPriority {\n\n\tpublic static void print(Object arg) {\n\t\tSystem.out.println(\"parameter type = Object\");\n\t}\n\n\tpublic static void print(int arg) {\n\t\tSystem.out.println(\"parameter type = int\");\n\t}\n\n\tpublic static void print(long arg) {\n\t\tSystem.out.println(\"parameter type = long\");\n\t}\n\t\n\tpublic static void print(double arg) {\n\t\tSystem.out.println(\"parameter type = double\");\n\t}\n\t\n\tpublic static void print(float arg) {\n\t\tSystem.out.println(\"parameter type = float\");\n\t}\n\n\tpublic static void print(char arg) {\n\t\tSystem.out.println(\"parameter type = char\");\n\t}\n\n\tpublic static void print(Character arg) {\n\t\tSystem.out.println(\"parameter type = Character\");\n\t}\n\n\tpublic static void print(char... arg) {\n\t\tSystem.out.println(\"parameter type = char...\");\n\t}\n\n\tpublic static void print(Serializable arg) {\n\t\tSystem.out.println(\"parameter type = Serializable\");\n\t}\n\n\tpublic static void print(Comparable<?> arg) {\n\t\tSystem.out.println(\"parameter type = Comparable\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// int\n\t\tprint('g');\n\t}\n\t\n}\n```\n<!-- more -->\n\n可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。\n\nmain方法执行print('g')，输出结果毫无疑问就是：\n```\nparameter type = char\n```\n那么注释掉print(char arg)这个方法，会输出什么结果呢？\n```\nparameter type = int\n```\n那么注释掉print(int arg)这个方法，会输出什么结果呢？\n```\nparameter type = long\n```\n\n这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道'g'除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -> int -> long -> double -> float -> Character -> Serializable or Comparable -> Object -> char...(变长参数，即char元素数组)\n\n#### 总结\n遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型\n#### 注意\n- 变长参数的重载优先级最低\n- char到byte或short之间的转换是不安全的\n- 在Serializable和Comparable同时存在的情况下会报异常：\n\tThe method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，\n\t因为Character实现了Serializable和Comparable这两个接口，\n\t而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，\n\t提示类型模糊，无法正常编译）\n- 接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配\n\n所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下","source":"_posts/Java重载匹配优先级.md","raw":"title: Java重载匹配优先级\ndate: 2015-11-23 16:31:05\ncategories: [Java]\ntags: [重载, java] \n---\n#### 前情提要\nJava面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；\n\n#### 示例代码\n无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：\n``` java\npublic class OverloadPriority {\n\n\tpublic static void print(Object arg) {\n\t\tSystem.out.println(\"parameter type = Object\");\n\t}\n\n\tpublic static void print(int arg) {\n\t\tSystem.out.println(\"parameter type = int\");\n\t}\n\n\tpublic static void print(long arg) {\n\t\tSystem.out.println(\"parameter type = long\");\n\t}\n\t\n\tpublic static void print(double arg) {\n\t\tSystem.out.println(\"parameter type = double\");\n\t}\n\t\n\tpublic static void print(float arg) {\n\t\tSystem.out.println(\"parameter type = float\");\n\t}\n\n\tpublic static void print(char arg) {\n\t\tSystem.out.println(\"parameter type = char\");\n\t}\n\n\tpublic static void print(Character arg) {\n\t\tSystem.out.println(\"parameter type = Character\");\n\t}\n\n\tpublic static void print(char... arg) {\n\t\tSystem.out.println(\"parameter type = char...\");\n\t}\n\n\tpublic static void print(Serializable arg) {\n\t\tSystem.out.println(\"parameter type = Serializable\");\n\t}\n\n\tpublic static void print(Comparable<?> arg) {\n\t\tSystem.out.println(\"parameter type = Comparable\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// int\n\t\tprint('g');\n\t}\n\t\n}\n```\n<!-- more -->\n\n可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。\n\nmain方法执行print('g')，输出结果毫无疑问就是：\n```\nparameter type = char\n```\n那么注释掉print(char arg)这个方法，会输出什么结果呢？\n```\nparameter type = int\n```\n那么注释掉print(int arg)这个方法，会输出什么结果呢？\n```\nparameter type = long\n```\n\n这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道'g'除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -> int -> long -> double -> float -> Character -> Serializable or Comparable -> Object -> char...(变长参数，即char元素数组)\n\n#### 总结\n遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型\n#### 注意\n- 变长参数的重载优先级最低\n- char到byte或short之间的转换是不安全的\n- 在Serializable和Comparable同时存在的情况下会报异常：\n\tThe method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，\n\t因为Character实现了Serializable和Comparable这两个接口，\n\t而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，\n\t提示类型模糊，无法正常编译）\n- 接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配\n\n所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下","slug":"Java重载匹配优先级","published":1,"updated":"2016-10-10T06:53:44.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbb00231giyno6yn8xt","content":"<h4 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h4><p>Java面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><p>无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverloadPriority</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Object arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Object\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = int\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">long</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = long\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">double</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = double\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">float</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = float\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">char</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = char\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Character arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Character\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">char</span>... arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = char...\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Serializable arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Serializable\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Comparable&lt;?&gt; arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Comparable\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// int</span></div><div class=\"line\">\t\tprint(<span class=\"string\">'g'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。</p>\n<p>main方法执行print(‘g’)，输出结果毫无疑问就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parameter type = char</div></pre></td></tr></table></figure></p>\n<p>那么注释掉print(char arg)这个方法，会输出什么结果呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parameter type = int</div></pre></td></tr></table></figure></p>\n<p>那么注释掉print(int arg)这个方法，会输出什么结果呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parameter type = long</div></pre></td></tr></table></figure></p>\n<p>这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道’g’除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -&gt; int -&gt; long -&gt; double -&gt; float -&gt; Character -&gt; Serializable or Comparable -&gt; Object -&gt; char…(变长参数，即char元素数组)</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>变长参数的重载优先级最低</li>\n<li>char到byte或short之间的转换是不安全的</li>\n<li>在Serializable和Comparable同时存在的情况下会报异常：<br>  The method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，<br>  因为Character实现了Serializable和Comparable这两个接口，<br>  而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，<br>  提示类型模糊，无法正常编译）</li>\n<li>接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配</li>\n</ul>\n<p>所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下</p>\n","excerpt":"<h4 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h4><p>Java面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；</p>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><p>无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverloadPriority</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Object arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Object\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = int\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">long</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = long\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">double</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = double\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">float</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = float\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">char</span> arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = char\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Character arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Character\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">char</span>... arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = char...\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Serializable arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Serializable\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Comparable&lt;?&gt; arg)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"parameter type = Comparable\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// int</span></div><div class=\"line\">\t\tprint(<span class=\"string\">'g'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。</p>\n<p>main方法执行print(‘g’)，输出结果毫无疑问就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parameter type = char</div></pre></td></tr></table></figure></p>\n<p>那么注释掉print(char arg)这个方法，会输出什么结果呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parameter type = int</div></pre></td></tr></table></figure></p>\n<p>那么注释掉print(int arg)这个方法，会输出什么结果呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parameter type = long</div></pre></td></tr></table></figure></p>\n<p>这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道’g’除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -&gt; int -&gt; long -&gt; double -&gt; float -&gt; Character -&gt; Serializable or Comparable -&gt; Object -&gt; char…(变长参数，即char元素数组)</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型</p>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>变长参数的重载优先级最低</li>\n<li>char到byte或short之间的转换是不安全的</li>\n<li>在Serializable和Comparable同时存在的情况下会报异常：<br>  The method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，<br>  因为Character实现了Serializable和Comparable这两个接口，<br>  而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，<br>  提示类型模糊，无法正常编译）</li>\n<li>接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配</li>\n</ul>\n<p>所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下</p>"},{"title":"[Win10]快捷键之Win组合键","date":"2015-11-25T01:27:42.000Z","_content":"#### Win组合键\n|  Shortcut           |    Description |\n| :-------------                  | :--------------             |\n| Windows Key ![WindowsKey][1] | Open and close the Start menu.  |\n| ![WindowsKey][1]+1,![WindowsKey][1]+2,etc.|   Switch to the desktop and launch the nth application in the taskbar. For example, ![WindowsKey][1] +1 launches whichever application is first in the list, numbered from left to right.   |\n| ![WindowsKey][1]+A              |    Open the action center. |\n| ![WindowsKey][1]+B      |    Highlight the notification area. |\n| ![WindowsKey][1]+C      |    Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.  |\n| ![WindowsKey][1]+D      |    Switch between **Show Desktop** (hides/shows any applications and other windows) and the previous state. |\n| ![WindowsKey][1]+E      |    Switch to the desktop and launch File Explorer with the **Quick Access** tab displayed.  |\n| ![WindowsKey][1]+H      |    Open the action center. |\n| ![WindowsKey][1]+I      |    Open the action center. |\n| ![WindowsKey][1]+K      |    Open the **Connect** pane to connect to wireless displays and audio devices. |\n| ![WindowsKey][1]+L      |    Lock the device and go to the **Lock** screen. |\n| ![WindowsKey][1]+M      |    Switch to the desktop and minimize all open windows. |\n| ![WindowsKey][1]+O      |    Lock device orientation. |\n| ![WindowsKey][1]+P      |    Open the **Project** pane to search and connect to external displays and projectors.  |\n| ![WindowsKey][1]+R      |    Display the **Run** dialog box. |\n| ![WindowsKey][1]+S      |    Launch Cortana.[注2]  Users can begin to type a query immediately.  |\n| ![WindowsKey][1]+T      |    Cycle through the apps on the taskbar. |\n| ![WindowsKey][1]+U      |    Launch the Ease of Access Center. |\n| ![WindowsKey][1]+A      |    Cycle through notifications. |\n| ![WindowsKey][1]+V      |    Open the action center. |\n| ![WindowsKey][1]+X      |    Open the advanced menu in the lower-left corner of the screen. |\n| ![WindowsKey][1]+Z      |    Open the app-specific command bar. |\n| ![WindowsKey][1]+Enter      |    Launch Narrator. |\n| ![WindowsKey][1] + Space      |    Switch input language and keyboard layout. |\n| ![WindowsKey][1]+Tab      |    Open Task view. |\n| ![WindowsKey][1]+,      |    Peek at the desktop. |\n| ![WindowsKey][1]+Plus Sign      |    Zoom in. |\n| ![WindowsKey][1]+Minus Sign      |    Zoom out. |\n| ![WindowsKey][1]+ESCAPE      |    Close Magnifier. |\n| ![WindowsKey][1]+LEFT ARROW      |    Dock the active window to the left half of the monitor. |\n| ![WindowsKey][1]+RIGHT ARROW      |    Dock the active window to the right half of the monitor. |\n| ![WindowsKey][1]+UP ARROW      |    Maximize the active window vertically and horizontally. |\n| ![WindowsKey][1]+DOWN ARROW      |    Restore or minimize the active window. |\n| ![WindowsKey][1]+SHIFT UP ARROW      |    Maximize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT DOWN ARROW      |    Restore or minimize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT LEFT ARROW      |    With multiple monitors, move the active window to the monitor on the left. |\n| ![WindowsKey][1]+SHIFT RIGHT ARROW      |    With multiple monitors, move the active window to the monitor on the right. |\n| ![WindowsKey][1]+HOME      |    Minimize all nonactive windows; restore on second keystroke. |\n| ![WindowsKey][1]+PRNT SCRN      |    Take a picture of the screen and place it in the **Computer>Pictures>Screenshots** folder. |\n| ![WindowsKey][1]+CTRL+LEFT/RIGHT ARROW      |    Switch to the next or previous virtual desktop. |\n| ![WindowsKey][1]+CTRL+D      |    Create a new virtual desktop. |\n| ![WindowsKey][1]+CTRL_F4      |    Close the current virtual desktop. |\n| ![WindowsKey][1]+?      |    Launch the Windows Feedback App. |\n\n[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.\n\n[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.\n\n[1]: http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png","source":"_posts/Win10-快捷键之Win组合键.md","raw":"title: '[Win10]快捷键之Win组合键'\ndate: 2015-11-25 09:27:42\ncategories: [Win10]\ntags: [Win10, 快捷键]\n---\n#### Win组合键\n|  Shortcut           |    Description |\n| :-------------                  | :--------------             |\n| Windows Key ![WindowsKey][1] | Open and close the Start menu.  |\n| ![WindowsKey][1]+1,![WindowsKey][1]+2,etc.|   Switch to the desktop and launch the nth application in the taskbar. For example, ![WindowsKey][1] +1 launches whichever application is first in the list, numbered from left to right.   |\n| ![WindowsKey][1]+A              |    Open the action center. |\n| ![WindowsKey][1]+B      |    Highlight the notification area. |\n| ![WindowsKey][1]+C      |    Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.  |\n| ![WindowsKey][1]+D      |    Switch between **Show Desktop** (hides/shows any applications and other windows) and the previous state. |\n| ![WindowsKey][1]+E      |    Switch to the desktop and launch File Explorer with the **Quick Access** tab displayed.  |\n| ![WindowsKey][1]+H      |    Open the action center. |\n| ![WindowsKey][1]+I      |    Open the action center. |\n| ![WindowsKey][1]+K      |    Open the **Connect** pane to connect to wireless displays and audio devices. |\n| ![WindowsKey][1]+L      |    Lock the device and go to the **Lock** screen. |\n| ![WindowsKey][1]+M      |    Switch to the desktop and minimize all open windows. |\n| ![WindowsKey][1]+O      |    Lock device orientation. |\n| ![WindowsKey][1]+P      |    Open the **Project** pane to search and connect to external displays and projectors.  |\n| ![WindowsKey][1]+R      |    Display the **Run** dialog box. |\n| ![WindowsKey][1]+S      |    Launch Cortana.[注2]  Users can begin to type a query immediately.  |\n| ![WindowsKey][1]+T      |    Cycle through the apps on the taskbar. |\n| ![WindowsKey][1]+U      |    Launch the Ease of Access Center. |\n| ![WindowsKey][1]+A      |    Cycle through notifications. |\n| ![WindowsKey][1]+V      |    Open the action center. |\n| ![WindowsKey][1]+X      |    Open the advanced menu in the lower-left corner of the screen. |\n| ![WindowsKey][1]+Z      |    Open the app-specific command bar. |\n| ![WindowsKey][1]+Enter      |    Launch Narrator. |\n| ![WindowsKey][1] + Space      |    Switch input language and keyboard layout. |\n| ![WindowsKey][1]+Tab      |    Open Task view. |\n| ![WindowsKey][1]+,      |    Peek at the desktop. |\n| ![WindowsKey][1]+Plus Sign      |    Zoom in. |\n| ![WindowsKey][1]+Minus Sign      |    Zoom out. |\n| ![WindowsKey][1]+ESCAPE      |    Close Magnifier. |\n| ![WindowsKey][1]+LEFT ARROW      |    Dock the active window to the left half of the monitor. |\n| ![WindowsKey][1]+RIGHT ARROW      |    Dock the active window to the right half of the monitor. |\n| ![WindowsKey][1]+UP ARROW      |    Maximize the active window vertically and horizontally. |\n| ![WindowsKey][1]+DOWN ARROW      |    Restore or minimize the active window. |\n| ![WindowsKey][1]+SHIFT UP ARROW      |    Maximize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT DOWN ARROW      |    Restore or minimize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT LEFT ARROW      |    With multiple monitors, move the active window to the monitor on the left. |\n| ![WindowsKey][1]+SHIFT RIGHT ARROW      |    With multiple monitors, move the active window to the monitor on the right. |\n| ![WindowsKey][1]+HOME      |    Minimize all nonactive windows; restore on second keystroke. |\n| ![WindowsKey][1]+PRNT SCRN      |    Take a picture of the screen and place it in the **Computer>Pictures>Screenshots** folder. |\n| ![WindowsKey][1]+CTRL+LEFT/RIGHT ARROW      |    Switch to the next or previous virtual desktop. |\n| ![WindowsKey][1]+CTRL+D      |    Create a new virtual desktop. |\n| ![WindowsKey][1]+CTRL_F4      |    Close the current virtual desktop. |\n| ![WindowsKey][1]+?      |    Launch the Windows Feedback App. |\n\n[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.\n\n[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.\n\n[1]: http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png","slug":"Win10-快捷键之Win组合键","published":1,"updated":"2016-10-10T06:53:44.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbd00271giylfvjjjus","content":"<h4 id=\"Win组合键\"><a href=\"#Win组合键\" class=\"headerlink\" title=\"Win组合键\"></a>Win组合键</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Shortcut</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Windows Key <img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\"></td>\n<td style=\"text-align:left\">Open and close the Start menu.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+1,<img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+2,etc.</td>\n<td style=\"text-align:left\">Switch to the desktop and launch the nth application in the taskbar. For example, <img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\"> +1 launches whichever application is first in the list, numbered from left to right.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+A</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+B</td>\n<td style=\"text-align:left\">Highlight the notification area.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+C</td>\n<td style=\"text-align:left\">Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+D</td>\n<td style=\"text-align:left\">Switch between <strong>Show Desktop</strong> (hides/shows any applications and other windows) and the previous state.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+E</td>\n<td style=\"text-align:left\">Switch to the desktop and launch File Explorer with the <strong>Quick Access</strong> tab displayed.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+H</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+I</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+K</td>\n<td style=\"text-align:left\">Open the <strong>Connect</strong> pane to connect to wireless displays and audio devices.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+L</td>\n<td style=\"text-align:left\">Lock the device and go to the <strong>Lock</strong> screen.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+M</td>\n<td style=\"text-align:left\">Switch to the desktop and minimize all open windows.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+O</td>\n<td style=\"text-align:left\">Lock device orientation.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+P</td>\n<td style=\"text-align:left\">Open the <strong>Project</strong> pane to search and connect to external displays and projectors.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+R</td>\n<td style=\"text-align:left\">Display the <strong>Run</strong> dialog box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+S</td>\n<td style=\"text-align:left\">Launch Cortana.[注2]  Users can begin to type a query immediately.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+T</td>\n<td style=\"text-align:left\">Cycle through the apps on the taskbar.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+U</td>\n<td style=\"text-align:left\">Launch the Ease of Access Center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+A</td>\n<td style=\"text-align:left\">Cycle through notifications.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+V</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+X</td>\n<td style=\"text-align:left\">Open the advanced menu in the lower-left corner of the screen.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Z</td>\n<td style=\"text-align:left\">Open the app-specific command bar.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Enter</td>\n<td style=\"text-align:left\">Launch Narrator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\"> + Space</td>\n<td style=\"text-align:left\">Switch input language and keyboard layout.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Tab</td>\n<td style=\"text-align:left\">Open Task view.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+,</td>\n<td style=\"text-align:left\">Peek at the desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Plus Sign</td>\n<td style=\"text-align:left\">Zoom in.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Minus Sign</td>\n<td style=\"text-align:left\">Zoom out.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+ESCAPE</td>\n<td style=\"text-align:left\">Close Magnifier.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+LEFT ARROW</td>\n<td style=\"text-align:left\">Dock the active window to the left half of the monitor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+RIGHT ARROW</td>\n<td style=\"text-align:left\">Dock the active window to the right half of the monitor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+UP ARROW</td>\n<td style=\"text-align:left\">Maximize the active window vertically and horizontally.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+DOWN ARROW</td>\n<td style=\"text-align:left\">Restore or minimize the active window.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT UP ARROW</td>\n<td style=\"text-align:left\">Maximize the active window vertically, maintaining the current width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT DOWN ARROW</td>\n<td style=\"text-align:left\">Restore or minimize the active window vertically, maintaining the current width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT LEFT ARROW</td>\n<td style=\"text-align:left\">With multiple monitors, move the active window to the monitor on the left.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT RIGHT ARROW</td>\n<td style=\"text-align:left\">With multiple monitors, move the active window to the monitor on the right.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+HOME</td>\n<td style=\"text-align:left\">Minimize all nonactive windows; restore on second keystroke.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+PRNT SCRN</td>\n<td style=\"text-align:left\">Take a picture of the screen and place it in the <strong>Computer&gt;Pictures&gt;Screenshots</strong> folder.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+CTRL+LEFT/RIGHT ARROW</td>\n<td style=\"text-align:left\">Switch to the next or previous virtual desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+CTRL+D</td>\n<td style=\"text-align:left\">Create a new virtual desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+CTRL_F4</td>\n<td style=\"text-align:left\">Close the current virtual desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+?</td>\n<td style=\"text-align:left\">Launch the Windows Feedback App.</td>\n</tr>\n</tbody>\n</table>\n<p>[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.</p>\n<p>[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.</p>\n","excerpt":"","more":"<h4 id=\"Win组合键\"><a href=\"#Win组合键\" class=\"headerlink\" title=\"Win组合键\"></a>Win组合键</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Shortcut</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Windows Key <img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\"></td>\n<td style=\"text-align:left\">Open and close the Start menu.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+1,<img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+2,etc.</td>\n<td style=\"text-align:left\">Switch to the desktop and launch the nth application in the taskbar. For example, <img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\"> +1 launches whichever application is first in the list, numbered from left to right.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+A</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+B</td>\n<td style=\"text-align:left\">Highlight the notification area.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+C</td>\n<td style=\"text-align:left\">Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+D</td>\n<td style=\"text-align:left\">Switch between <strong>Show Desktop</strong> (hides/shows any applications and other windows) and the previous state.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+E</td>\n<td style=\"text-align:left\">Switch to the desktop and launch File Explorer with the <strong>Quick Access</strong> tab displayed.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+H</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+I</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+K</td>\n<td style=\"text-align:left\">Open the <strong>Connect</strong> pane to connect to wireless displays and audio devices.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+L</td>\n<td style=\"text-align:left\">Lock the device and go to the <strong>Lock</strong> screen.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+M</td>\n<td style=\"text-align:left\">Switch to the desktop and minimize all open windows.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+O</td>\n<td style=\"text-align:left\">Lock device orientation.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+P</td>\n<td style=\"text-align:left\">Open the <strong>Project</strong> pane to search and connect to external displays and projectors.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+R</td>\n<td style=\"text-align:left\">Display the <strong>Run</strong> dialog box.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+S</td>\n<td style=\"text-align:left\">Launch Cortana.[注2]  Users can begin to type a query immediately.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+T</td>\n<td style=\"text-align:left\">Cycle through the apps on the taskbar.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+U</td>\n<td style=\"text-align:left\">Launch the Ease of Access Center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+A</td>\n<td style=\"text-align:left\">Cycle through notifications.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+V</td>\n<td style=\"text-align:left\">Open the action center.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+X</td>\n<td style=\"text-align:left\">Open the advanced menu in the lower-left corner of the screen.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Z</td>\n<td style=\"text-align:left\">Open the app-specific command bar.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Enter</td>\n<td style=\"text-align:left\">Launch Narrator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\"> + Space</td>\n<td style=\"text-align:left\">Switch input language and keyboard layout.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Tab</td>\n<td style=\"text-align:left\">Open Task view.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+,</td>\n<td style=\"text-align:left\">Peek at the desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Plus Sign</td>\n<td style=\"text-align:left\">Zoom in.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+Minus Sign</td>\n<td style=\"text-align:left\">Zoom out.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+ESCAPE</td>\n<td style=\"text-align:left\">Close Magnifier.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+LEFT ARROW</td>\n<td style=\"text-align:left\">Dock the active window to the left half of the monitor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+RIGHT ARROW</td>\n<td style=\"text-align:left\">Dock the active window to the right half of the monitor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+UP ARROW</td>\n<td style=\"text-align:left\">Maximize the active window vertically and horizontally.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+DOWN ARROW</td>\n<td style=\"text-align:left\">Restore or minimize the active window.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT UP ARROW</td>\n<td style=\"text-align:left\">Maximize the active window vertically, maintaining the current width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT DOWN ARROW</td>\n<td style=\"text-align:left\">Restore or minimize the active window vertically, maintaining the current width.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT LEFT ARROW</td>\n<td style=\"text-align:left\">With multiple monitors, move the active window to the monitor on the left.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+SHIFT RIGHT ARROW</td>\n<td style=\"text-align:left\">With multiple monitors, move the active window to the monitor on the right.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+HOME</td>\n<td style=\"text-align:left\">Minimize all nonactive windows; restore on second keystroke.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+PRNT SCRN</td>\n<td style=\"text-align:left\">Take a picture of the screen and place it in the <strong>Computer&gt;Pictures&gt;Screenshots</strong> folder.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+CTRL+LEFT/RIGHT ARROW</td>\n<td style=\"text-align:left\">Switch to the next or previous virtual desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+CTRL+D</td>\n<td style=\"text-align:left\">Create a new virtual desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+CTRL_F4</td>\n<td style=\"text-align:left\">Close the current virtual desktop.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png\" alt=\"WindowsKey\">+?</td>\n<td style=\"text-align:left\">Launch the Windows Feedback App.</td>\n</tr>\n</tbody>\n</table>\n<p>[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.</p>\n<p>[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.</p>\n"},{"title":"getDimension、getDimensionPixelOffset、getDimensionPixelSize初级篇","date":"2016-07-21T14:24:31.000Z","_content":"\n### 序言\n在Android应用开发的过程中，我们肯定会遇到一个问题 - **适配** ，这是一个非常头疼的问题，因为你面对的是各式各样的、千奇百怪的屏幕尺寸和分辨率，所以你不可能适配所有机型，只能适配主流的机型及分辨率，所以我们会配置不同分辨率的values（如：values-sw600dp，values-sw720dp），在values下面会有这样一个文件：dimens.xml，我们一般会在里面定义一些视图的尺寸值，可以是不同的单位，如：**dp、dip、sp、pt、px、mm、in** ，那么我们怎么读取这些值得？\n\n### 官方API\n\ngoogle给我们提供了三个api使用：**getDimension，getDimensionPixelOffset和getDimensionPixelSize**，你都使用过吗？它们有什么不同？有什么使用场景？接下来就带大家简单了解一下这三个api的不同。首先得还是先看一下官方文档，这才是最权威的不是嘛。\n\n### getDimension\n\n> 包 ： android.content.res.Resources\n- Added in API level 1 \n- float getDimension (int id)\n- Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current DisplayMetrics associated with the resources.\n<!-- more -->\n\n|    |    |\n| -- | -- |\n| **Parameters** | **description** |\n| id |\tint: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. |\n| **Returns** | **description** |\n| float | Resource dimension value multiplied by the appropriate metric. |\n| **Throws** | **description** |\n| Resources.NotFoundException | Throws NotFoundException if the given ID does not exist. |\n\n- **See also**:\n    - getDimensionPixelOffset(int)\n    - getDimensionPixelSize(int)\n\t\n### getDimensionPixelOffset\n\n- Added in API level 1\n- int getDimensionPixelOffset (int id)\n- Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer.\n\n|    |    |\n| -- | -- |\n| **Parameters** | **description** |\n| id | int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. |\n| **Returns** | **description** |\n| int |\tResource dimension value multiplied by the appropriate metric and truncated to integer pixels. |\n| **Throws** | **description** |\n| Resources.NotFoundException | Throws NotFoundException if the given ID does not exist. |\n\n- See also:\n    - getDimension(int)\n    - getDimensionPixelSize(int)\n\n### getDimensionPixelSize\n\n- Added in API level 1\n- int getDimensionPixelSize (int id)\n- Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size.\n\n|    |    |\n| -- | -- |\n| **Parameters** | **description** |\n| id | int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. |\n| **Returns** | **description** |\n| int |\tResource dimension value multiplied by the appropriate metric and truncated to integer pixels. |\n| **Throws** | **description** |\n| Resources.NotFoundException\tThrows NotFoundException if the given ID does not exist. |\n\n- See also:\n  - getDimension(int)\n  - getDimensionPixelOffset(int)\n\n\n### 解析\n\n下面通过代码来看看具体的使用：\ndimens.xml\n``` xml\n<dimen name=\"custom_margin\">16dp</dimen>\n<dimen name=\"custom_textsize\">16sp</dimen>\n<dimen name=\"test_margin\">3.5dp</dimen>\n<dimen name=\"test_textsize\">3.5sp</dimen>\n```\n\n调用:\n``` java\n// dp - 16\nfloat dp1 = getResources().getDimension(R.dimen.custom_margin);    \nint dp2 = getResources().getDimensionPixelOffset(R.dimen.custom_margin);    \nint dp3 = getResources().getDimensionPixelSize(R.dimen.custom_margin); \n\n// dp - 3.5\nfloat dp4 = getResources().getDimension(R.dimen.test_margin);    \nint dp5 = getResources().getDimensionPixelOffset(R.dimen.test_margin);    \nint dp6 = getResources().getDimensionPixelSize(R.dimen.test_margin);    \n \n// sp - 16   \nfloat sp1 = getResources().getDimension(R.dimen.custom_textsize);    \nint sp2 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    \nint sp3 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);\n\n// sp - 3.5\nfloat sp4 = getResources().getDimension(R.dimen.custom_textsize);    \nint sp5 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    \nint sp6 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);\n\nString log = \"getDimension(16dp) = \" + dp1 + \"\\n\"  \n            + \"getDimensionPixelOffset(16dp) = \" + dp2 + \"\\n\"  \n            + \"getDimensionPixelSize(16dp) = \" + dp3 + \"\\n\" + \"\\n\"  \n            + \"getDimension(dp3.5) = \" + dp4 + \"\\n\"  \n            + \"getDimensionPixelOffset(dp3.5) = \" + dp5 + \"\\n\"  \n            + \"getDimensionPixelSize(dp3.5) = \" + dp6 + \"\\n\" + \"\\n\" \n            + \"getDimension(sp16) = \" + sp1 + \"\\n\"  \n            + \"getDimensionPixelOffset(sp16) = \" + sp2 + \"\\n\"  \n            + \"getDimensionPixelSize(sp16) = \" + sp3 + \"\\n\" + \"\\n\" \n            + \"getDimension(sp3.5) = \" + sp4 + \"\\n\"  \n            + \"getDimensionPixelOffset(sp3.5) = \" + sp5 + \"\\n\"  \n            + \"getDimensionPixelSize(sp3.5) = \" + sp6;\n            \nLog.d(\"LauncherActivity\", log);\n```\n输出：\n> densityDpi：160\n  scale：1.0\n  fontScale：1.0\n\n``` java\ngetDimension(16dp) = 16.0\ngetDimensionPixelOffset(16dp) = 16\ngetDimensionPixelSize(16dp) = 16\n\ngetDimension(3.5dp) = 3.5\ngetDimensionPixelOffset(3.5dp) = 3 \ngetDimensionPixelSize(3.5dp) = 4  \n\ngetDimension(16sp) = 16.0\ngetDimensionPixelOffset(16sp) = 16\ngetDimensionPixelSize(16sp) = 16\n\ngetDimension(3.5sp) = 3.5\ngetDimensionPixelOffset(3.5sp) = 3\ngetDimensionPixelSize(3.5sp) = 4\n```\n\n---\n\n\n> densityDpi：240\n  scale：1.5\n  fontScale：1.5\n\n``` java\ngetDimension(16dp) = 24.0\ngetDimensionPixelOffset(16dp) = 24\ngetDimensionPixelSize(16dp) = 24\n\ngetDimension(3.5dp) = 5.25\ngetDimensionPixelOffset(3.5dp) = 5 \ngetDimensionPixelSize(3.5dp) = 5  \n\ngetDimension(16sp) = 24.0\ngetDimensionPixelOffset(16sp) = 24\ngetDimensionPixelSize(16sp) = 24\n\ngetDimension(3.5sp) = 5.25\ngetDimensionPixelOffset(3.5sp) = 5\ngetDimensionPixelSize(3.5sp) = 5\n```\n\n### 总结\n通过上面的代码就可以说明问题了，我们可以看到以下几点：\n- 三个方法都是将源数据乘以scale\n- getDimension的返回值是float类型，getDimensionPixelOffset和getDimensionPixelSize的返回值是int类型\n- 三个方法返回的都是px值，即将dp或者sp等值转换为px值\n- getDimensionPixelOffset()是直接将小数位舍弃，而getDimensionPixelSize()则会进行四舍五入\n- 像setWidth(int)、setHeight(int)这种都是px，根据自己的情况选择getDimensionPixelSize()或getDimensionPixelOffset()\n- 像setTextSize()：一个参数的是sp；两个参数的是unit和px\n","source":"_posts/getDimension、getDimensionPixelOffset、getDimensionPixelSize初级篇.md","raw":"title: getDimension、getDimensionPixelOffset、getDimensionPixelSize初级篇\ndate: 2016-07-21 22:24:31\ncategories: [Android]\ntags: [getDimension, getDimensionPixelOffset, getDimensionPixelSize]\n---\n\n### 序言\n在Android应用开发的过程中，我们肯定会遇到一个问题 - **适配** ，这是一个非常头疼的问题，因为你面对的是各式各样的、千奇百怪的屏幕尺寸和分辨率，所以你不可能适配所有机型，只能适配主流的机型及分辨率，所以我们会配置不同分辨率的values（如：values-sw600dp，values-sw720dp），在values下面会有这样一个文件：dimens.xml，我们一般会在里面定义一些视图的尺寸值，可以是不同的单位，如：**dp、dip、sp、pt、px、mm、in** ，那么我们怎么读取这些值得？\n\n### 官方API\n\ngoogle给我们提供了三个api使用：**getDimension，getDimensionPixelOffset和getDimensionPixelSize**，你都使用过吗？它们有什么不同？有什么使用场景？接下来就带大家简单了解一下这三个api的不同。首先得还是先看一下官方文档，这才是最权威的不是嘛。\n\n### getDimension\n\n> 包 ： android.content.res.Resources\n- Added in API level 1 \n- float getDimension (int id)\n- Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current DisplayMetrics associated with the resources.\n<!-- more -->\n\n|    |    |\n| -- | -- |\n| **Parameters** | **description** |\n| id |\tint: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. |\n| **Returns** | **description** |\n| float | Resource dimension value multiplied by the appropriate metric. |\n| **Throws** | **description** |\n| Resources.NotFoundException | Throws NotFoundException if the given ID does not exist. |\n\n- **See also**:\n    - getDimensionPixelOffset(int)\n    - getDimensionPixelSize(int)\n\t\n### getDimensionPixelOffset\n\n- Added in API level 1\n- int getDimensionPixelOffset (int id)\n- Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer.\n\n|    |    |\n| -- | -- |\n| **Parameters** | **description** |\n| id | int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. |\n| **Returns** | **description** |\n| int |\tResource dimension value multiplied by the appropriate metric and truncated to integer pixels. |\n| **Throws** | **description** |\n| Resources.NotFoundException | Throws NotFoundException if the given ID does not exist. |\n\n- See also:\n    - getDimension(int)\n    - getDimensionPixelSize(int)\n\n### getDimensionPixelSize\n\n- Added in API level 1\n- int getDimensionPixelSize (int id)\n- Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size.\n\n|    |    |\n| -- | -- |\n| **Parameters** | **description** |\n| id | int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. |\n| **Returns** | **description** |\n| int |\tResource dimension value multiplied by the appropriate metric and truncated to integer pixels. |\n| **Throws** | **description** |\n| Resources.NotFoundException\tThrows NotFoundException if the given ID does not exist. |\n\n- See also:\n  - getDimension(int)\n  - getDimensionPixelOffset(int)\n\n\n### 解析\n\n下面通过代码来看看具体的使用：\ndimens.xml\n``` xml\n<dimen name=\"custom_margin\">16dp</dimen>\n<dimen name=\"custom_textsize\">16sp</dimen>\n<dimen name=\"test_margin\">3.5dp</dimen>\n<dimen name=\"test_textsize\">3.5sp</dimen>\n```\n\n调用:\n``` java\n// dp - 16\nfloat dp1 = getResources().getDimension(R.dimen.custom_margin);    \nint dp2 = getResources().getDimensionPixelOffset(R.dimen.custom_margin);    \nint dp3 = getResources().getDimensionPixelSize(R.dimen.custom_margin); \n\n// dp - 3.5\nfloat dp4 = getResources().getDimension(R.dimen.test_margin);    \nint dp5 = getResources().getDimensionPixelOffset(R.dimen.test_margin);    \nint dp6 = getResources().getDimensionPixelSize(R.dimen.test_margin);    \n \n// sp - 16   \nfloat sp1 = getResources().getDimension(R.dimen.custom_textsize);    \nint sp2 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    \nint sp3 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);\n\n// sp - 3.5\nfloat sp4 = getResources().getDimension(R.dimen.custom_textsize);    \nint sp5 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    \nint sp6 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);\n\nString log = \"getDimension(16dp) = \" + dp1 + \"\\n\"  \n            + \"getDimensionPixelOffset(16dp) = \" + dp2 + \"\\n\"  \n            + \"getDimensionPixelSize(16dp) = \" + dp3 + \"\\n\" + \"\\n\"  \n            + \"getDimension(dp3.5) = \" + dp4 + \"\\n\"  \n            + \"getDimensionPixelOffset(dp3.5) = \" + dp5 + \"\\n\"  \n            + \"getDimensionPixelSize(dp3.5) = \" + dp6 + \"\\n\" + \"\\n\" \n            + \"getDimension(sp16) = \" + sp1 + \"\\n\"  \n            + \"getDimensionPixelOffset(sp16) = \" + sp2 + \"\\n\"  \n            + \"getDimensionPixelSize(sp16) = \" + sp3 + \"\\n\" + \"\\n\" \n            + \"getDimension(sp3.5) = \" + sp4 + \"\\n\"  \n            + \"getDimensionPixelOffset(sp3.5) = \" + sp5 + \"\\n\"  \n            + \"getDimensionPixelSize(sp3.5) = \" + sp6;\n            \nLog.d(\"LauncherActivity\", log);\n```\n输出：\n> densityDpi：160\n  scale：1.0\n  fontScale：1.0\n\n``` java\ngetDimension(16dp) = 16.0\ngetDimensionPixelOffset(16dp) = 16\ngetDimensionPixelSize(16dp) = 16\n\ngetDimension(3.5dp) = 3.5\ngetDimensionPixelOffset(3.5dp) = 3 \ngetDimensionPixelSize(3.5dp) = 4  \n\ngetDimension(16sp) = 16.0\ngetDimensionPixelOffset(16sp) = 16\ngetDimensionPixelSize(16sp) = 16\n\ngetDimension(3.5sp) = 3.5\ngetDimensionPixelOffset(3.5sp) = 3\ngetDimensionPixelSize(3.5sp) = 4\n```\n\n---\n\n\n> densityDpi：240\n  scale：1.5\n  fontScale：1.5\n\n``` java\ngetDimension(16dp) = 24.0\ngetDimensionPixelOffset(16dp) = 24\ngetDimensionPixelSize(16dp) = 24\n\ngetDimension(3.5dp) = 5.25\ngetDimensionPixelOffset(3.5dp) = 5 \ngetDimensionPixelSize(3.5dp) = 5  \n\ngetDimension(16sp) = 24.0\ngetDimensionPixelOffset(16sp) = 24\ngetDimensionPixelSize(16sp) = 24\n\ngetDimension(3.5sp) = 5.25\ngetDimensionPixelOffset(3.5sp) = 5\ngetDimensionPixelSize(3.5sp) = 5\n```\n\n### 总结\n通过上面的代码就可以说明问题了，我们可以看到以下几点：\n- 三个方法都是将源数据乘以scale\n- getDimension的返回值是float类型，getDimensionPixelOffset和getDimensionPixelSize的返回值是int类型\n- 三个方法返回的都是px值，即将dp或者sp等值转换为px值\n- getDimensionPixelOffset()是直接将小数位舍弃，而getDimensionPixelSize()则会进行四舍五入\n- 像setWidth(int)、setHeight(int)这种都是px，根据自己的情况选择getDimensionPixelSize()或getDimensionPixelOffset()\n- 像setTextSize()：一个参数的是sp；两个参数的是unit和px\n","slug":"getDimension、getDimensionPixelOffset、getDimensionPixelSize初级篇","published":1,"updated":"2016-10-10T06:53:44.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbe002a1giyk0hvk5fa","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>在Android应用开发的过程中，我们肯定会遇到一个问题 - <strong>适配</strong> ，这是一个非常头疼的问题，因为你面对的是各式各样的、千奇百怪的屏幕尺寸和分辨率，所以你不可能适配所有机型，只能适配主流的机型及分辨率，所以我们会配置不同分辨率的values（如：values-sw600dp，values-sw720dp），在values下面会有这样一个文件：dimens.xml，我们一般会在里面定义一些视图的尺寸值，可以是不同的单位，如：<strong>dp、dip、sp、pt、px、mm、in</strong> ，那么我们怎么读取这些值得？</p>\n<h3 id=\"官方API\"><a href=\"#官方API\" class=\"headerlink\" title=\"官方API\"></a>官方API</h3><p>google给我们提供了三个api使用：<strong>getDimension，getDimensionPixelOffset和getDimensionPixelSize</strong>，你都使用过吗？它们有什么不同？有什么使用场景？接下来就带大家简单了解一下这三个api的不同。首先得还是先看一下官方文档，这才是最权威的不是嘛。</p>\n<h3 id=\"getDimension\"><a href=\"#getDimension\" class=\"headerlink\" title=\"getDimension\"></a>getDimension</h3><blockquote>\n<p>包 ： android.content.res.Resources</p>\n<ul>\n<li>Added in API level 1 </li>\n<li>float getDimension (int id)</li>\n<li>Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current DisplayMetrics associated with the resources.<a id=\"more\"></a>\n</li>\n</ul>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Parameters</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>id</td>\n<td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td>\n</tr>\n<tr>\n<td><strong>Returns</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>float</td>\n<td>Resource dimension value multiplied by the appropriate metric.</td>\n</tr>\n<tr>\n<td><strong>Throws</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>Resources.NotFoundException</td>\n<td>Throws NotFoundException if the given ID does not exist.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>See also</strong>:<ul>\n<li>getDimensionPixelOffset(int)</li>\n<li>getDimensionPixelSize(int)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"getDimensionPixelOffset\"><a href=\"#getDimensionPixelOffset\" class=\"headerlink\" title=\"getDimensionPixelOffset\"></a>getDimensionPixelOffset</h3><ul>\n<li>Added in API level 1</li>\n<li>int getDimensionPixelOffset (int id)</li>\n<li>Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Parameters</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>id</td>\n<td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td>\n</tr>\n<tr>\n<td><strong>Returns</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>int</td>\n<td>Resource dimension value multiplied by the appropriate metric and truncated to integer pixels.</td>\n</tr>\n<tr>\n<td><strong>Throws</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>Resources.NotFoundException</td>\n<td>Throws NotFoundException if the given ID does not exist.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>See also:<ul>\n<li>getDimension(int)</li>\n<li>getDimensionPixelSize(int)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"getDimensionPixelSize\"><a href=\"#getDimensionPixelSize\" class=\"headerlink\" title=\"getDimensionPixelSize\"></a>getDimensionPixelSize</h3><ul>\n<li>Added in API level 1</li>\n<li>int getDimensionPixelSize (int id)</li>\n<li>Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Parameters</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>id</td>\n<td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td>\n</tr>\n<tr>\n<td><strong>Returns</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>int</td>\n<td>Resource dimension value multiplied by the appropriate metric and truncated to integer pixels.</td>\n</tr>\n<tr>\n<td><strong>Throws</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>Resources.NotFoundException    Throws NotFoundException if the given ID does not exist.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>See also:<ul>\n<li>getDimension(int)</li>\n<li>getDimensionPixelOffset(int)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>下面通过代码来看看具体的使用：<br>dimens.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_textsize\"</span>&gt;</span>16sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test_margin\"</span>&gt;</span>3.5dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test_textsize\"</span>&gt;</span>3.5sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>调用:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// dp - 16</span></div><div class=\"line\"><span class=\"keyword\">float</span> dp1 = getResources().getDimension(R.dimen.custom_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp2 = getResources().getDimensionPixelOffset(R.dimen.custom_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp3 = getResources().getDimensionPixelSize(R.dimen.custom_margin); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// dp - 3.5</span></div><div class=\"line\"><span class=\"keyword\">float</span> dp4 = getResources().getDimension(R.dimen.test_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp5 = getResources().getDimensionPixelOffset(R.dimen.test_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp6 = getResources().getDimensionPixelSize(R.dimen.test_margin);    </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// sp - 16   </span></div><div class=\"line\"><span class=\"keyword\">float</span> sp1 = getResources().getDimension(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp2 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp3 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// sp - 3.5</span></div><div class=\"line\"><span class=\"keyword\">float</span> sp4 = getResources().getDimension(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp5 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp6 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);</div><div class=\"line\"></div><div class=\"line\">String log = <span class=\"string\">\"getDimension(16dp) = \"</span> + dp1 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(16dp) = \"</span> + dp2 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(16dp) = \"</span> + dp3 + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimension(dp3.5) = \"</span> + dp4 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(dp3.5) = \"</span> + dp5 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(dp3.5) = \"</span> + dp6 + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"\\n\"</span> </div><div class=\"line\">            + <span class=\"string\">\"getDimension(sp16) = \"</span> + sp1 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(sp16) = \"</span> + sp2 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(sp16) = \"</span> + sp3 + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"\\n\"</span> </div><div class=\"line\">            + <span class=\"string\">\"getDimension(sp3.5) = \"</span> + sp4 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(sp3.5) = \"</span> + sp5 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(sp3.5) = \"</span> + sp6;</div><div class=\"line\">            </div><div class=\"line\">Log.d(<span class=\"string\">\"LauncherActivity\"</span>, log);</div></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<blockquote>\n<p>densityDpi：160<br>  scale：1.0<br>  fontScale：1.0</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDimension(<span class=\"number\">16</span>dp) = <span class=\"number\">16.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>dp) = <span class=\"number\">16</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>dp) = <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>dp) = <span class=\"number\">3.5</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>dp) = <span class=\"number\">3</span> </div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>dp) = <span class=\"number\">4</span>  </div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">16</span>sp) = <span class=\"number\">16.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>sp) = <span class=\"number\">16</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>sp) = <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>sp) = <span class=\"number\">3.5</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>sp) = <span class=\"number\">3</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>sp) = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>densityDpi：240<br>  scale：1.5<br>  fontScale：1.5</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDimension(<span class=\"number\">16</span>dp) = <span class=\"number\">24.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>dp) = <span class=\"number\">24</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>dp) = <span class=\"number\">24</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>dp) = <span class=\"number\">5.25</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>dp) = <span class=\"number\">5</span> </div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>dp) = <span class=\"number\">5</span>  </div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">16</span>sp) = <span class=\"number\">24.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>sp) = <span class=\"number\">24</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>sp) = <span class=\"number\">24</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>sp) = <span class=\"number\">5.25</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>sp) = <span class=\"number\">5</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>sp) = <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上面的代码就可以说明问题了，我们可以看到以下几点：</p>\n<ul>\n<li>三个方法都是将源数据乘以scale</li>\n<li>getDimension的返回值是float类型，getDimensionPixelOffset和getDimensionPixelSize的返回值是int类型</li>\n<li>三个方法返回的都是px值，即将dp或者sp等值转换为px值</li>\n<li>getDimensionPixelOffset()是直接将小数位舍弃，而getDimensionPixelSize()则会进行四舍五入</li>\n<li>像setWidth(int)、setHeight(int)这种都是px，根据自己的情况选择getDimensionPixelSize()或getDimensionPixelOffset()</li>\n<li>像setTextSize()：一个参数的是sp；两个参数的是unit和px</li>\n</ul>\n","excerpt":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>在Android应用开发的过程中，我们肯定会遇到一个问题 - <strong>适配</strong> ，这是一个非常头疼的问题，因为你面对的是各式各样的、千奇百怪的屏幕尺寸和分辨率，所以你不可能适配所有机型，只能适配主流的机型及分辨率，所以我们会配置不同分辨率的values（如：values-sw600dp，values-sw720dp），在values下面会有这样一个文件：dimens.xml，我们一般会在里面定义一些视图的尺寸值，可以是不同的单位，如：<strong>dp、dip、sp、pt、px、mm、in</strong> ，那么我们怎么读取这些值得？</p>\n<h3 id=\"官方API\"><a href=\"#官方API\" class=\"headerlink\" title=\"官方API\"></a>官方API</h3><p>google给我们提供了三个api使用：<strong>getDimension，getDimensionPixelOffset和getDimensionPixelSize</strong>，你都使用过吗？它们有什么不同？有什么使用场景？接下来就带大家简单了解一下这三个api的不同。首先得还是先看一下官方文档，这才是最权威的不是嘛。</p>\n<h3 id=\"getDimension\"><a href=\"#getDimension\" class=\"headerlink\" title=\"getDimension\"></a>getDimension</h3><blockquote>\n<p>包 ： android.content.res.Resources</p>\n<ul>\n<li>Added in API level 1 </li>\n<li>float getDimension (int id)</li>\n<li>Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current DisplayMetrics associated with the resources.","more":"</li>\n</ul>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Parameters</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>id</td>\n<td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td>\n</tr>\n<tr>\n<td><strong>Returns</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>float</td>\n<td>Resource dimension value multiplied by the appropriate metric.</td>\n</tr>\n<tr>\n<td><strong>Throws</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>Resources.NotFoundException</td>\n<td>Throws NotFoundException if the given ID does not exist.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>See also</strong>:<ul>\n<li>getDimensionPixelOffset(int)</li>\n<li>getDimensionPixelSize(int)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"getDimensionPixelOffset\"><a href=\"#getDimensionPixelOffset\" class=\"headerlink\" title=\"getDimensionPixelOffset\"></a>getDimensionPixelOffset</h3><ul>\n<li>Added in API level 1</li>\n<li>int getDimensionPixelOffset (int id)</li>\n<li>Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Parameters</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>id</td>\n<td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td>\n</tr>\n<tr>\n<td><strong>Returns</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>int</td>\n<td>Resource dimension value multiplied by the appropriate metric and truncated to integer pixels.</td>\n</tr>\n<tr>\n<td><strong>Throws</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>Resources.NotFoundException</td>\n<td>Throws NotFoundException if the given ID does not exist.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>See also:<ul>\n<li>getDimension(int)</li>\n<li>getDimensionPixelSize(int)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"getDimensionPixelSize\"><a href=\"#getDimensionPixelSize\" class=\"headerlink\" title=\"getDimensionPixelSize\"></a>getDimensionPixelSize</h3><ul>\n<li>Added in API level 1</li>\n<li>int getDimensionPixelSize (int id)</li>\n<li>Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Parameters</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>id</td>\n<td>int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier.</td>\n</tr>\n<tr>\n<td><strong>Returns</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>int</td>\n<td>Resource dimension value multiplied by the appropriate metric and truncated to integer pixels.</td>\n</tr>\n<tr>\n<td><strong>Throws</strong></td>\n<td><strong>description</strong></td>\n</tr>\n<tr>\n<td>Resources.NotFoundException    Throws NotFoundException if the given ID does not exist.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>See also:<ul>\n<li>getDimension(int)</li>\n<li>getDimensionPixelOffset(int)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>下面通过代码来看看具体的使用：<br>dimens.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_margin\"</span>&gt;</span>16dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custom_textsize\"</span>&gt;</span>16sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test_margin\"</span>&gt;</span>3.5dp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dimen</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test_textsize\"</span>&gt;</span>3.5sp<span class=\"tag\">&lt;/<span class=\"name\">dimen</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>调用:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// dp - 16</span></div><div class=\"line\"><span class=\"keyword\">float</span> dp1 = getResources().getDimension(R.dimen.custom_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp2 = getResources().getDimensionPixelOffset(R.dimen.custom_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp3 = getResources().getDimensionPixelSize(R.dimen.custom_margin); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// dp - 3.5</span></div><div class=\"line\"><span class=\"keyword\">float</span> dp4 = getResources().getDimension(R.dimen.test_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp5 = getResources().getDimensionPixelOffset(R.dimen.test_margin);    </div><div class=\"line\"><span class=\"keyword\">int</span> dp6 = getResources().getDimensionPixelSize(R.dimen.test_margin);    </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// sp - 16   </span></div><div class=\"line\"><span class=\"keyword\">float</span> sp1 = getResources().getDimension(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp2 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp3 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// sp - 3.5</span></div><div class=\"line\"><span class=\"keyword\">float</span> sp4 = getResources().getDimension(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp5 = getResources().getDimensionPixelOffset(R.dimen.custom_textsize);    </div><div class=\"line\"><span class=\"keyword\">int</span> sp6 = getResources().getDimensionPixelSize(R.dimen.custom_textsize);</div><div class=\"line\"></div><div class=\"line\">String log = <span class=\"string\">\"getDimension(16dp) = \"</span> + dp1 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(16dp) = \"</span> + dp2 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(16dp) = \"</span> + dp3 + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimension(dp3.5) = \"</span> + dp4 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(dp3.5) = \"</span> + dp5 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(dp3.5) = \"</span> + dp6 + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"\\n\"</span> </div><div class=\"line\">            + <span class=\"string\">\"getDimension(sp16) = \"</span> + sp1 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(sp16) = \"</span> + sp2 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(sp16) = \"</span> + sp3 + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"\\n\"</span> </div><div class=\"line\">            + <span class=\"string\">\"getDimension(sp3.5) = \"</span> + sp4 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelOffset(sp3.5) = \"</span> + sp5 + <span class=\"string\">\"\\n\"</span>  </div><div class=\"line\">            + <span class=\"string\">\"getDimensionPixelSize(sp3.5) = \"</span> + sp6;</div><div class=\"line\">            </div><div class=\"line\">Log.d(<span class=\"string\">\"LauncherActivity\"</span>, log);</div></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<blockquote>\n<p>densityDpi：160<br>  scale：1.0<br>  fontScale：1.0</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDimension(<span class=\"number\">16</span>dp) = <span class=\"number\">16.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>dp) = <span class=\"number\">16</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>dp) = <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>dp) = <span class=\"number\">3.5</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>dp) = <span class=\"number\">3</span> </div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>dp) = <span class=\"number\">4</span>  </div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">16</span>sp) = <span class=\"number\">16.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>sp) = <span class=\"number\">16</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>sp) = <span class=\"number\">16</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>sp) = <span class=\"number\">3.5</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>sp) = <span class=\"number\">3</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>sp) = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p>densityDpi：240<br>  scale：1.5<br>  fontScale：1.5</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">getDimension(<span class=\"number\">16</span>dp) = <span class=\"number\">24.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>dp) = <span class=\"number\">24</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>dp) = <span class=\"number\">24</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>dp) = <span class=\"number\">5.25</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>dp) = <span class=\"number\">5</span> </div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>dp) = <span class=\"number\">5</span>  </div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">16</span>sp) = <span class=\"number\">24.0</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">16</span>sp) = <span class=\"number\">24</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">16</span>sp) = <span class=\"number\">24</span></div><div class=\"line\"></div><div class=\"line\">getDimension(<span class=\"number\">3.5</span>sp) = <span class=\"number\">5.25</span></div><div class=\"line\">getDimensionPixelOffset(<span class=\"number\">3.5</span>sp) = <span class=\"number\">5</span></div><div class=\"line\">getDimensionPixelSize(<span class=\"number\">3.5</span>sp) = <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上面的代码就可以说明问题了，我们可以看到以下几点：</p>\n<ul>\n<li>三个方法都是将源数据乘以scale</li>\n<li>getDimension的返回值是float类型，getDimensionPixelOffset和getDimensionPixelSize的返回值是int类型</li>\n<li>三个方法返回的都是px值，即将dp或者sp等值转换为px值</li>\n<li>getDimensionPixelOffset()是直接将小数位舍弃，而getDimensionPixelSize()则会进行四舍五入</li>\n<li>像setWidth(int)、setHeight(int)这种都是px，根据自己的情况选择getDimensionPixelSize()或getDimensionPixelOffset()</li>\n<li>像setTextSize()：一个参数的是sp；两个参数的是unit和px</li>\n</ul>"},{"title":"关于OpenJDK你了解多少？","date":"2016-08-10T13:55:30.000Z","_content":"\n## 序言\n\n2015年12月底，谷歌宣布，他们正在用开源的 OpenJDK 替换 Oracle JavaAPI。这次方向上的改变看起来与 Sun/Oracle 与 谷歌之间的法律纠纷有关，该纠纷认为谷歌在使用 Java 开发安卓操作系统时违反了 Sun/Oracle 的版权和专利权。\n\n本文与 Sun/Oracle 和谷歌的法律纠纷无关。谷歌现在加入了 IBM、RedHat、Apple（还有其他企业）的队伍专注于 OpenJDK，这意味着什么？意识到这点之后我想弄清楚，对于 JDK 用户，现在是不是应该考虑一下 OpenJDK\n\n## 历史\n\n从Java7开始，OpenJDK就是Java的参考实现（Reference Implementation）。下图的时间线可以让你了解一下OpenJDK的历史:\n\n![jdkhistory](http://incdn1.b0.upaiyun.com/2015/01/bc70d51dc8ffa360f32185cfe67dbd03.png)\n\n<!--more-->\nOpenJDK由许多软件库组成，主要有corba,hotspot,jaxp,jaxws,jdk,langtools,以及nashorn。在OpenJDK8和OpenJDK9之间没有新的软件库加入，但有很多改变和结构调整，主要是因为Jigsaw---Java自身的模块化\n\n![jdkmember](http://incdn1.b0.upaiyun.com/2015/01/34ac4545b3f17bd20b571092d2845cc1.jpg)\n\nJava通过引导一个旧版本的Java——例如，Java以其自身为构件建立。旧的组件被组合在一起创建一个新的组件，即成为下一阶段的结构单元。\n\nOpenJDK8使用JDK7编译和构建，类似地，OpenJDK9 则使用JDK8编译构建。理论上，OpenJDK8是可以使用从其自身创建的影像编译的，同理，OpenJDK9也能用OpenJDK9编译。使用一个叫做循环启动影像的进程——创建OpenJDK的JDK影像，使用同样的影像，OpenJDK再一次被编译。也可以用make命令实现OpenJDK的编译：\n\n``` bash\n$ make bootcycle-images # Build images twice, second time with newly built JDK\n```\nmake命令在OpenJDK8和OpenJDK9下都提供了很多设置选项，可以通过命名的方式建立独立的组件或模块。如下：\n\n``` bash\n$ make [component-name] | [module-name]\n```\n\n甚至并行运行多个构建过程，如下：\n\n``` bash\n$ make JOBS= # Run parallel make jobs\n```\n\n最后，用install选项安装上述已构建的组件，如下：\n\n``` bash\n$ make install\n```\n\n## 特性\n\n- 性能与可伸缩性\n\n就我能够看到的性能测试而言，闭源的 Oracle JDK 和 OpenJDK 之间在性能上似乎并没有很大的差别。然而，至少后来我看到的一则明确的消息说，开源版本的性能已经与 Oracle 的产品并驾齐驱了，这或许是一个理由，让我们至少对开源版本的用法做一下评估。\n\n- 社区进展\n\n随着开源开发者持续对源代码进行改进，OpenJDK 很有可能已经超过 Oracle 发布的版本。另外，开源世界为各种思想和概念提供了实现的可能，这通常在闭源的企业环境中是不可能的\n\n关于开源解决方案如何成为主角的一个例子是 PostgreSQL 数据库。随着 9.5.0 版于 2016 年 1 月初的发布，致力于该产品的贡献者已经使该产品获得了巨大的成功。PostgreSQL 的用户包括：雅虎、Sony在线、BASF、Reddit、Instagram以及 TripAdvisor（只是随便举几个例子）\n\n- 包管理\n\nOpenJDK 也具有了通过类似 brew 这样的包管理器下载/更新 JDK 的能力。JDK 的自动更新能力，对某些人来说可能不算什么，但对于大型的 JDK 实现而言，其作用是巨大的\n\n- 许可证问题\n\n假如你处在类似谷歌的位置，使用 Oracle 的 JDK 有可能会导致违反版权/专利权，那么迁移到 OpenJDK 就是一个应该考虑的选项。从我的非专业、非律师的角度来看，我并不十分肯定的是，仅仅通过采用 OpenJDK是否就能让谷歌完全摆脱困境\n\n- 跟从趋势\n\n如果你本来就是一个开源软件的粉丝，那么 OpenJDK 的目前版本已经稳定，而且性能上接近（如果不是相等的话）Oracle 的产品。再说，跟从由谷歌、IBM、RedHat、Apple 共同设定的趋势，可能是一注安全的赌注，这应该有助于说服你看一下开源 JDK\n\n\n","source":"_posts/关于OpenJDK你了解多少？.md","raw":"title: 关于OpenJDK你了解多少？\ndate: 2016-08-10 21:55:30\ncategories: [Java]\ntags: [openjdk]\n---\n\n## 序言\n\n2015年12月底，谷歌宣布，他们正在用开源的 OpenJDK 替换 Oracle JavaAPI。这次方向上的改变看起来与 Sun/Oracle 与 谷歌之间的法律纠纷有关，该纠纷认为谷歌在使用 Java 开发安卓操作系统时违反了 Sun/Oracle 的版权和专利权。\n\n本文与 Sun/Oracle 和谷歌的法律纠纷无关。谷歌现在加入了 IBM、RedHat、Apple（还有其他企业）的队伍专注于 OpenJDK，这意味着什么？意识到这点之后我想弄清楚，对于 JDK 用户，现在是不是应该考虑一下 OpenJDK\n\n## 历史\n\n从Java7开始，OpenJDK就是Java的参考实现（Reference Implementation）。下图的时间线可以让你了解一下OpenJDK的历史:\n\n![jdkhistory](http://incdn1.b0.upaiyun.com/2015/01/bc70d51dc8ffa360f32185cfe67dbd03.png)\n\n<!--more-->\nOpenJDK由许多软件库组成，主要有corba,hotspot,jaxp,jaxws,jdk,langtools,以及nashorn。在OpenJDK8和OpenJDK9之间没有新的软件库加入，但有很多改变和结构调整，主要是因为Jigsaw---Java自身的模块化\n\n![jdkmember](http://incdn1.b0.upaiyun.com/2015/01/34ac4545b3f17bd20b571092d2845cc1.jpg)\n\nJava通过引导一个旧版本的Java——例如，Java以其自身为构件建立。旧的组件被组合在一起创建一个新的组件，即成为下一阶段的结构单元。\n\nOpenJDK8使用JDK7编译和构建，类似地，OpenJDK9 则使用JDK8编译构建。理论上，OpenJDK8是可以使用从其自身创建的影像编译的，同理，OpenJDK9也能用OpenJDK9编译。使用一个叫做循环启动影像的进程——创建OpenJDK的JDK影像，使用同样的影像，OpenJDK再一次被编译。也可以用make命令实现OpenJDK的编译：\n\n``` bash\n$ make bootcycle-images # Build images twice, second time with newly built JDK\n```\nmake命令在OpenJDK8和OpenJDK9下都提供了很多设置选项，可以通过命名的方式建立独立的组件或模块。如下：\n\n``` bash\n$ make [component-name] | [module-name]\n```\n\n甚至并行运行多个构建过程，如下：\n\n``` bash\n$ make JOBS= # Run parallel make jobs\n```\n\n最后，用install选项安装上述已构建的组件，如下：\n\n``` bash\n$ make install\n```\n\n## 特性\n\n- 性能与可伸缩性\n\n就我能够看到的性能测试而言，闭源的 Oracle JDK 和 OpenJDK 之间在性能上似乎并没有很大的差别。然而，至少后来我看到的一则明确的消息说，开源版本的性能已经与 Oracle 的产品并驾齐驱了，这或许是一个理由，让我们至少对开源版本的用法做一下评估。\n\n- 社区进展\n\n随着开源开发者持续对源代码进行改进，OpenJDK 很有可能已经超过 Oracle 发布的版本。另外，开源世界为各种思想和概念提供了实现的可能，这通常在闭源的企业环境中是不可能的\n\n关于开源解决方案如何成为主角的一个例子是 PostgreSQL 数据库。随着 9.5.0 版于 2016 年 1 月初的发布，致力于该产品的贡献者已经使该产品获得了巨大的成功。PostgreSQL 的用户包括：雅虎、Sony在线、BASF、Reddit、Instagram以及 TripAdvisor（只是随便举几个例子）\n\n- 包管理\n\nOpenJDK 也具有了通过类似 brew 这样的包管理器下载/更新 JDK 的能力。JDK 的自动更新能力，对某些人来说可能不算什么，但对于大型的 JDK 实现而言，其作用是巨大的\n\n- 许可证问题\n\n假如你处在类似谷歌的位置，使用 Oracle 的 JDK 有可能会导致违反版权/专利权，那么迁移到 OpenJDK 就是一个应该考虑的选项。从我的非专业、非律师的角度来看，我并不十分肯定的是，仅仅通过采用 OpenJDK是否就能让谷歌完全摆脱困境\n\n- 跟从趋势\n\n如果你本来就是一个开源软件的粉丝，那么 OpenJDK 的目前版本已经稳定，而且性能上接近（如果不是相等的话）Oracle 的产品。再说，跟从由谷歌、IBM、RedHat、Apple 共同设定的趋势，可能是一注安全的赌注，这应该有助于说服你看一下开源 JDK\n\n\n","slug":"关于OpenJDK你了解多少？","published":1,"updated":"2016-10-13T08:00:19.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbg002e1giy38f6qkaf","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>2015年12月底，谷歌宣布，他们正在用开源的 OpenJDK 替换 Oracle JavaAPI。这次方向上的改变看起来与 Sun/Oracle 与 谷歌之间的法律纠纷有关，该纠纷认为谷歌在使用 Java 开发安卓操作系统时违反了 Sun/Oracle 的版权和专利权。</p>\n<p>本文与 Sun/Oracle 和谷歌的法律纠纷无关。谷歌现在加入了 IBM、RedHat、Apple（还有其他企业）的队伍专注于 OpenJDK，这意味着什么？意识到这点之后我想弄清楚，对于 JDK 用户，现在是不是应该考虑一下 OpenJDK</p>\n<h2 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h2><p>从Java7开始，OpenJDK就是Java的参考实现（Reference Implementation）。下图的时间线可以让你了解一下OpenJDK的历史:</p>\n<p><img src=\"http://incdn1.b0.upaiyun.com/2015/01/bc70d51dc8ffa360f32185cfe67dbd03.png\" alt=\"jdkhistory\"></p>\n<a id=\"more\"></a>\n<p>OpenJDK由许多软件库组成，主要有corba,hotspot,jaxp,jaxws,jdk,langtools,以及nashorn。在OpenJDK8和OpenJDK9之间没有新的软件库加入，但有很多改变和结构调整，主要是因为Jigsaw—Java自身的模块化</p>\n<p><img src=\"http://incdn1.b0.upaiyun.com/2015/01/34ac4545b3f17bd20b571092d2845cc1.jpg\" alt=\"jdkmember\"></p>\n<p>Java通过引导一个旧版本的Java——例如，Java以其自身为构件建立。旧的组件被组合在一起创建一个新的组件，即成为下一阶段的结构单元。</p>\n<p>OpenJDK8使用JDK7编译和构建，类似地，OpenJDK9 则使用JDK8编译构建。理论上，OpenJDK8是可以使用从其自身创建的影像编译的，同理，OpenJDK9也能用OpenJDK9编译。使用一个叫做循环启动影像的进程——创建OpenJDK的JDK影像，使用同样的影像，OpenJDK再一次被编译。也可以用make命令实现OpenJDK的编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make bootcycle-images <span class=\"comment\"># Build images twice, second time with newly built JDK</span></div></pre></td></tr></table></figure>\n<p>make命令在OpenJDK8和OpenJDK9下都提供了很多设置选项，可以通过命名的方式建立独立的组件或模块。如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make [component-name] | [module-name]</div></pre></td></tr></table></figure>\n<p>甚至并行运行多个构建过程，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make JOBS= <span class=\"comment\"># Run parallel make jobs</span></div></pre></td></tr></table></figure>\n<p>最后，用install选项安装上述已构建的组件，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make install</div></pre></td></tr></table></figure>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>性能与可伸缩性</li>\n</ul>\n<p>就我能够看到的性能测试而言，闭源的 Oracle JDK 和 OpenJDK 之间在性能上似乎并没有很大的差别。然而，至少后来我看到的一则明确的消息说，开源版本的性能已经与 Oracle 的产品并驾齐驱了，这或许是一个理由，让我们至少对开源版本的用法做一下评估。</p>\n<ul>\n<li>社区进展</li>\n</ul>\n<p>随着开源开发者持续对源代码进行改进，OpenJDK 很有可能已经超过 Oracle 发布的版本。另外，开源世界为各种思想和概念提供了实现的可能，这通常在闭源的企业环境中是不可能的</p>\n<p>关于开源解决方案如何成为主角的一个例子是 PostgreSQL 数据库。随着 9.5.0 版于 2016 年 1 月初的发布，致力于该产品的贡献者已经使该产品获得了巨大的成功。PostgreSQL 的用户包括：雅虎、Sony在线、BASF、Reddit、Instagram以及 TripAdvisor（只是随便举几个例子）</p>\n<ul>\n<li>包管理</li>\n</ul>\n<p>OpenJDK 也具有了通过类似 brew 这样的包管理器下载/更新 JDK 的能力。JDK 的自动更新能力，对某些人来说可能不算什么，但对于大型的 JDK 实现而言，其作用是巨大的</p>\n<ul>\n<li>许可证问题</li>\n</ul>\n<p>假如你处在类似谷歌的位置，使用 Oracle 的 JDK 有可能会导致违反版权/专利权，那么迁移到 OpenJDK 就是一个应该考虑的选项。从我的非专业、非律师的角度来看，我并不十分肯定的是，仅仅通过采用 OpenJDK是否就能让谷歌完全摆脱困境</p>\n<ul>\n<li>跟从趋势</li>\n</ul>\n<p>如果你本来就是一个开源软件的粉丝，那么 OpenJDK 的目前版本已经稳定，而且性能上接近（如果不是相等的话）Oracle 的产品。再说，跟从由谷歌、IBM、RedHat、Apple 共同设定的趋势，可能是一注安全的赌注，这应该有助于说服你看一下开源 JDK</p>\n","excerpt":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>2015年12月底，谷歌宣布，他们正在用开源的 OpenJDK 替换 Oracle JavaAPI。这次方向上的改变看起来与 Sun/Oracle 与 谷歌之间的法律纠纷有关，该纠纷认为谷歌在使用 Java 开发安卓操作系统时违反了 Sun/Oracle 的版权和专利权。</p>\n<p>本文与 Sun/Oracle 和谷歌的法律纠纷无关。谷歌现在加入了 IBM、RedHat、Apple（还有其他企业）的队伍专注于 OpenJDK，这意味着什么？意识到这点之后我想弄清楚，对于 JDK 用户，现在是不是应该考虑一下 OpenJDK</p>\n<h2 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h2><p>从Java7开始，OpenJDK就是Java的参考实现（Reference Implementation）。下图的时间线可以让你了解一下OpenJDK的历史:</p>\n<p><img src=\"http://incdn1.b0.upaiyun.com/2015/01/bc70d51dc8ffa360f32185cfe67dbd03.png\" alt=\"jdkhistory\"></p>","more":"<p>OpenJDK由许多软件库组成，主要有corba,hotspot,jaxp,jaxws,jdk,langtools,以及nashorn。在OpenJDK8和OpenJDK9之间没有新的软件库加入，但有很多改变和结构调整，主要是因为Jigsaw—Java自身的模块化</p>\n<p><img src=\"http://incdn1.b0.upaiyun.com/2015/01/34ac4545b3f17bd20b571092d2845cc1.jpg\" alt=\"jdkmember\"></p>\n<p>Java通过引导一个旧版本的Java——例如，Java以其自身为构件建立。旧的组件被组合在一起创建一个新的组件，即成为下一阶段的结构单元。</p>\n<p>OpenJDK8使用JDK7编译和构建，类似地，OpenJDK9 则使用JDK8编译构建。理论上，OpenJDK8是可以使用从其自身创建的影像编译的，同理，OpenJDK9也能用OpenJDK9编译。使用一个叫做循环启动影像的进程——创建OpenJDK的JDK影像，使用同样的影像，OpenJDK再一次被编译。也可以用make命令实现OpenJDK的编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make bootcycle-images <span class=\"comment\"># Build images twice, second time with newly built JDK</span></div></pre></td></tr></table></figure>\n<p>make命令在OpenJDK8和OpenJDK9下都提供了很多设置选项，可以通过命名的方式建立独立的组件或模块。如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make [component-name] | [module-name]</div></pre></td></tr></table></figure>\n<p>甚至并行运行多个构建过程，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make JOBS= <span class=\"comment\"># Run parallel make jobs</span></div></pre></td></tr></table></figure>\n<p>最后，用install选项安装上述已构建的组件，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ make install</div></pre></td></tr></table></figure>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>性能与可伸缩性</li>\n</ul>\n<p>就我能够看到的性能测试而言，闭源的 Oracle JDK 和 OpenJDK 之间在性能上似乎并没有很大的差别。然而，至少后来我看到的一则明确的消息说，开源版本的性能已经与 Oracle 的产品并驾齐驱了，这或许是一个理由，让我们至少对开源版本的用法做一下评估。</p>\n<ul>\n<li>社区进展</li>\n</ul>\n<p>随着开源开发者持续对源代码进行改进，OpenJDK 很有可能已经超过 Oracle 发布的版本。另外，开源世界为各种思想和概念提供了实现的可能，这通常在闭源的企业环境中是不可能的</p>\n<p>关于开源解决方案如何成为主角的一个例子是 PostgreSQL 数据库。随着 9.5.0 版于 2016 年 1 月初的发布，致力于该产品的贡献者已经使该产品获得了巨大的成功。PostgreSQL 的用户包括：雅虎、Sony在线、BASF、Reddit、Instagram以及 TripAdvisor（只是随便举几个例子）</p>\n<ul>\n<li>包管理</li>\n</ul>\n<p>OpenJDK 也具有了通过类似 brew 这样的包管理器下载/更新 JDK 的能力。JDK 的自动更新能力，对某些人来说可能不算什么，但对于大型的 JDK 实现而言，其作用是巨大的</p>\n<ul>\n<li>许可证问题</li>\n</ul>\n<p>假如你处在类似谷歌的位置，使用 Oracle 的 JDK 有可能会导致违反版权/专利权，那么迁移到 OpenJDK 就是一个应该考虑的选项。从我的非专业、非律师的角度来看，我并不十分肯定的是，仅仅通过采用 OpenJDK是否就能让谷歌完全摆脱困境</p>\n<ul>\n<li>跟从趋势</li>\n</ul>\n<p>如果你本来就是一个开源软件的粉丝，那么 OpenJDK 的目前版本已经稳定，而且性能上接近（如果不是相等的话）Oracle 的产品。再说，跟从由谷歌、IBM、RedHat、Apple 共同设定的趋势，可能是一注安全的赌注，这应该有助于说服你看一下开源 JDK</p>"},{"title":"实用bat脚本[笔记]","date":"2016-03-01T03:41:36.000Z","_content":"\n### 垃圾清理\n---\n一个自定义的pc端系统垃圾清理批处理文件，可以配合各大电脑管家使用：\n\n``` bash\n\n@echo off \ncolor 0a\ntitle ********系统垃圾清理******** \necho 正在清除系统垃圾文件，请稍后...... \n\necho 删除补丁备份目录 \nRD %windir%\\$hf_mig$ /Q /S \n\necho 把补丁卸载文件夹的名字保存成patchs.txt \ndir %windir%\\$NtUninstall* /a:d /b >%windir%\\patchs.txt \n\necho 从patchs.txt中读取文件夹列表并且删除文件夹 \nfor /f %%i in (%windir%\\patchs.txt) do rd %windir%\\%%i /s /q \n\necho 删除patchs.txt \ndel %windir%\\patchs.txt /f /q \n\necho 删除补丁安装记录内容（下面的del /f /s /q %systemdrive%\\*.log已经包含删除此类文件） \ndel %windir%\\KB*.log /f /q \n\necho 删除系统盘目录下临时文件 \ndel /f /s /q %systemdrive%\\*.tmp \n\necho 删除系统盘目录下临时文件 \ndel /f /s /q %systemdrive%\\*._mp \n\necho 删除系统盘目录下日志文件 \ndel /f /s /q %systemdrive%\\*.log \n\necho 删除系统盘目录下GID文件(属于临时文件，具体作用不详) \ndel /f /s /q %systemdrive%\\*.gid \n\necho 删除系统目录下scandisk（磁盘扫描）留下的无用文件 \ndel /f /s /q %systemdrive%\\*.chk \n\necho 删除系统目录下old文件 \ndel /f /s /q %systemdrive%\\*.old\n \necho 删除回收站的无用文件 \ndel /f /s /q %systemdrive%\\recycled\\*.* \n\necho 删除系统目录下备份文件 \ndel /f /s /q %windir%\\*.bak \n\necho 删除应用程序临时文件 \ndel /f /s /q %windir%\\prefetch\\*.* \n\necho 删除系统维护等操作产生的临时文件 \nrd /s /q %windir%\\temp & md %windir%\\temp \n\necho 删除当前用户的COOKIE（IE） \ndel /f /q %userprofile%\\cookies\\*.* \n\necho 删除internet临时文件 \ndel /f /s /q \"%userprofile%\\local settings\\temporary internet files\\*.*\" \ndel /f /s /q \"%userprofile%\\Local Settings\\Temporary Internet Files\\*.*\"\n\necho 删除当前用户日常操作临时文件 \ndel /f /s /q \"%userprofile%\\local settings\\temp\\*.*\" \ndel /f /s /q \"%userprofile%\\Local Settings\\Temp\\*.*\"\n\necho 删除访问记录（开始菜单中的文档里面的东西） \ndel /f /s /q \"%userprofile%\\recent\\*.*\" \n\necho echo 恭喜您！清理全部完成！\necho. & pause\n\n```\n右键 -> 已管理员身份运行 即可，不会存在任何风险，当然你也可以自己添加路径或者相关的处理，可以说是绿色安全\n<!-- more -->\n\n### 启动应用\n---\n``` bash\n\n@echo off\n\ncolor 0a\ntitle ********快速启动******** \n\necho 1、QQ\necho 2、Exit\n\nset /p s=请输入应用的编号，按Enter启动应用：\nif %s% equ 1 goto a\nif %s% equ 2 goto b\n\n:a\nstart \"\" \"E:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQ.exe\"\necho QQ启动完成！\nexit\n\n:b\nexit\n\n```\n\n这个就非常简单了，一个if判断，指定对应应用的绝对路径，启动指定的应用，还可以打开指定的路径的，因为我比较喜欢简洁的桌面，有了这个脚本，桌面上就不用放置很多快捷方式了\n\n### adb shell\n---\n这个适用于Win系统下对手机执行一些操作，原因是命令行执行了adb shell之后，无法继续使用shell的相关命令，那么我们可以先将命令输出到一个文件里，在读取出来就可以了,以删除文件为例：\n\n``` bash\n\nadb root\n\nadb remount\n\necho cd /sdcard/ >> temp.txt\n\necho rm -r 1.txt >> temp.txt\n\necho exit >> temp.txt\n\nadb shell < temp.txt\n\n\n```","source":"_posts/实用bat脚本-笔记.md","raw":"title: '实用bat脚本[笔记]'\ndate: 2016-03-01 11:41:36\ncategories: [PC]\ntags: [bat, 批处理文件]\n---\n\n### 垃圾清理\n---\n一个自定义的pc端系统垃圾清理批处理文件，可以配合各大电脑管家使用：\n\n``` bash\n\n@echo off \ncolor 0a\ntitle ********系统垃圾清理******** \necho 正在清除系统垃圾文件，请稍后...... \n\necho 删除补丁备份目录 \nRD %windir%\\$hf_mig$ /Q /S \n\necho 把补丁卸载文件夹的名字保存成patchs.txt \ndir %windir%\\$NtUninstall* /a:d /b >%windir%\\patchs.txt \n\necho 从patchs.txt中读取文件夹列表并且删除文件夹 \nfor /f %%i in (%windir%\\patchs.txt) do rd %windir%\\%%i /s /q \n\necho 删除patchs.txt \ndel %windir%\\patchs.txt /f /q \n\necho 删除补丁安装记录内容（下面的del /f /s /q %systemdrive%\\*.log已经包含删除此类文件） \ndel %windir%\\KB*.log /f /q \n\necho 删除系统盘目录下临时文件 \ndel /f /s /q %systemdrive%\\*.tmp \n\necho 删除系统盘目录下临时文件 \ndel /f /s /q %systemdrive%\\*._mp \n\necho 删除系统盘目录下日志文件 \ndel /f /s /q %systemdrive%\\*.log \n\necho 删除系统盘目录下GID文件(属于临时文件，具体作用不详) \ndel /f /s /q %systemdrive%\\*.gid \n\necho 删除系统目录下scandisk（磁盘扫描）留下的无用文件 \ndel /f /s /q %systemdrive%\\*.chk \n\necho 删除系统目录下old文件 \ndel /f /s /q %systemdrive%\\*.old\n \necho 删除回收站的无用文件 \ndel /f /s /q %systemdrive%\\recycled\\*.* \n\necho 删除系统目录下备份文件 \ndel /f /s /q %windir%\\*.bak \n\necho 删除应用程序临时文件 \ndel /f /s /q %windir%\\prefetch\\*.* \n\necho 删除系统维护等操作产生的临时文件 \nrd /s /q %windir%\\temp & md %windir%\\temp \n\necho 删除当前用户的COOKIE（IE） \ndel /f /q %userprofile%\\cookies\\*.* \n\necho 删除internet临时文件 \ndel /f /s /q \"%userprofile%\\local settings\\temporary internet files\\*.*\" \ndel /f /s /q \"%userprofile%\\Local Settings\\Temporary Internet Files\\*.*\"\n\necho 删除当前用户日常操作临时文件 \ndel /f /s /q \"%userprofile%\\local settings\\temp\\*.*\" \ndel /f /s /q \"%userprofile%\\Local Settings\\Temp\\*.*\"\n\necho 删除访问记录（开始菜单中的文档里面的东西） \ndel /f /s /q \"%userprofile%\\recent\\*.*\" \n\necho echo 恭喜您！清理全部完成！\necho. & pause\n\n```\n右键 -> 已管理员身份运行 即可，不会存在任何风险，当然你也可以自己添加路径或者相关的处理，可以说是绿色安全\n<!-- more -->\n\n### 启动应用\n---\n``` bash\n\n@echo off\n\ncolor 0a\ntitle ********快速启动******** \n\necho 1、QQ\necho 2、Exit\n\nset /p s=请输入应用的编号，按Enter启动应用：\nif %s% equ 1 goto a\nif %s% equ 2 goto b\n\n:a\nstart \"\" \"E:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQ.exe\"\necho QQ启动完成！\nexit\n\n:b\nexit\n\n```\n\n这个就非常简单了，一个if判断，指定对应应用的绝对路径，启动指定的应用，还可以打开指定的路径的，因为我比较喜欢简洁的桌面，有了这个脚本，桌面上就不用放置很多快捷方式了\n\n### adb shell\n---\n这个适用于Win系统下对手机执行一些操作，原因是命令行执行了adb shell之后，无法继续使用shell的相关命令，那么我们可以先将命令输出到一个文件里，在读取出来就可以了,以删除文件为例：\n\n``` bash\n\nadb root\n\nadb remount\n\necho cd /sdcard/ >> temp.txt\n\necho rm -r 1.txt >> temp.txt\n\necho exit >> temp.txt\n\nadb shell < temp.txt\n\n\n```","slug":"实用bat脚本-笔记","published":1,"updated":"2016-10-10T06:53:44.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbh002g1giyvdoi62se","content":"<h3 id=\"垃圾清理\"><a href=\"#垃圾清理\" class=\"headerlink\" title=\"垃圾清理\"></a>垃圾清理</h3><hr>\n<p>一个自定义的pc端系统垃圾清理批处理文件，可以配合各大电脑管家使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@<span class=\"built_in\">echo</span> off </div><div class=\"line\">color 0a</div><div class=\"line\">title ********系统垃圾清理******** </div><div class=\"line\"><span class=\"built_in\">echo</span> 正在清除系统垃圾文件，请稍后...... </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除补丁备份目录 </div><div class=\"line\">RD %windir%\\<span class=\"variable\">$hf_mig</span>$ /Q /S </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 把补丁卸载文件夹的名字保存成patchs.txt </div><div class=\"line\">dir %windir%\\<span class=\"variable\">$NtUninstall</span>* /a:d /b &gt;%windir%\\patchs.txt </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 从patchs.txt中读取文件夹列表并且删除文件夹 </div><div class=\"line\"><span class=\"keyword\">for</span> /f %%i <span class=\"keyword\">in</span> (%windir%\\patchs.txt) <span class=\"keyword\">do</span> rd %windir%\\%%i /s /q </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除patchs.txt </div><div class=\"line\">del %windir%\\patchs.txt /f /q </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除补丁安装记录内容（下面的del /f /s /q %systemdrive%\\*.log已经包含删除此类文件） </div><div class=\"line\">del %windir%\\KB*.log /f /q </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下临时文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.tmp </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下临时文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*._mp </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下日志文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.log </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下GID文件(属于临时文件，具体作用不详) </div><div class=\"line\">del /f /s /q %systemdrive%\\*.gid </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统目录下scandisk（磁盘扫描）留下的无用文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.chk </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统目录下old文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.old</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">echo</span> 删除回收站的无用文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\recycled\\*.* </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统目录下备份文件 </div><div class=\"line\">del /f /s /q %windir%\\*.bak </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除应用程序临时文件 </div><div class=\"line\">del /f /s /q %windir%\\prefetch\\*.* </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统维护等操作产生的临时文件 </div><div class=\"line\">rd /s /q %windir%\\temp &amp; md %windir%\\temp </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除当前用户的COOKIE（IE） </div><div class=\"line\">del /f /q %userprofile%\\cookies\\*.* </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除internet临时文件 </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\local settings\\temporary internet files\\*.*\"</span> </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\Local Settings\\Temporary Internet Files\\*.*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除当前用户日常操作临时文件 </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\local settings\\temp\\*.*\"</span> </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\Local Settings\\Temp\\*.*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除访问记录（开始菜单中的文档里面的东西） </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\recent\\*.*\"</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">echo</span> 恭喜您！清理全部完成！</div><div class=\"line\">echo. &amp; pause</div></pre></td></tr></table></figure>\n<p>右键 -&gt; 已管理员身份运行 即可，不会存在任何风险，当然你也可以自己添加路径或者相关的处理，可以说是绿色安全<br><a id=\"more\"></a></p>\n<h3 id=\"启动应用\"><a href=\"#启动应用\" class=\"headerlink\" title=\"启动应用\"></a>启动应用</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">color 0a</div><div class=\"line\">title ********快速启动******** </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 1、QQ</div><div class=\"line\"><span class=\"built_in\">echo</span> 2、Exit</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> /p s=请输入应用的编号，按Enter启动应用：</div><div class=\"line\"><span class=\"keyword\">if</span> %s% equ 1 goto a</div><div class=\"line\"><span class=\"keyword\">if</span> %s% equ 2 goto b</div><div class=\"line\"></div><div class=\"line\">:a</div><div class=\"line\">start <span class=\"string\">\"\"</span> <span class=\"string\">\"E:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQ.exe\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> QQ启动完成！</div><div class=\"line\"><span class=\"built_in\">exit</span></div><div class=\"line\"></div><div class=\"line\">:b</div><div class=\"line\"><span class=\"built_in\">exit</span></div></pre></td></tr></table></figure>\n<p>这个就非常简单了，一个if判断，指定对应应用的绝对路径，启动指定的应用，还可以打开指定的路径的，因为我比较喜欢简洁的桌面，有了这个脚本，桌面上就不用放置很多快捷方式了</p>\n<h3 id=\"adb-shell\"><a href=\"#adb-shell\" class=\"headerlink\" title=\"adb shell\"></a>adb shell</h3><hr>\n<p>这个适用于Win系统下对手机执行一些操作，原因是命令行执行了adb shell之后，无法继续使用shell的相关命令，那么我们可以先将命令输出到一个文件里，在读取出来就可以了,以删除文件为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">adb root</div><div class=\"line\"></div><div class=\"line\">adb remount</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">cd</span> /sdcard/ &gt;&gt; temp.txt</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> rm -r 1.txt &gt;&gt; temp.txt</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">exit</span> &gt;&gt; temp.txt</div><div class=\"line\"></div><div class=\"line\">adb shell &lt; temp.txt</div></pre></td></tr></table></figure>","excerpt":"<h3 id=\"垃圾清理\"><a href=\"#垃圾清理\" class=\"headerlink\" title=\"垃圾清理\"></a>垃圾清理</h3><hr>\n<p>一个自定义的pc端系统垃圾清理批处理文件，可以配合各大电脑管家使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@<span class=\"built_in\">echo</span> off </div><div class=\"line\">color 0a</div><div class=\"line\">title ********系统垃圾清理******** </div><div class=\"line\"><span class=\"built_in\">echo</span> 正在清除系统垃圾文件，请稍后...... </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除补丁备份目录 </div><div class=\"line\">RD %windir%\\<span class=\"variable\">$hf_mig</span>$ /Q /S </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 把补丁卸载文件夹的名字保存成patchs.txt </div><div class=\"line\">dir %windir%\\<span class=\"variable\">$NtUninstall</span>* /a:d /b &gt;%windir%\\patchs.txt </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 从patchs.txt中读取文件夹列表并且删除文件夹 </div><div class=\"line\"><span class=\"keyword\">for</span> /f %%i <span class=\"keyword\">in</span> (%windir%\\patchs.txt) <span class=\"keyword\">do</span> rd %windir%\\%%i /s /q </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除patchs.txt </div><div class=\"line\">del %windir%\\patchs.txt /f /q </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除补丁安装记录内容（下面的del /f /s /q %systemdrive%\\*.log已经包含删除此类文件） </div><div class=\"line\">del %windir%\\KB*.log /f /q </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下临时文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.tmp </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下临时文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*._mp </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下日志文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.log </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统盘目录下GID文件(属于临时文件，具体作用不详) </div><div class=\"line\">del /f /s /q %systemdrive%\\*.gid </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统目录下scandisk（磁盘扫描）留下的无用文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.chk </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统目录下old文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\*.old</div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">echo</span> 删除回收站的无用文件 </div><div class=\"line\">del /f /s /q %systemdrive%\\recycled\\*.* </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统目录下备份文件 </div><div class=\"line\">del /f /s /q %windir%\\*.bak </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除应用程序临时文件 </div><div class=\"line\">del /f /s /q %windir%\\prefetch\\*.* </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除系统维护等操作产生的临时文件 </div><div class=\"line\">rd /s /q %windir%\\temp &amp; md %windir%\\temp </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除当前用户的COOKIE（IE） </div><div class=\"line\">del /f /q %userprofile%\\cookies\\*.* </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除internet临时文件 </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\local settings\\temporary internet files\\*.*\"</span> </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\Local Settings\\Temporary Internet Files\\*.*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除当前用户日常操作临时文件 </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\local settings\\temp\\*.*\"</span> </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\Local Settings\\Temp\\*.*\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 删除访问记录（开始菜单中的文档里面的东西） </div><div class=\"line\">del /f /s /q <span class=\"string\">\"%userprofile%\\recent\\*.*\"</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">echo</span> 恭喜您！清理全部完成！</div><div class=\"line\">echo. &amp; pause</div></pre></td></tr></table></figure>\n<p>右键 -&gt; 已管理员身份运行 即可，不会存在任何风险，当然你也可以自己添加路径或者相关的处理，可以说是绿色安全<br>","more":"</p>\n<h3 id=\"启动应用\"><a href=\"#启动应用\" class=\"headerlink\" title=\"启动应用\"></a>启动应用</h3><hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"></div><div class=\"line\">color 0a</div><div class=\"line\">title ********快速启动******** </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> 1、QQ</div><div class=\"line\"><span class=\"built_in\">echo</span> 2、Exit</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> /p s=请输入应用的编号，按Enter启动应用：</div><div class=\"line\"><span class=\"keyword\">if</span> %s% equ 1 goto a</div><div class=\"line\"><span class=\"keyword\">if</span> %s% equ 2 goto b</div><div class=\"line\"></div><div class=\"line\">:a</div><div class=\"line\">start <span class=\"string\">\"\"</span> <span class=\"string\">\"E:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQ.exe\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> QQ启动完成！</div><div class=\"line\"><span class=\"built_in\">exit</span></div><div class=\"line\"></div><div class=\"line\">:b</div><div class=\"line\"><span class=\"built_in\">exit</span></div></pre></td></tr></table></figure>\n<p>这个就非常简单了，一个if判断，指定对应应用的绝对路径，启动指定的应用，还可以打开指定的路径的，因为我比较喜欢简洁的桌面，有了这个脚本，桌面上就不用放置很多快捷方式了</p>\n<h3 id=\"adb-shell\"><a href=\"#adb-shell\" class=\"headerlink\" title=\"adb shell\"></a>adb shell</h3><hr>\n<p>这个适用于Win系统下对手机执行一些操作，原因是命令行执行了adb shell之后，无法继续使用shell的相关命令，那么我们可以先将命令输出到一个文件里，在读取出来就可以了,以删除文件为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">adb root</div><div class=\"line\"></div><div class=\"line\">adb remount</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">cd</span> /sdcard/ &gt;&gt; temp.txt</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> rm -r 1.txt &gt;&gt; temp.txt</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">exit</span> &gt;&gt; temp.txt</div><div class=\"line\"></div><div class=\"line\">adb shell &lt; temp.txt</div></pre></td></tr></table></figure>"},{"title":"[推荐]Markdown编辑器(PC+手机端)","date":"2015-11-24T07:14:12.000Z","_content":"### 开篇\n相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：\n![gitbub-readme](http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png)\n上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。\n\n### 在线编辑器 - 马克飞象\n官方地址：[点我跳转](http://tool.oschina.net/markdown/)\n这是oschina提供的一个在线的编辑器，可以实时预览、Html效果预览\n\n### Windows - MarkdownPad\n官网地址：[点我跳转](http://markdownpad.com/)\n官方描述：**MarkdownPad is a full-featured Markdown editor for Windows.**\n这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。\n![markdownpad](http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png)\n<!-- more -->\n\n### Gmail - Markdown Here\n这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了\nChrome扩展插件：\n![chromeplugin](http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png)\n编辑gmail邮件：\n![gmailediter](http://7xod2d.com1.z0.glb.clouddn.com/email-before.png)\ngmail的预览，点击图一插件按钮即可看到图二预览效果：\n![gmailpluginbutton](http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png)\n![gmailpreview](http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png)\n\n### Android - MarkdownX\n在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。\n下图来自google play：\n![markdownx](http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png)\n\n这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。","source":"_posts/推荐-Markdown编辑器.md","raw":"title: '[推荐]Markdown编辑器(PC+手机端)'\ndate: 2015-11-24 15:14:12\ncategories: [Markdown]\ntags: [Markdown, 马克飞象, MarkdownPad, MarkdownX]\n---\n### 开篇\n相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：\n![gitbub-readme](http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png)\n上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。\n\n### 在线编辑器 - 马克飞象\n官方地址：[点我跳转](http://tool.oschina.net/markdown/)\n这是oschina提供的一个在线的编辑器，可以实时预览、Html效果预览\n\n### Windows - MarkdownPad\n官网地址：[点我跳转](http://markdownpad.com/)\n官方描述：**MarkdownPad is a full-featured Markdown editor for Windows.**\n这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。\n![markdownpad](http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png)\n<!-- more -->\n\n### Gmail - Markdown Here\n这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了\nChrome扩展插件：\n![chromeplugin](http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png)\n编辑gmail邮件：\n![gmailediter](http://7xod2d.com1.z0.glb.clouddn.com/email-before.png)\ngmail的预览，点击图一插件按钮即可看到图二预览效果：\n![gmailpluginbutton](http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png)\n![gmailpreview](http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png)\n\n### Android - MarkdownX\n在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。\n下图来自google play：\n![markdownx](http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png)\n\n这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。","slug":"推荐-Markdown编辑器","published":1,"updated":"2016-10-10T06:53:44.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbk002k1giypg86fkof","content":"<h3 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h3><p>相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png\" alt=\"gitbub-readme\"><br>上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。</p>\n<h3 id=\"在线编辑器-马克飞象\"><a href=\"#在线编辑器-马克飞象\" class=\"headerlink\" title=\"在线编辑器 - 马克飞象\"></a>在线编辑器 - 马克飞象</h3><p>官方地址：<a href=\"http://tool.oschina.net/markdown/\" target=\"_blank\" rel=\"external\">点我跳转</a><br>这是oschina提供的一个在线的编辑器，可以实时预览、Html效果预览</p>\n<h3 id=\"Windows-MarkdownPad\"><a href=\"#Windows-MarkdownPad\" class=\"headerlink\" title=\"Windows - MarkdownPad\"></a>Windows - MarkdownPad</h3><p>官网地址：<a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"external\">点我跳转</a><br>官方描述：<strong>MarkdownPad is a full-featured Markdown editor for Windows.</strong><br>这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png\" alt=\"markdownpad\"><br><a id=\"more\"></a></p>\n<h3 id=\"Gmail-Markdown-Here\"><a href=\"#Gmail-Markdown-Here\" class=\"headerlink\" title=\"Gmail - Markdown Here\"></a>Gmail - Markdown Here</h3><p>这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了<br>Chrome扩展插件：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png\" alt=\"chromeplugin\"><br>编辑gmail邮件：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/email-before.png\" alt=\"gmailediter\"><br>gmail的预览，点击图一插件按钮即可看到图二预览效果：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png\" alt=\"gmailpluginbutton\"><br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png\" alt=\"gmailpreview\"></p>\n<h3 id=\"Android-MarkdownX\"><a href=\"#Android-MarkdownX\" class=\"headerlink\" title=\"Android - MarkdownX\"></a>Android - MarkdownX</h3><p>在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。<br>下图来自google play：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png\" alt=\"markdownx\"></p>\n<p>这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。</p>\n","excerpt":"<h3 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h3><p>相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png\" alt=\"gitbub-readme\"><br>上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。</p>\n<h3 id=\"在线编辑器-马克飞象\"><a href=\"#在线编辑器-马克飞象\" class=\"headerlink\" title=\"在线编辑器 - 马克飞象\"></a>在线编辑器 - 马克飞象</h3><p>官方地址：<a href=\"http://tool.oschina.net/markdown/\">点我跳转</a><br>这是oschina提供的一个在线的编辑器，可以实时预览、Html效果预览</p>\n<h3 id=\"Windows-MarkdownPad\"><a href=\"#Windows-MarkdownPad\" class=\"headerlink\" title=\"Windows - MarkdownPad\"></a>Windows - MarkdownPad</h3><p>官网地址：<a href=\"http://markdownpad.com/\">点我跳转</a><br>官方描述：<strong>MarkdownPad is a full-featured Markdown editor for Windows.</strong><br>这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png\" alt=\"markdownpad\"><br>","more":"</p>\n<h3 id=\"Gmail-Markdown-Here\"><a href=\"#Gmail-Markdown-Here\" class=\"headerlink\" title=\"Gmail - Markdown Here\"></a>Gmail - Markdown Here</h3><p>这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了<br>Chrome扩展插件：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png\" alt=\"chromeplugin\"><br>编辑gmail邮件：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/email-before.png\" alt=\"gmailediter\"><br>gmail的预览，点击图一插件按钮即可看到图二预览效果：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png\" alt=\"gmailpluginbutton\"><br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png\" alt=\"gmailpreview\"></p>\n<h3 id=\"Android-MarkdownX\"><a href=\"#Android-MarkdownX\" class=\"headerlink\" title=\"Android - MarkdownX\"></a>Android - MarkdownX</h3><p>在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。<br>下图来自google play：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png\" alt=\"markdownx\"></p>\n<p>这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。</p>"},{"title":"通过Swiftype实现hexo站内搜索","date":"2015-11-25T09:30:54.000Z","_content":"hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。\n\n#### 注册swiftype账号\n官方地址：[https://swiftype.com/](https://swiftype.com/)\n\n#### 创建搜索引擎\n注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;\n1、CREATE AN ENGINE：\n![CREATEANENGINE](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg)\n2、继续点击创建：\n![create](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png)\n<!-- more -->\n\n3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：\n![enginename](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png)\n4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml\n![sitemap](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png)\n5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：\n![homepage](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png)\n5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：\n![contentdata](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png)\n6、点击上面的INTEGRATE -> INSTALL SEARCH ，进行一些关键的配置：\n![install](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png)\n7、点击CHANGE CONFIGURATION：\n![change](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png)\n8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（**results container** - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。\n![container](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png)\n9、配置**Search field**，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：\n![searchfield](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png)\n \n 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。\n\n#### hexo主题配置（pacman）\n我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。\n\n**1、**首先打开**pacman\\\\_config.yml**文件在末尾添加如下代码，提供对swiftype的支持：\n```\nswift_search:\n  enable: true\n```\n\n**2、** 在**hexo\\source**目录（注意不是pacman主题的source目录）下**新建一个search文件夹**（如果不存在的），在里面**新建一个index.md**，index.md中写入如下代码：\n\n```\nlayout: search\ntitle: search\n---\n```\n**3、** 切换的到**pacman\\layout\\\\_partial**目录下，大部分的代码配置都在这里完成的。先**打开header.ejs**，把\n```\n<li>\n...\n...\n</li>\n\n```\n之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接**copy**过去就行：\n```\n<% if\t(theme.swift_search&&theme.swift_search.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" class=\"st-default-search-input\" maxlength=\"20\" placeholder=\"Search\" />\n\t</form>\n\t\n\t<% }else if\t(theme.google_cse&&theme.google_cse.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" autocomplete=\"off\" name=\"q\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t</form>\n\t\n\t<% } else { %>\n\t<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" name=\"q\" autocomplete=\"off\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t<input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n\t</form>\n\t<% } %>\n```\n\n**4、**将原来的**search.ejs**中的代码**清空**，**替换为以下的代码**，其实主要就是为了控制结果的显示样式（后期可以自己调整），**注意：将最下面的` <script ...   >  ... ` 部分替换成swiftype给你的js代码**。\n```\n<% if(theme.swift_search.enable) { %>\n<div  id=\"container\" class=\"page\">\n  <div id=\"st-results-container\" class=\"st-search-container\" style=\"width:80%\">正在加载搜索结果，请稍等。</div>\n  <style>.st-result-text {\n  background: #fafafa;\n  display: block;\n  border-left: 0.5em solid #ccc;\n  -webkit-transition: border-left 0.45s;\n  -moz-transition: border-left 0.45s;\n  -o-transition: border-left 0.45s;\n  -ms-transition: border-left 0.45s;\n  transition: border-left 0.45s;\n  padding: 0.5em;\n}\n@media only screen and (min-width: 768px) {\n  .st-result-text {\n    padding: 1em;\n  }\n}\n.st-result-text:hover {\n  border-left: 0.5em solid #ea6753;\n}\n.st-result-text h3 a{\n  color: #2ca6cb;\n  line-height: 1.5;\n  font-size: 22px;\n}\n.st-snippet em {\n  font-weight: bold;\n  color: #ea6753;\n}</style>\n\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n\n<% } %>\n\n```\n**5、**打开**footer.ejs或header.ejs**，在最后一个标签（`</div>`）之前添加swiftype分配给你的js代码（同上），我的是：\n```\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n```\n\n到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：\n```\n> hexo clean\n> hexo d -g\n```\n等部署完成，你就可以打开你的Blog任性的搜索了\n\n#### 推荐\n这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，[点我跳转.](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)","source":"_posts/通过Swiftype实现hexo站内搜索.md","raw":"title: 通过Swiftype实现hexo站内搜索\ndate: 2015-11-25 17:30:54\ncategories: [Hexo]\ntags: [hexo, swiftype, pacman]\n---\nhexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。\n\n#### 注册swiftype账号\n官方地址：[https://swiftype.com/](https://swiftype.com/)\n\n#### 创建搜索引擎\n注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;\n1、CREATE AN ENGINE：\n![CREATEANENGINE](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg)\n2、继续点击创建：\n![create](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png)\n<!-- more -->\n\n3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：\n![enginename](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png)\n4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml\n![sitemap](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png)\n5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：\n![homepage](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png)\n5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：\n![contentdata](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png)\n6、点击上面的INTEGRATE -> INSTALL SEARCH ，进行一些关键的配置：\n![install](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png)\n7、点击CHANGE CONFIGURATION：\n![change](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png)\n8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（**results container** - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。\n![container](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png)\n9、配置**Search field**，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：\n![searchfield](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png)\n \n 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。\n\n#### hexo主题配置（pacman）\n我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。\n\n**1、**首先打开**pacman\\\\_config.yml**文件在末尾添加如下代码，提供对swiftype的支持：\n```\nswift_search:\n  enable: true\n```\n\n**2、** 在**hexo\\source**目录（注意不是pacman主题的source目录）下**新建一个search文件夹**（如果不存在的），在里面**新建一个index.md**，index.md中写入如下代码：\n\n```\nlayout: search\ntitle: search\n---\n```\n**3、** 切换的到**pacman\\layout\\\\_partial**目录下，大部分的代码配置都在这里完成的。先**打开header.ejs**，把\n```\n<li>\n...\n...\n</li>\n\n```\n之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接**copy**过去就行：\n```\n<% if\t(theme.swift_search&&theme.swift_search.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" class=\"st-default-search-input\" maxlength=\"20\" placeholder=\"Search\" />\n\t</form>\n\t\n\t<% }else if\t(theme.google_cse&&theme.google_cse.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" autocomplete=\"off\" name=\"q\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t</form>\n\t\n\t<% } else { %>\n\t<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" name=\"q\" autocomplete=\"off\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t<input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n\t</form>\n\t<% } %>\n```\n\n**4、**将原来的**search.ejs**中的代码**清空**，**替换为以下的代码**，其实主要就是为了控制结果的显示样式（后期可以自己调整），**注意：将最下面的` <script ...   >  ... ` 部分替换成swiftype给你的js代码**。\n```\n<% if(theme.swift_search.enable) { %>\n<div  id=\"container\" class=\"page\">\n  <div id=\"st-results-container\" class=\"st-search-container\" style=\"width:80%\">正在加载搜索结果，请稍等。</div>\n  <style>.st-result-text {\n  background: #fafafa;\n  display: block;\n  border-left: 0.5em solid #ccc;\n  -webkit-transition: border-left 0.45s;\n  -moz-transition: border-left 0.45s;\n  -o-transition: border-left 0.45s;\n  -ms-transition: border-left 0.45s;\n  transition: border-left 0.45s;\n  padding: 0.5em;\n}\n@media only screen and (min-width: 768px) {\n  .st-result-text {\n    padding: 1em;\n  }\n}\n.st-result-text:hover {\n  border-left: 0.5em solid #ea6753;\n}\n.st-result-text h3 a{\n  color: #2ca6cb;\n  line-height: 1.5;\n  font-size: 22px;\n}\n.st-snippet em {\n  font-weight: bold;\n  color: #ea6753;\n}</style>\n\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n\n<% } %>\n\n```\n**5、**打开**footer.ejs或header.ejs**，在最后一个标签（`</div>`）之前添加swiftype分配给你的js代码（同上），我的是：\n```\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n```\n\n到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：\n```\n> hexo clean\n> hexo d -g\n```\n等部署完成，你就可以打开你的Blog任性的搜索了\n\n#### 推荐\n这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，[点我跳转.](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)","slug":"通过Swiftype实现hexo站内搜索","published":1,"updated":"2016-10-10T06:53:44.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbn002m1giybyut2d8k","content":"<p>hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。</p>\n<h4 id=\"注册swiftype账号\"><a href=\"#注册swiftype账号\" class=\"headerlink\" title=\"注册swiftype账号\"></a>注册swiftype账号</h4><p>官方地址：<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"external\">https://swiftype.com/</a></p>\n<h4 id=\"创建搜索引擎\"><a href=\"#创建搜索引擎\" class=\"headerlink\" title=\"创建搜索引擎\"></a>创建搜索引擎</h4><p>注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;<br>1、CREATE AN ENGINE：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg\" alt=\"CREATEANENGINE\"><br>2、继续点击创建：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png\" alt=\"create\"><br><a id=\"more\"></a></p>\n<p>3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png\" alt=\"enginename\"><br>4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png\" alt=\"sitemap\"><br>5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png\" alt=\"homepage\"><br>5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png\" alt=\"contentdata\"><br>6、点击上面的INTEGRATE -&gt; INSTALL SEARCH ，进行一些关键的配置：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png\" alt=\"install\"><br>7、点击CHANGE CONFIGURATION：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png\" alt=\"change\"><br>8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（<strong>results container</strong> - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png\" alt=\"container\"><br>9、配置<strong>Search field</strong>，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png\" alt=\"searchfield\"></p>\n<p> 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。</p>\n<h4 id=\"hexo主题配置（pacman）\"><a href=\"#hexo主题配置（pacman）\" class=\"headerlink\" title=\"hexo主题配置（pacman）\"></a>hexo主题配置（pacman）</h4><p>我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。</p>\n<p><strong>1、</strong>首先打开<strong>pacman\\_config.yml</strong>文件在末尾添加如下代码，提供对swiftype的支持：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">swift_search:</div><div class=\"line\">  enable: true</div></pre></td></tr></table></figure></p>\n<p><strong>2、</strong> 在<strong>hexo\\source</strong>目录（注意不是pacman主题的source目录）下<strong>新建一个search文件夹</strong>（如果不存在的），在里面<strong>新建一个index.md</strong>，index.md中写入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: search</div><div class=\"line\">title: search</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p><strong>3、</strong> 切换的到<strong>pacman\\layout\\_partial</strong>目录下，大部分的代码配置都在这里完成的。先<strong>打开header.ejs</strong>，把<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure></p>\n<p>之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接<strong>copy</strong>过去就行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if\t(theme.swift_search&amp;&amp;theme.swift_search.enable)&#123; %&gt;</div><div class=\"line\">\t&lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">\t&lt;label&gt;Search&lt;/label&gt;</div><div class=\"line\">\t&lt;input type=&quot;text&quot; class=&quot;st-default-search-input&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;</div><div class=\"line\">\t&lt;/form&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;% &#125;else if\t(theme.google_cse&amp;&amp;theme.google_cse.enable)&#123; %&gt;</div><div class=\"line\">\t&lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">\t&lt;label&gt;Search&lt;/label&gt;</div><div class=\"line\">\t&lt;input type=&quot;text&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; name=&quot;q&quot; maxlength=&quot;20&quot; placeholder=&quot;&lt;%= __(&apos;search&apos;) %&gt;&quot; /&gt;</div><div class=\"line\">\t&lt;/form&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;% &#125; else &#123; %&gt;</div><div class=\"line\">\t&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">\t&lt;label&gt;Search&lt;/label&gt;</div><div class=\"line\">\t&lt;input type=&quot;text&quot; id=&quot;search&quot; name=&quot;q&quot; autocomplete=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;&lt;%= __(&apos;search&apos;) %&gt;&quot; /&gt;</div><div class=\"line\">\t&lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &apos;&apos;) %&gt;&quot;&gt;</div><div class=\"line\">\t&lt;/form&gt;</div><div class=\"line\">\t&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>4、</strong>将原来的<strong>search.ejs</strong>中的代码<strong>清空</strong>，<strong>替换为以下的代码</strong>，其实主要就是为了控制结果的显示样式（后期可以自己调整），<strong>注意：将最下面的<code>&lt;script ...   &gt;  ...</code> 部分替换成swiftype给你的js代码</strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if(theme.swift_search.enable) &#123; %&gt;</div><div class=\"line\">&lt;div  id=&quot;container&quot; class=&quot;page&quot;&gt;</div><div class=\"line\">  &lt;div id=&quot;st-results-container&quot; class=&quot;st-search-container&quot; style=&quot;width:80%&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;</div><div class=\"line\">  &lt;style&gt;.st-result-text &#123;</div><div class=\"line\">  background: #fafafa;</div><div class=\"line\">  display: block;</div><div class=\"line\">  border-left: 0.5em solid #ccc;</div><div class=\"line\">  -webkit-transition: border-left 0.45s;</div><div class=\"line\">  -moz-transition: border-left 0.45s;</div><div class=\"line\">  -o-transition: border-left 0.45s;</div><div class=\"line\">  -ms-transition: border-left 0.45s;</div><div class=\"line\">  transition: border-left 0.45s;</div><div class=\"line\">  padding: 0.5em;</div><div class=\"line\">&#125;</div><div class=\"line\">@media only screen and (min-width: 768px) &#123;</div><div class=\"line\">  .st-result-text &#123;</div><div class=\"line\">    padding: 1em;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.st-result-text:hover &#123;</div><div class=\"line\">  border-left: 0.5em solid #ea6753;</div><div class=\"line\">&#125;</div><div class=\"line\">.st-result-text h3 a&#123;</div><div class=\"line\">  color: #2ca6cb;</div><div class=\"line\">  line-height: 1.5;</div><div class=\"line\">  font-size: 22px;</div><div class=\"line\">&#125;</div><div class=\"line\">.st-snippet em &#123;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">  color: #ea6753;</div><div class=\"line\">&#125;&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">  (function(w,d,t,u,n,s,e)&#123;w[&apos;SwiftypeObject&apos;]=n;w[n]=w[n]||function()&#123;</div><div class=\"line\">  (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);</div><div class=\"line\">  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</div><div class=\"line\">  &#125;)(window,document,&apos;script&apos;,&apos;//s.swiftypecdn.com/install/v2/st.js&apos;,&apos;_st&apos;);</div><div class=\"line\"></div><div class=\"line\">  _st(&apos;install&apos;,&apos;w7ca3xWstLkz2UvAeyAJ&apos;,&apos;2.0.0&apos;);</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>5、</strong>打开<strong>footer.ejs或header.ejs</strong>，在最后一个标签（<code>&lt;/div&gt;</code>）之前添加swiftype分配给你的js代码（同上），我的是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">  (function(w,d,t,u,n,s,e)&#123;w[&apos;SwiftypeObject&apos;]=n;w[n]=w[n]||function()&#123;</div><div class=\"line\">  (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);</div><div class=\"line\">  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</div><div class=\"line\">  &#125;)(window,document,&apos;script&apos;,&apos;//s.swiftypecdn.com/install/v2/st.js&apos;,&apos;_st&apos;);</div><div class=\"line\"></div><div class=\"line\">  _st(&apos;install&apos;,&apos;w7ca3xWstLkz2UvAeyAJ&apos;,&apos;2.0.0&apos;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; hexo clean</div><div class=\"line\">&gt; hexo d -g</div></pre></td></tr></table></figure></p>\n<p>等部署完成，你就可以打开你的Blog任性的搜索了</p>\n<h4 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h4><p>这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，<a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\" target=\"_blank\" rel=\"external\">点我跳转.</a></p>\n","excerpt":"<p>hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。</p>\n<h4 id=\"注册swiftype账号\"><a href=\"#注册swiftype账号\" class=\"headerlink\" title=\"注册swiftype账号\"></a>注册swiftype账号</h4><p>官方地址：<a href=\"https://swiftype.com/\">https://swiftype.com/</a></p>\n<h4 id=\"创建搜索引擎\"><a href=\"#创建搜索引擎\" class=\"headerlink\" title=\"创建搜索引擎\"></a>创建搜索引擎</h4><p>注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;<br>1、CREATE AN ENGINE：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg\" alt=\"CREATEANENGINE\"><br>2、继续点击创建：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png\" alt=\"create\"><br>","more":"</p>\n<p>3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png\" alt=\"enginename\"><br>4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png\" alt=\"sitemap\"><br>5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png\" alt=\"homepage\"><br>5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png\" alt=\"contentdata\"><br>6、点击上面的INTEGRATE -&gt; INSTALL SEARCH ，进行一些关键的配置：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png\" alt=\"install\"><br>7、点击CHANGE CONFIGURATION：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png\" alt=\"change\"><br>8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（<strong>results container</strong> - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png\" alt=\"container\"><br>9、配置<strong>Search field</strong>，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：<br><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png\" alt=\"searchfield\"></p>\n<p> 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。</p>\n<h4 id=\"hexo主题配置（pacman）\"><a href=\"#hexo主题配置（pacman）\" class=\"headerlink\" title=\"hexo主题配置（pacman）\"></a>hexo主题配置（pacman）</h4><p>我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。</p>\n<p><strong>1、</strong>首先打开<strong>pacman\\_config.yml</strong>文件在末尾添加如下代码，提供对swiftype的支持：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">swift_search:</div><div class=\"line\">  enable: true</div></pre></td></tr></table></figure></p>\n<p><strong>2、</strong> 在<strong>hexo\\source</strong>目录（注意不是pacman主题的source目录）下<strong>新建一个search文件夹</strong>（如果不存在的），在里面<strong>新建一个index.md</strong>，index.md中写入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: search</div><div class=\"line\">title: search</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p><strong>3、</strong> 切换的到<strong>pacman\\layout\\_partial</strong>目录下，大部分的代码配置都在这里完成的。先<strong>打开header.ejs</strong>，把<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt;</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure></p>\n<p>之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接<strong>copy</strong>过去就行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if\t(theme.swift_search&amp;&amp;theme.swift_search.enable)&#123; %&gt;</div><div class=\"line\">\t&lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">\t&lt;label&gt;Search&lt;/label&gt;</div><div class=\"line\">\t&lt;input type=&quot;text&quot; class=&quot;st-default-search-input&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;</div><div class=\"line\">\t&lt;/form&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;% &#125;else if\t(theme.google_cse&amp;&amp;theme.google_cse.enable)&#123; %&gt;</div><div class=\"line\">\t&lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">\t&lt;label&gt;Search&lt;/label&gt;</div><div class=\"line\">\t&lt;input type=&quot;text&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; name=&quot;q&quot; maxlength=&quot;20&quot; placeholder=&quot;&lt;%= __(&apos;search&apos;) %&gt;&quot; /&gt;</div><div class=\"line\">\t&lt;/form&gt;</div><div class=\"line\">\t</div><div class=\"line\">\t&lt;% &#125; else &#123; %&gt;</div><div class=\"line\">\t&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">\t&lt;label&gt;Search&lt;/label&gt;</div><div class=\"line\">\t&lt;input type=&quot;text&quot; id=&quot;search&quot; name=&quot;q&quot; autocomplete=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;&lt;%= __(&apos;search&apos;) %&gt;&quot; /&gt;</div><div class=\"line\">\t&lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &apos;&apos;) %&gt;&quot;&gt;</div><div class=\"line\">\t&lt;/form&gt;</div><div class=\"line\">\t&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>4、</strong>将原来的<strong>search.ejs</strong>中的代码<strong>清空</strong>，<strong>替换为以下的代码</strong>，其实主要就是为了控制结果的显示样式（后期可以自己调整），<strong>注意：将最下面的<code>&lt;script ...   &gt;  ...</code> 部分替换成swiftype给你的js代码</strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if(theme.swift_search.enable) &#123; %&gt;</div><div class=\"line\">&lt;div  id=&quot;container&quot; class=&quot;page&quot;&gt;</div><div class=\"line\">  &lt;div id=&quot;st-results-container&quot; class=&quot;st-search-container&quot; style=&quot;width:80%&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;</div><div class=\"line\">  &lt;style&gt;.st-result-text &#123;</div><div class=\"line\">  background: #fafafa;</div><div class=\"line\">  display: block;</div><div class=\"line\">  border-left: 0.5em solid #ccc;</div><div class=\"line\">  -webkit-transition: border-left 0.45s;</div><div class=\"line\">  -moz-transition: border-left 0.45s;</div><div class=\"line\">  -o-transition: border-left 0.45s;</div><div class=\"line\">  -ms-transition: border-left 0.45s;</div><div class=\"line\">  transition: border-left 0.45s;</div><div class=\"line\">  padding: 0.5em;</div><div class=\"line\">&#125;</div><div class=\"line\">@media only screen and (min-width: 768px) &#123;</div><div class=\"line\">  .st-result-text &#123;</div><div class=\"line\">    padding: 1em;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.st-result-text:hover &#123;</div><div class=\"line\">  border-left: 0.5em solid #ea6753;</div><div class=\"line\">&#125;</div><div class=\"line\">.st-result-text h3 a&#123;</div><div class=\"line\">  color: #2ca6cb;</div><div class=\"line\">  line-height: 1.5;</div><div class=\"line\">  font-size: 22px;</div><div class=\"line\">&#125;</div><div class=\"line\">.st-snippet em &#123;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">  color: #ea6753;</div><div class=\"line\">&#125;&lt;/style&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">  (function(w,d,t,u,n,s,e)&#123;w[&apos;SwiftypeObject&apos;]=n;w[n]=w[n]||function()&#123;</div><div class=\"line\">  (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);</div><div class=\"line\">  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</div><div class=\"line\">  &#125;)(window,document,&apos;script&apos;,&apos;//s.swiftypecdn.com/install/v2/st.js&apos;,&apos;_st&apos;);</div><div class=\"line\"></div><div class=\"line\">  _st(&apos;install&apos;,&apos;w7ca3xWstLkz2UvAeyAJ&apos;,&apos;2.0.0&apos;);</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>5、</strong>打开<strong>footer.ejs或header.ejs</strong>，在最后一个标签（<code>&lt;/div&gt;</code>）之前添加swiftype分配给你的js代码（同上），我的是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">  (function(w,d,t,u,n,s,e)&#123;w[&apos;SwiftypeObject&apos;]=n;w[n]=w[n]||function()&#123;</div><div class=\"line\">  (w[n].q=w[n].q||[]).push(arguments);&#125;;s=d.createElement(t);</div><div class=\"line\">  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</div><div class=\"line\">  &#125;)(window,document,&apos;script&apos;,&apos;//s.swiftypecdn.com/install/v2/st.js&apos;,&apos;_st&apos;);</div><div class=\"line\"></div><div class=\"line\">  _st(&apos;install&apos;,&apos;w7ca3xWstLkz2UvAeyAJ&apos;,&apos;2.0.0&apos;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; hexo clean</div><div class=\"line\">&gt; hexo d -g</div></pre></td></tr></table></figure></p>\n<p>等部署完成，你就可以打开你的Blog任性的搜索了</p>\n<h4 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h4><p>这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，<a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\">点我跳转.</a></p>"},{"title":"解决Android Studio中Terminal无法输入的问题","date":"2015-11-16T02:14:09.000Z","_content":"### 问题描述：\n```\nWindows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。\n```\n### 问题原因：\n这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非\n常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于\nC:\\Windows\\System32\\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导\n致了这里描述的问题。\n\n### 解决方案：\n下面给出具体的操作步骤，有图有真相：\n\n1、win+R组合键打开运行窗口，输入cmd ，点击OK\n\n![cmd窗口](http://7xod2d.com1.z0.glb.clouddn.com/cmd.png)\n\n2、在出现的cmd窗口中，右键点击标题栏->Properties，出现如下窗口：\n\n![Properties窗口](http://7xod2d.com1.z0.glb.clouddn.com/settings.png)\n\n3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！\n","source":"_posts/解决Android-Studio中Terminal无法输入的问题.md","raw":"title: 解决Android Studio中Terminal无法输入的问题\ntags: [Android Studio, Terminal]\ndate: 2015-11-16 10:14:09\ncategories: [Android]\n---\n### 问题描述：\n```\nWindows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。\n```\n### 问题原因：\n这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非\n常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于\nC:\\Windows\\System32\\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导\n致了这里描述的问题。\n\n### 解决方案：\n下面给出具体的操作步骤，有图有真相：\n\n1、win+R组合键打开运行窗口，输入cmd ，点击OK\n\n![cmd窗口](http://7xod2d.com1.z0.glb.clouddn.com/cmd.png)\n\n2、在出现的cmd窗口中，右键点击标题栏->Properties，出现如下窗口：\n\n![Properties窗口](http://7xod2d.com1.z0.glb.clouddn.com/settings.png)\n\n3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！\n","slug":"解决Android-Studio中Terminal无法输入的问题","published":1,"updated":"2016-10-10T06:53:44.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugm6bbp002q1giyibspzfep","content":"<h3 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Windows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。</div></pre></td></tr></table></figure>\n<h3 id=\"问题原因：\"><a href=\"#问题原因：\" class=\"headerlink\" title=\"问题原因：\"></a>问题原因：</h3><p>这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非<br>常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于<br>C:\\Windows\\System32\\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导<br>致了这里描述的问题。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>下面给出具体的操作步骤，有图有真相：</p>\n<p>1、win+R组合键打开运行窗口，输入cmd ，点击OK</p>\n<p><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/cmd.png\" alt=\"cmd窗口\"></p>\n<p>2、在出现的cmd窗口中，右键点击标题栏-&gt;Properties，出现如下窗口：</p>\n<p><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/settings.png\" alt=\"Properties窗口\"></p>\n<p>3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！</p>\n","excerpt":"","more":"<h3 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Windows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。</div></pre></td></tr></table></figure>\n<h3 id=\"问题原因：\"><a href=\"#问题原因：\" class=\"headerlink\" title=\"问题原因：\"></a>问题原因：</h3><p>这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非<br>常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于<br>C:\\Windows\\System32\\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导<br>致了这里描述的问题。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>下面给出具体的操作步骤，有图有真相：</p>\n<p>1、win+R组合键打开运行窗口，输入cmd ，点击OK</p>\n<p><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/cmd.png\" alt=\"cmd窗口\"></p>\n<p>2、在出现的cmd窗口中，右键点击标题栏-&gt;Properties，出现如下窗口：</p>\n<p><img src=\"http://7xod2d.com1.z0.glb.clouddn.com/settings.png\" alt=\"Properties窗口\"></p>\n<p>3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciugm6b9f000d1giyb9c858cy","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6b9u000l1giyahe526co"},{"post_id":"ciugm6b8z00051giyxpt5gljd","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6b9x000p1giy1crllyac"},{"post_id":"ciugm6b9i000f1giyx95jynyb","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6b9z000r1giyg1h9r5ia"},{"post_id":"ciugm6b9400071giyqs9r5g5q","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6ba3000v1giyfhesvjf2"},{"post_id":"ciugm6b9y000q1giygwrpc5n5","category_id":"ciugm6b9w000n1giyvhf7999a","_id":"ciugm6ba5000y1giye7m3jvw0"},{"post_id":"ciugm6b9d000b1giyj8l39eho","category_id":"ciugm6b9w000n1giyvhf7999a","_id":"ciugm6ba900131giyp9lq90gu"},{"post_id":"ciugm6ba0000s1giy3ru6z8w4","category_id":"ciugm6b9w000n1giyvhf7999a","_id":"ciugm6baf00161giyc6yoreg8"},{"post_id":"ciugm6ba3000w1giywgey6xvq","category_id":"ciugm6b9w000n1giyvhf7999a","_id":"ciugm6bah00181giy5yaa4r79"},{"post_id":"ciugm6b9r000j1giy0022r9aj","category_id":"ciugm6b9w000n1giyvhf7999a","_id":"ciugm6baj001c1giyzoj25y56"},{"post_id":"ciugm6ba5000z1giykxwkebrp","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bal001f1giycz4sowyj"},{"post_id":"ciugm6baa00141giy0qwq85o9","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bap001i1giy5i0orni8"},{"post_id":"ciugm6b9u000m1giy383dy3s4","category_id":"ciugm6b9w000n1giyvhf7999a","_id":"ciugm6bas001l1giy0ac5ox9l"},{"post_id":"ciugm6baf00171giyfeh5wsht","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bav001p1giyk4zzaqvl"},{"post_id":"ciugm6bai001a1giylbqyvfiz","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bax001s1giyplievtij"},{"post_id":"ciugm6bak001d1giy87ypfilv","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bb1001w1giy259h2t2z"},{"post_id":"ciugm6bam001g1giyj85k8z0j","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bb5001z1giyb20wfvc6"},{"post_id":"ciugm6bax001t1giyk9s5uim0","category_id":"ciugm6bav001o1giyfkdmzllm","_id":"ciugm6bba00211giykk803i0o"},{"post_id":"ciugm6baq001k1giyq016ap9w","category_id":"ciugm6bav001o1giyfkdmzllm","_id":"ciugm6bbd00261giyrgkjscqt"},{"post_id":"ciugm6bb1001x1giy4ttb0kby","category_id":"ciugm6bav001o1giyfkdmzllm","_id":"ciugm6bbe00291giyh5fexzin"},{"post_id":"ciugm6bat001m1giykaq700q0","category_id":"ciugm6bav001o1giyfkdmzllm","_id":"ciugm6bbg002d1giy2gnrh189"},{"post_id":"ciugm6bbb00231giyno6yn8xt","category_id":"ciugm6bav001o1giyfkdmzllm","_id":"ciugm6bbh002f1giyt2jnm557"},{"post_id":"ciugm6bav001q1giy8wuskadu","category_id":"ciugm6bav001o1giyfkdmzllm","_id":"ciugm6bbk002j1giypprg4jsk"},{"post_id":"ciugm6bbe002a1giyk0hvk5fa","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bbn002l1giya5z1exzm"},{"post_id":"ciugm6bbg002e1giy38f6qkaf","category_id":"ciugm6bav001o1giyfkdmzllm","_id":"ciugm6bbp002p1giy95nj1ymn"},{"post_id":"ciugm6bb500201giygk0ouagg","category_id":"ciugm6bbf002b1giy8cmg6wkz","_id":"ciugm6bbr002s1giym2mcqes8"},{"post_id":"ciugm6bbd00271giylfvjjjus","category_id":"ciugm6bbj002h1giyuip7xtdc","_id":"ciugm6bbs002w1giyal0ekv89"},{"post_id":"ciugm6bbp002q1giyibspzfep","category_id":"ciugm6b9a00091giydewfb77n","_id":"ciugm6bbs002y1giyejsj6k6t"},{"post_id":"ciugm6bbh002g1giyvdoi62se","category_id":"ciugm6bbo002n1giyuab09faf","_id":"ciugm6bbt002z1giytk99ys2w"},{"post_id":"ciugm6bbk002k1giypg86fkof","category_id":"ciugm6bbs002v1giyzcmhpkne","_id":"ciugm6bbu00321giyq3t4nqod"},{"post_id":"ciugm6bbn002m1giybyut2d8k","category_id":"ciugm6bbt00311giylt3g6bem","_id":"ciugm6bbu00361giyihx9iymg"}],"PostTag":[{"post_id":"ciugm6b9i000f1giyx95jynyb","tag_id":"ciugm6b9c000a1giyfwrzjlm9","_id":"ciugm6b9u000k1giyj23g2xu0"},{"post_id":"ciugm6b8z00051giyxpt5gljd","tag_id":"ciugm6b9c000a1giyfwrzjlm9","_id":"ciugm6ba5000x1giyc6el3k75"},{"post_id":"ciugm6b8z00051giyxpt5gljd","tag_id":"ciugm6b9k000h1giy4m7rjkf3","_id":"ciugm6ba800111giyqxbi3jrm"},{"post_id":"ciugm6b8z00051giyxpt5gljd","tag_id":"ciugm6b9x000o1giyhtd4mqsf","_id":"ciugm6bae00151giyh78y1ko5"},{"post_id":"ciugm6b9400071giyqs9r5g5q","tag_id":"ciugm6b9c000a1giyfwrzjlm9","_id":"ciugm6baj001b1giyqxvb0zv9"},{"post_id":"ciugm6b9400071giyqs9r5g5q","tag_id":"ciugm6ba900121giygdkx251l","_id":"ciugm6bal001e1giy9hjon9sk"},{"post_id":"ciugm6b9d000b1giyj8l39eho","tag_id":"ciugm6bai00191giyq2um609g","_id":"ciugm6baq001j1giydo7uuiog"},{"post_id":"ciugm6b9f000d1giyb9c858cy","tag_id":"ciugm6b9c000a1giyfwrzjlm9","_id":"ciugm6baw001r1giy78sh3xo0"},{"post_id":"ciugm6b9f000d1giyb9c858cy","tag_id":"ciugm6bao001h1giyw2wt46j2","_id":"ciugm6bb0001u1giyy3r1j6ml"},{"post_id":"ciugm6b9r000j1giy0022r9aj","tag_id":"ciugm6bav001n1giy24un3mnm","_id":"ciugm6bbd00251giy13bm218w"},{"post_id":"ciugm6b9r000j1giy0022r9aj","tag_id":"ciugm6bb0001v1giy4vnxq5pl","_id":"ciugm6bbe00281giy3ae2zrpj"},{"post_id":"ciugm6b9u000m1giy383dy3s4","tag_id":"ciugm6bba00221giy724b9lxx","_id":"ciugm6bbq002r1giygw3h34ed"},{"post_id":"ciugm6b9u000m1giy383dy3s4","tag_id":"ciugm6bbg002c1giy9rvygsaz","_id":"ciugm6bbr002t1giygw5akg6w"},{"post_id":"ciugm6b9u000m1giy383dy3s4","tag_id":"ciugm6bbj002i1giy3hqgg1og","_id":"ciugm6bbs002x1giy6pcuoagl"},{"post_id":"ciugm6b9y000q1giygwrpc5n5","tag_id":"ciugm6bbg002c1giy9rvygsaz","_id":"ciugm6bbu00341giytheqgp9v"},{"post_id":"ciugm6b9y000q1giygwrpc5n5","tag_id":"ciugm6bbr002u1giyvd28mkyh","_id":"ciugm6bbu00351giy4joezjnm"},{"post_id":"ciugm6b9y000q1giygwrpc5n5","tag_id":"ciugm6bbt00301giy6yl79d8e","_id":"ciugm6bbv00381giyb7n6hoyf"},{"post_id":"ciugm6ba0000s1giy3ru6z8w4","tag_id":"ciugm6bbg002c1giy9rvygsaz","_id":"ciugm6bbw003b1giyjkhnwwrp"},{"post_id":"ciugm6ba0000s1giy3ru6z8w4","tag_id":"ciugm6bbr002u1giyvd28mkyh","_id":"ciugm6bbw003c1giymef4xhsm"},{"post_id":"ciugm6ba0000s1giy3ru6z8w4","tag_id":"ciugm6bbt00301giy6yl79d8e","_id":"ciugm6bbx003e1giyc53kzzxx"},{"post_id":"ciugm6ba3000w1giywgey6xvq","tag_id":"ciugm6bai00191giyq2um609g","_id":"ciugm6bbx003g1giyfbvzxafv"},{"post_id":"ciugm6ba3000w1giywgey6xvq","tag_id":"ciugm6bbx003d1giy3belemf2","_id":"ciugm6bby003h1giyp0oeessx"},{"post_id":"ciugm6ba5000z1giykxwkebrp","tag_id":"ciugm6bbx003f1giy9mliygyz","_id":"ciugm6bc0003j1giy3fpexzu1"},{"post_id":"ciugm6baa00141giy0qwq85o9","tag_id":"ciugm6bby003i1giyd5sncaib","_id":"ciugm6bc2003n1giyggo7bzi3"},{"post_id":"ciugm6baa00141giy0qwq85o9","tag_id":"ciugm6bc0003k1giyupgm8q2b","_id":"ciugm6bc2003o1giy5mgggc2r"},{"post_id":"ciugm6baa00141giy0qwq85o9","tag_id":"ciugm6bc0003l1giycncdm0wv","_id":"ciugm6bc3003q1giys9eh2f4b"},{"post_id":"ciugm6baf00171giyfeh5wsht","tag_id":"ciugm6bc1003m1giyvd9ie227","_id":"ciugm6bc3003r1giy3nyglbja"},{"post_id":"ciugm6bai001a1giylbqyvfiz","tag_id":"ciugm6bc2003p1giy5zr9n1hu","_id":"ciugm6bc4003v1giyuoxnyc5z"},{"post_id":"ciugm6bai001a1giylbqyvfiz","tag_id":"ciugm6bc3003s1giytu9iacpg","_id":"ciugm6bc5003w1giyqes5k9ml"},{"post_id":"ciugm6bai001a1giylbqyvfiz","tag_id":"ciugm6bc4003t1giyc6x4a0aq","_id":"ciugm6bc5003y1giyqqqeq5w5"},{"post_id":"ciugm6bak001d1giy87ypfilv","tag_id":"ciugm6bc4003u1giyfijcg9la","_id":"ciugm6bc5003z1giypar8nyva"},{"post_id":"ciugm6bam001g1giyj85k8z0j","tag_id":"ciugm6bc5003x1giylsn6xiph","_id":"ciugm6bc600421giyrq98uhde"},{"post_id":"ciugm6bam001g1giyj85k8z0j","tag_id":"ciugm6bc500401giybthzkthk","_id":"ciugm6bc600431giyo6xqm5ci"},{"post_id":"ciugm6baq001k1giyq016ap9w","tag_id":"ciugm6bc600411giyzh60z1qz","_id":"ciugm6bc600451giyw7f4zw0e"},{"post_id":"ciugm6bat001m1giykaq700q0","tag_id":"ciugm6bc600441giyuzfht62p","_id":"ciugm6bc700481giymvaxp2ou"},{"post_id":"ciugm6bat001m1giykaq700q0","tag_id":"ciugm6bc700461giyo7t4rf4g","_id":"ciugm6bc700491giye5q4b05k"},{"post_id":"ciugm6bav001q1giy8wuskadu","tag_id":"ciugm6bc700471giyvg9i8z52","_id":"ciugm6bc9004e1giyw8ynenf3"},{"post_id":"ciugm6bav001q1giy8wuskadu","tag_id":"ciugm6bc7004a1giy8bp8gsoq","_id":"ciugm6bc9004f1giyl7putcv6"},{"post_id":"ciugm6bav001q1giy8wuskadu","tag_id":"ciugm6bc8004b1giya8rf7rog","_id":"ciugm6bc9004h1giysgghbkuq"},{"post_id":"ciugm6bav001q1giy8wuskadu","tag_id":"ciugm6bc8004c1giyrnph5c6i","_id":"ciugm6bc9004i1giydxh4h90i"},{"post_id":"ciugm6bax001t1giyk9s5uim0","tag_id":"ciugm6bc8004d1giysdogmr7o","_id":"ciugm6bc9004k1giy2ic3qn7y"},{"post_id":"ciugm6bb1001x1giy4ttb0kby","tag_id":"ciugm6bc9004g1giy6nf0s0m6","_id":"ciugm6bcb004n1giy1hf4931d"},{"post_id":"ciugm6bb1001x1giy4ttb0kby","tag_id":"ciugm6bc9004j1giykmta1cy2","_id":"ciugm6bcb004o1giylqwfmvin"},{"post_id":"ciugm6bb1001x1giy4ttb0kby","tag_id":"ciugm6bca004l1giyiot475yg","_id":"ciugm6bcb004q1giyfu2ezf45"},{"post_id":"ciugm6bb500201giygk0ouagg","tag_id":"ciugm6bca004m1giyr74ylh2r","_id":"ciugm6bcd004t1giycjxif4ec"},{"post_id":"ciugm6bb500201giygk0ouagg","tag_id":"ciugm6bcb004p1giytj89s91z","_id":"ciugm6bcd004u1giyrhcew4dn"},{"post_id":"ciugm6bb500201giygk0ouagg","tag_id":"ciugm6bcc004r1giybn6ammtd","_id":"ciugm6bcd004w1giy38cjp85u"},{"post_id":"ciugm6bbb00231giyno6yn8xt","tag_id":"ciugm6bc8004b1giya8rf7rog","_id":"ciugm6bce004y1giyjlz1jbkx"},{"post_id":"ciugm6bbb00231giyno6yn8xt","tag_id":"ciugm6bcd004v1giym6k6pbix","_id":"ciugm6bce004z1giy2u807zu9"},{"post_id":"ciugm6bbd00271giylfvjjjus","tag_id":"ciugm6bcd004x1giy6b41mhf2","_id":"ciugm6bcf00521giyhjnmlm1b"},{"post_id":"ciugm6bbd00271giylfvjjjus","tag_id":"ciugm6bbr002u1giyvd28mkyh","_id":"ciugm6bcf00531giy0ry1wjmd"},{"post_id":"ciugm6bbe002a1giyk0hvk5fa","tag_id":"ciugm6bce00511giyi3bzfv46","_id":"ciugm6bch00571giy1aqh8sw3"},{"post_id":"ciugm6bbe002a1giyk0hvk5fa","tag_id":"ciugm6bcf00541giyiyciulmv","_id":"ciugm6bch00581giygurc6b9s"},{"post_id":"ciugm6bbe002a1giyk0hvk5fa","tag_id":"ciugm6bcf00551giy12wb40yh","_id":"ciugm6bcp005a1giyj907319t"},{"post_id":"ciugm6bbg002e1giy38f6qkaf","tag_id":"ciugm6bcg00561giylwcjj1as","_id":"ciugm6bcq005b1giy5v1gsa92"},{"post_id":"ciugm6bbh002g1giyvdoi62se","tag_id":"ciugm6bcp00591giyrewmpkvw","_id":"ciugm6bcr005e1giyzl0wl053"},{"post_id":"ciugm6bbh002g1giyvdoi62se","tag_id":"ciugm6bcq005c1giyrkn5nu2u","_id":"ciugm6bcr005f1giyltf6xw0a"},{"post_id":"ciugm6bbk002k1giypg86fkof","tag_id":"ciugm6bcr005d1giyrmuhfvnj","_id":"ciugm6bct005k1giywyqx4pnb"},{"post_id":"ciugm6bbk002k1giypg86fkof","tag_id":"ciugm6bcr005g1giyw9ah631i","_id":"ciugm6bct005l1giy72x4a3y7"},{"post_id":"ciugm6bbk002k1giypg86fkof","tag_id":"ciugm6bcs005h1giyfijpf6qm","_id":"ciugm6bct005n1giyyth8aabj"},{"post_id":"ciugm6bbk002k1giypg86fkof","tag_id":"ciugm6bcs005i1giy8zm643eq","_id":"ciugm6bct005o1giy35mzw7vl"},{"post_id":"ciugm6bbn002m1giybyut2d8k","tag_id":"ciugm6bcs005j1giys6x4j6oe","_id":"ciugm6bcu005r1giyx8122pj9"},{"post_id":"ciugm6bbn002m1giybyut2d8k","tag_id":"ciugm6bct005m1giyadpx7vkd","_id":"ciugm6bcu005s1giy4j3hwh44"},{"post_id":"ciugm6bbn002m1giybyut2d8k","tag_id":"ciugm6bct005p1giy4j17avqa","_id":"ciugm6bcu005t1giym5mlrx5o"},{"post_id":"ciugm6bbp002q1giyibspzfep","tag_id":"ciugm6bbg002c1giy9rvygsaz","_id":"ciugm6bcu005u1giyrhpx7tlm"},{"post_id":"ciugm6bbp002q1giyibspzfep","tag_id":"ciugm6bcu005q1giyj526826f","_id":"ciugm6bcv005v1giyl3wqxvks"}],"Tag":[{"name":"Material Design","_id":"ciugm6b9c000a1giyfwrzjlm9"},{"name":"EditText","_id":"ciugm6b9k000h1giy4m7rjkf3"},{"name":"Floating Lables","_id":"ciugm6b9x000o1giyhtd4mqsf"},{"name":"TabLayout","_id":"ciugm6ba900121giygdkx251l"},{"name":"Android Studio2.2","_id":"ciugm6bai00191giyq2um609g"},{"name":"Snackbar","_id":"ciugm6bao001h1giyw2wt46j2"},{"name":"Instant Run","_id":"ciugm6bav001n1giy24un3mnm"},{"name":"Enable ADB integration","_id":"ciugm6bb0001v1giy4vnxq5pl"},{"name":"Intellij IDEA","_id":"ciugm6bba00221giy724b9lxx"},{"name":"Android Studio","_id":"ciugm6bbg002c1giy9rvygsaz"},{"name":"plugin","_id":"ciugm6bbj002i1giy3hqgg1og"},{"name":"快捷键","_id":"ciugm6bbr002u1giyvd28mkyh"},{"name":"tips of the Day","_id":"ciugm6bbt00301giy6yl79d8e"},{"name":"xxx-stripped.ap_","_id":"ciugm6bbx003d1giy3belemf2"},{"name":"Log","_id":"ciugm6bbx003f1giy9mliygyz"},{"name":"ButterKnife","_id":"ciugm6bby003i1giyd5sncaib"},{"name":"InjectView","_id":"ciugm6bc0003k1giyupgm8q2b"},{"name":"annotation","_id":"ciugm6bc0003l1giycncdm0wv"},{"name":"Matrix","_id":"ciugm6bc1003m1giyvd9ie227"},{"name":"fastboot","_id":"ciugm6bc2003p1giy5zr9n1hu"},{"name":"adb","_id":"ciugm6bc3003s1giytu9iacpg"},{"name":"bootloader","_id":"ciugm6bc4003t1giyc6x4a0aq"},{"name":"沉浸式状态栏","_id":"ciugm6bc4003u1giyfijcg9la"},{"name":"卡刷","_id":"ciugm6bc5003x1giylsn6xiph"},{"name":"线刷","_id":"ciugm6bc500401giybthzkthk"},{"name":"http协议","_id":"ciugm6bc600411giyzh60z1qz"},{"name":"HashTable","_id":"ciugm6bc600441giyuzfht62p"},{"name":"HashMap","_id":"ciugm6bc700461giyo7t4rf4g"},{"name":"动态绑定","_id":"ciugm6bc700471giyvg9i8z52"},{"name":"静态绑定","_id":"ciugm6bc7004a1giy8bp8gsoq"},{"name":"重载","_id":"ciugm6bc8004b1giya8rf7rog"},{"name":"重写","_id":"ciugm6bc8004c1giyrnph5c6i"},{"name":"synchronized","_id":"ciugm6bc8004d1giysdogmr7o"},{"name":"类初始化","_id":"ciugm6bc9004g1giy6nf0s0m6"},{"name":"虚拟机","_id":"ciugm6bc9004j1giykmta1cy2"},{"name":"Java","_id":"ciugm6bca004l1giyiot475yg"},{"name":"Parcelable","_id":"ciugm6bca004m1giyr74ylh2r"},{"name":"Serializable","_id":"ciugm6bcb004p1giytj89s91z"},{"name":"序列化","_id":"ciugm6bcc004r1giybn6ammtd"},{"name":"java","_id":"ciugm6bcd004v1giym6k6pbix"},{"name":"Win10","_id":"ciugm6bcd004x1giy6b41mhf2"},{"name":"getDimension","_id":"ciugm6bce00511giyi3bzfv46"},{"name":"getDimensionPixelOffset","_id":"ciugm6bcf00541giyiyciulmv"},{"name":"getDimensionPixelSize","_id":"ciugm6bcf00551giy12wb40yh"},{"name":"openjdk","_id":"ciugm6bcg00561giylwcjj1as"},{"name":"bat","_id":"ciugm6bcp00591giyrewmpkvw"},{"name":"批处理文件","_id":"ciugm6bcq005c1giyrkn5nu2u"},{"name":"Markdown","_id":"ciugm6bcr005d1giyrmuhfvnj"},{"name":"马克飞象","_id":"ciugm6bcr005g1giyw9ah631i"},{"name":"MarkdownPad","_id":"ciugm6bcs005h1giyfijpf6qm"},{"name":"MarkdownX","_id":"ciugm6bcs005i1giy8zm643eq"},{"name":"hexo","_id":"ciugm6bcs005j1giys6x4j6oe"},{"name":"swiftype","_id":"ciugm6bct005m1giyadpx7vkd"},{"name":"pacman","_id":"ciugm6bct005p1giy4j17avqa"},{"name":"Terminal","_id":"ciugm6bcu005q1giyj526826f"}]}}