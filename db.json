{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":1},{"_id":"themes/pacman/source/img/pacman.jpg","path":"img/pacman.jpg","modified":1},{"_id":"themes/pacman/source/img/logo.svg","path":"img/logo.svg","modified":1},{"_id":"themes/pacman/source/img/logo.png","path":"img/logo.png","modified":1},{"_id":"themes/pacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1},{"_id":"themes/pacman/source/img/author.png","path":"img/author.png","modified":1},{"_id":"themes/pacman/source/img/author.jpg","path":"img/author.jpg","modified":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1},{"_id":"themes/pacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/pacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/pacman/source/css/style.styl","path":"css/style.styl","modified":1}],"Cache":[{"_id":"source/CNAME","shasum":"1828d00adc09512a7927e0709b81f19da9ac2b9f","modified":1447640720552},{"_id":"source/_posts/Java中静态绑定和动态绑定.md","shasum":"e43238a52eac96104347e10a9cccf1c0f2d0ffd9","modified":1448361354095},{"_id":"source/_posts/Java重载匹配优先级.md","shasum":"613640edecc2438b6864750b097e71f02c332678","modified":1448359147532},{"_id":"source/_posts/Win10-快捷键之Win组合键.md","shasum":"20e807c300b37e9bacc3e0ac429f10192bf1f7ff","modified":1448504144090},{"_id":"source/_posts/关于Android-Log小记.md","shasum":"bbc1a3541dbb7adf2e695ab2306a23ef706e8be6","modified":1447898604660},{"_id":"source/_posts/推荐-Markdown编辑器.md","shasum":"5b5b50150b11d709dfe1e86508eba077f26e1360","modified":1448358721173},{"_id":"source/_posts/简单实现ButterKnife中的injectView的方案.md","shasum":"df5a04ae9210b7b48fd8163c5193384e7fb1f78a","modified":1447830207728},{"_id":"source/_posts/解决Android-Studio中Terminal无法输入的问题.md","shasum":"2891086103fb87301e16174afd9232dc2392bbb8","modified":1447830176617},{"_id":"source/_posts/通过Swiftype实现hexo站内搜索.md","shasum":"4466c5364dbd1b6f44862c6cac105b9778189b6b","modified":1448617847419},{"_id":"source/about/index.md","shasum":"2d8bc940d3f1de67041e8533410c7f83286ec903","modified":1447829118775},{"_id":"source/baidu_verify_T1QaggfO1O.html","shasum":"f951231d14f6dfa523c6e9bc3c7e56e6c8042a10","modified":1447996265411},{"_id":"source/categories/index.md","shasum":"f6b05f97bed3a2acfbe0287536d3902991748c58","modified":1447828912244},{"_id":"source/googlea507cc85570ed219.html","shasum":"cae5407e2244783ec3832bfcbfc808701df0e523","modified":1447657076548},{"_id":"source/search/index.md","shasum":"08a7a258d4f15d5a8ca5e16404235c6b1fe97707","modified":1448422572037},{"_id":"source/tags/index.md","shasum":"a59df0a497bf9f98fe3e6c8d9e9022e1c5795205","modified":1447828961267},{"_id":"themes/pacman/LICENSE","shasum":"4847e5a63399a0ef85af6844fd19a48c69a8869c","modified":1447314597456},{"_id":"themes/pacman/README.md","shasum":"9f0be78dbd1f34f44a955cf02bbe03f979c7a1e6","modified":1447314597456},{"_id":"themes/pacman/_config.yml","shasum":"369f54d2d8b8768f94c7418d1753c499f2c5117d","modified":1448541481638},{"_id":"themes/pacman/languages/default.yml","shasum":"9ffaaf4dbe83f1f343ea702e59493dc6f3f46877","modified":1447314597458},{"_id":"themes/pacman/languages/zh-CN.yml","shasum":"680d877a531f8df04b30b462a5131b5d3a8ca372","modified":1447314597458},{"_id":"themes/pacman/languages/zh-TW.yml","shasum":"08a6eae3c1e48f96690ca4c29ce67f8d6ff9a8bd","modified":1447314597458},{"_id":"themes/pacman/layout/_partial/after_footer.ejs","shasum":"609f21052c290d37f84619480b962684ebc32b66","modified":1448009633905},{"_id":"themes/pacman/layout/_partial/archive.ejs","shasum":"2241d64f001c96cffa4a129ebea177a5421d147d","modified":1447314597460},{"_id":"themes/pacman/layout/_partial/article.ejs","shasum":"8e446ec97c30774807657fc9fb7bceb6905699aa","modified":1448011907202},{"_id":"themes/pacman/layout/_partial/categories.ejs","shasum":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1448423412852},{"_id":"themes/pacman/layout/_partial/footer.ejs","shasum":"8f5fcdefe357db11b2be5b04dc12e09258a98802","modified":1448516328658},{"_id":"themes/pacman/layout/_partial/google_analytics.ejs","shasum":"7ebccafcfdaca5cb5b8f4f06548f1d50958726ef","modified":1447314597461},{"_id":"themes/pacman/layout/_partial/head.ejs","shasum":"f21fc1b1c16498610a44a552d23059d338f34d2a","modified":1447816581728},{"_id":"themes/pacman/layout/_partial/header.ejs","shasum":"3a3c261d2032faf299f820616583bc20fdb25a7f","modified":1448443468328},{"_id":"themes/pacman/layout/_partial/pagination.ejs","shasum":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1447314597462},{"_id":"themes/pacman/layout/_partial/post/article.ejs","shasum":"d6f989cf2be408cb8573629f260c75b20df42982","modified":1447314597463},{"_id":"themes/pacman/layout/_partial/post/catetags.ejs","shasum":"fa03892b35dc344de7a722b9393978286c0376fe","modified":1447314597463},{"_id":"themes/pacman/layout/_partial/post/comment.ejs","shasum":"f0e21c685c0e3fe78c9b5f5f6d4eb9c1b5cf036f","modified":1447314597463},{"_id":"themes/pacman/layout/_partial/post/footer.ejs","shasum":"a4dc14cd47d22f1b73860bc3c7f424eae3d282dd","modified":1447314597464},{"_id":"themes/pacman/layout/_partial/post/gallery.ejs","shasum":"6bd8723f24b192158e6e840bf14028503ad50045","modified":1447314597464},{"_id":"themes/pacman/layout/_partial/post/header.ejs","shasum":"953e6feaf7b156fab79165342e9bca0ef54384ba","modified":1447314597464},{"_id":"themes/pacman/layout/_partial/post/jiathis.ejs","shasum":"5043a5058887cf6ad15182cfde345d36cb6ab323","modified":1447314597465},{"_id":"themes/pacman/layout/_partial/post/pagination.ejs","shasum":"7b2c70d381d6d6f8a55d89180a9bc0f27118812e","modified":1447314597465},{"_id":"themes/pacman/layout/_partial/search.ejs","shasum":"a38eb44269ee7a34b88f5dfd83ffbbdf5766e651","modified":1448443561071},{"_id":"themes/pacman/layout/_partial/sidebar.ejs","shasum":"565979955cecaab9105b23f668aa63bf97e9c20e","modified":1447314597466},{"_id":"themes/pacman/layout/_partial/tags.ejs","shasum":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1447314597466},{"_id":"themes/pacman/layout/_widget/about.ejs","shasum":"296f33a87f1f4e8be4d710c62bfb3f0849813437","modified":1447818846303},{"_id":"themes/pacman/layout/_widget/archive.ejs","shasum":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1447314597467},{"_id":"themes/pacman/layout/_widget/category.ejs","shasum":"ab647b97f55e550af54598dee0c4bb132ef43c46","modified":1447314597467},{"_id":"themes/pacman/layout/_widget/links.ejs","shasum":"0d5ef5c05694fb61020fedffbdebe02cb6361c8d","modified":1447314597467},{"_id":"themes/pacman/layout/_widget/rss.ejs","shasum":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1447314597467},{"_id":"themes/pacman/layout/_widget/swiftype.ejs","shasum":"47128099f278e4798e7fc582d1db15d56bc3487f","modified":1447998948829},{"_id":"themes/pacman/layout/_widget/tag.ejs","shasum":"b994f8c43b190b852568e355944d5af151dcefe6","modified":1447314597468},{"_id":"themes/pacman/layout/_widget/tagcloud.ejs","shasum":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1447314597468},{"_id":"themes/pacman/layout/_widget/weibo.ejs","shasum":"c5ee8b949ef00ddf9de44a8de2acc6aa4ede3205","modified":1447822359089},{"_id":"themes/pacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1447314597468},{"_id":"themes/pacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1447314597468},{"_id":"themes/pacman/layout/index.ejs","shasum":"dc463eb532313dcdddea9c1a0c8f5a35dbd55f6e","modified":1448426765985},{"_id":"themes/pacman/layout/layout.ejs","shasum":"87b543229bec7e77cc0ec68cfdd11f2f33df4a1b","modified":1447816581729},{"_id":"themes/pacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1447314597470},{"_id":"themes/pacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1447314597470},{"_id":"themes/pacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1447314597470},{"_id":"themes/pacman/scripts/fancybox.js","shasum":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1447314597471},{"_id":"themes/pacman/source/css/_base/code.styl","shasum":"577798b3c101be20b7ceb3d1e0421b4c4426d0ce","modified":1447314597472},{"_id":"themes/pacman/source/css/_base/font.styl","shasum":"772749cc7c6a47410bb667f8127b37767d029283","modified":1447314597472},{"_id":"themes/pacman/source/css/_base/public.styl","shasum":"a9d7524315303734f3f47e5e875a14b867888a50","modified":1447314597472},{"_id":"themes/pacman/source/css/_base/variable.styl","shasum":"07e46b4346982e51a5bd498d99976d28628d9f44","modified":1447314597473},{"_id":"themes/pacman/source/css/_partial/article.styl","shasum":"ffc40f735883bea18297dd380ad78ed554c9d5fb","modified":1448011871379},{"_id":"themes/pacman/source/css/_partial/aside.styl","shasum":"ac937e5921c4084f29249819d51224ebc4296225","modified":1447314597474},{"_id":"themes/pacman/source/css/_partial/duoshuo.styl","shasum":"168f950f1abc606a49915afbabd2419d39e6a810","modified":1448516567018},{"_id":"themes/pacman/source/css/_partial/footer.styl","shasum":"3145a38e9681db31d3438bf0d982672ce4c7f548","modified":1447825750087},{"_id":"themes/pacman/source/css/_partial/gallery.styl","shasum":"b85a32c4bc71f720d74143a17a202fe8fa067950","modified":1447314597475},{"_id":"themes/pacman/source/css/_partial/header.styl","shasum":"7d4ef4b2b1916909f8f198519f576c3d712d7423","modified":1447314597476},{"_id":"themes/pacman/source/css/_partial/helper.styl","shasum":"554a7bc576b1419f0055ff56113d4be803b118d1","modified":1447314597476},{"_id":"themes/pacman/source/css/_partial/index.styl","shasum":"a00aafe86d0238bf58f093834b6ae7406e918ec0","modified":1448426771905},{"_id":"themes/pacman/source/css/style.styl","shasum":"f062b8dc5cf05d9dafaac4af8da23bfb4216b3d7","modified":1448446130176},{"_id":"themes/pacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1447314597511},{"_id":"themes/pacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1447314597511},{"_id":"themes/pacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1447314597512},{"_id":"themes/pacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1447314597512},{"_id":"themes/pacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1447314597513},{"_id":"themes/pacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1447314597513},{"_id":"themes/pacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1447314597514},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"6394c48092085788a8c0ef72670b0652006231a1","modified":1447314597514},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1447314597515},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1447314597516},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1447314597516},{"_id":"themes/pacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1447314597516},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.css","shasum":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1447314597517},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.js","shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1447314597518},{"_id":"themes/pacman/source/fancybox/jquery.fancybox.pack.js","shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1447314597518},{"_id":"themes/pacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1447314597520},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1447314597520},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1447314597526},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1447314597527},{"_id":"themes/pacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1447314597529},{"_id":"themes/pacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1447314597538},{"_id":"themes/pacman/source/img/author.jpg","shasum":"78f534fbda5eb4fdb4e4ce01dce0bfc39e2f729d","modified":1447314597540},{"_id":"themes/pacman/source/img/author.png","shasum":"2608cce1be8e075dda21846e90d3634788489ec0","modified":1447762432036},{"_id":"themes/pacman/source/img/favicon.ico","shasum":"b71acc4562c9bd60c3b5ed522232420336699fbe","modified":1447827579498},{"_id":"themes/pacman/source/img/logo.png","shasum":"e66fc88bde29a7f960350bf4fdbe04e2cafcfea4","modified":1448539230338},{"_id":"themes/pacman/source/img/logo.svg","shasum":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb","modified":1447314597542},{"_id":"themes/pacman/source/img/pacman.jpg","shasum":"24ab9294db030f0da4fb3368261c237fc55e9c46","modified":1447827755163},{"_id":"themes/pacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1447314597523},{"_id":"themes/pacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1447314597537},{"_id":"themes/pacman/source/js/jquery-2.1.0.min.js","shasum":"0faaa0c56f563693cdeafa299f97e3d5bd6fcdd8","modified":1447314597546},{"_id":"themes/pacman/source/font/fontawesome-webfont.svg","shasum":"a275426daefd3716c53561fad121d258a7f05b47","modified":1447314597533},{"_id":"public/CNAME","modified":1448617965867,"shasum":"1828d00adc09512a7927e0709b81f19da9ac2b9f"},{"_id":"public/js/jquery-2.1.0.min.js","modified":1448617965873,"shasum":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f"},{"_id":"public/img/pacman.jpg","modified":1448617965877,"shasum":"24ab9294db030f0da4fb3368261c237fc55e9c46"},{"_id":"public/img/logo.svg","modified":1448617965881,"shasum":"cef3f0bb4bf3661dd3a58c81b9a7be79601a0bfb"},{"_id":"public/img/logo.png","modified":1448617965884,"shasum":"e66fc88bde29a7f960350bf4fdbe04e2cafcfea4"},{"_id":"public/img/favicon.ico","modified":1448617965887,"shasum":"b71acc4562c9bd60c3b5ed522232420336699fbe"},{"_id":"public/img/author.png","modified":1448617965890,"shasum":"2608cce1be8e075dda21846e90d3634788489ec0"},{"_id":"public/img/author.jpg","modified":1448617965893,"shasum":"78f534fbda5eb4fdb4e4ce01dce0bfc39e2f729d"},{"_id":"public/font/fontawesome-webfont.woff","modified":1448617965904,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/font/fontawesome-webfont.ttf","modified":1448617965908,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/font/fontawesome-webfont.svg","modified":1448617965915,"shasum":"a275426daefd3716c53561fad121d258a7f05b47"},{"_id":"public/font/fontawesome-webfont.eot","modified":1448617965918,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/font/coveredbyyourgrace-webfont.woff","modified":1448617965921,"shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e"},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","modified":1448617965925,"shasum":"194ccb4acf77a03dc25bcc174edb266143704fec"},{"_id":"public/font/coveredbyyourgrace-webfont.svg","modified":1448617965929,"shasum":"739808e56a56e10a03bc93d03eb55abd19590942"},{"_id":"public/font/coveredbyyourgrace-webfont.eot","modified":1448617965934,"shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de"},{"_id":"public/font/FontAwesome.otf","modified":1448617965937,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1448617965941,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1448617965945,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1448617965949,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1448617965953,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1448617965956,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1448617965958,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1448617965961,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1448617965965,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1448617965968,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1448617965971,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1448617965974,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1448617965979,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1448617965985,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1448617965989,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1448617965994,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1448617966608,"shasum":"3127e76df45ed892ded3e1c2597b33a24ce8bb7d"},{"_id":"public/tags/index.html","modified":1448617966880,"shasum":"0a9f8056ab163b4dc11c633b2428c3666af3375e"},{"_id":"public/search/index.html","modified":1448617966890,"shasum":"d42d4bcc7d8b145fc78f592c0de47f6b09065869"},{"_id":"public/googlea507cc85570ed219.html","modified":1448617966901,"shasum":"3e68b3c763c55d4e27acac9b3ce41a08560a367f"},{"_id":"public/categories/index.html","modified":1448617966909,"shasum":"df0ecffcf3e117c6c1ce9897d523900557901090"},{"_id":"public/baidu_verify_T1QaggfO1O.html","modified":1448617966915,"shasum":"3c3bf3e57436abfb3874bdf64802d83f3af955b5"},{"_id":"public/about/index.html","modified":1448617966921,"shasum":"b49ef288c889435012561afa298462c5e7e807e3"},{"_id":"public/2015/11/25/通过Swiftype实现hexo站内搜索/undefined/index.html","modified":1448617966965,"shasum":"eb1341953c43292567e591e0e3933f6707f8d2fe"},{"_id":"public/2015/11/25/Win10-快捷键之Win组合键/undefined/index.html","modified":1448617966981,"shasum":"5f354590d0fe439f87c8cac5e24bc2136515a129"},{"_id":"public/2015/11/24/推荐-Markdown编辑器/undefined/index.html","modified":1448617966999,"shasum":"5c649bbb24a5dd0a2ba029c486b3d3159a2fbe30"},{"_id":"public/2015/11/24/Java中静态绑定和动态绑定/undefined/index.html","modified":1448617967040,"shasum":"fa65dc0f4ad1c769403b7ccb1353102103d898e5"},{"_id":"public/2015/11/23/Java重载匹配优先级/undefined/index.html","modified":1448617967059,"shasum":"a60183e731872000f9aaad951832f76f98f33548"},{"_id":"public/2015/11/18/关于Android-Log小记/undefined/index.html","modified":1448617967078,"shasum":"70bbc7808655088efc8a7f4bce4a6dc702d8bf79"},{"_id":"public/2015/11/16/解决Android-Studio中Terminal无法输入的问题/undefined/index.html","modified":1448617967090,"shasum":"7727106afefd0ee0664891cdae1e040b529c0976"},{"_id":"public/2015/11/13/简单实现ButterKnife中的injectView的方案/undefined/index.html","modified":1448617967109,"shasum":"a6cebe5d95d764a4f2f2cc7f0147c332a17c9494"},{"_id":"public/archives/index.html","modified":1448617967122,"shasum":"d41639806c5eb38f36e96bda3c198f8531949d00"},{"_id":"public/archives/2015/index.html","modified":1448617967131,"shasum":"7e1a871be6cd80205ae463a8f71de976f4b2c40f"},{"_id":"public/archives/2015/11/index.html","modified":1448617967145,"shasum":"45f80491eb07d4bae5d91db730ebd668ec91570a"},{"_id":"public/categories/Hexo/index.html","modified":1448617967151,"shasum":"be834afba8d530e413fcc3ee032ff0c789060536"},{"_id":"public/categories/Android/index.html","modified":1448617967157,"shasum":"17525995f8c3f9ada7275024848123fcb6ba17e0"},{"_id":"public/categories/Markdown/index.html","modified":1448617967163,"shasum":"b59fcb8a72d5e198a8eb7e7fb03e9be0248e9f56"},{"_id":"public/categories/Win10/index.html","modified":1448617967168,"shasum":"f910297380d1af120e37ad0135d5f38d1edd5b24"},{"_id":"public/categories/Java/index.html","modified":1448617967175,"shasum":"e886861a8d8fb40be444751b5f2746f3f4fed14a"},{"_id":"public/atom.xml","modified":1448617967178,"shasum":"a692d8a7386b38907219b31a136ac2faaed03987"},{"_id":"public/tags/hexo/index.html","modified":1448617967184,"shasum":"91e24b639c5853e7e2ff31555595b873701672bc"},{"_id":"public/tags/swiftype/index.html","modified":1448617967188,"shasum":"319d073790be3372607234e14321f071a7f8dc9b"},{"_id":"public/tags/pacman/index.html","modified":1448617967192,"shasum":"aa718089c9896a595d0fa68b0445f5e31b399a3f"},{"_id":"public/tags/Android-Studio/index.html","modified":1448617967199,"shasum":"e0442d088971f3d6bf9d858170c9d9f432e52b5e"},{"_id":"public/tags/Terminal/index.html","modified":1448617967206,"shasum":"c1dd4236ea6a5c9407d5dbaf125393f7249ed4b9"},{"_id":"public/tags/ButterKnife/index.html","modified":1448617967211,"shasum":"e02b127f10dd6af4d61b67b57df8960cfdfa9d1d"},{"_id":"public/tags/InjectView/index.html","modified":1448617967216,"shasum":"c248cde8bd4c21217756e982d3faa8e7dff44d01"},{"_id":"public/tags/annotation/index.html","modified":1448617967222,"shasum":"eb2e87c2109e9baf55ba5b62b863adcdb4b9153c"},{"_id":"public/tags/Markdown/index.html","modified":1448617967227,"shasum":"1d15c82eb184453e128cab72aeb5a5b073e57781"},{"_id":"public/tags/马克飞象/index.html","modified":1448617967233,"shasum":"6efbf963c9faae2301cb3a15824d4758d2cd3ece"},{"_id":"public/tags/MarkdownPad/index.html","modified":1448617967238,"shasum":"0193b60e9510e83cf2d6632a5c8d7d12f143b730"},{"_id":"public/tags/MarkdownX/index.html","modified":1448617967243,"shasum":"ab6125d2a9ed43dced460a9b2347f9a0e741c74b"},{"_id":"public/tags/Log/index.html","modified":1448617967248,"shasum":"30a25687309d5eb5ef1417abcfb1a113e8374c8e"},{"_id":"public/tags/Win10/index.html","modified":1448617967252,"shasum":"96de7150bfcb812cf8d869c92e67ceeb9f0d7eba"},{"_id":"public/tags/快捷键/index.html","modified":1448617967257,"shasum":"5b8f2259f88f8c97c06e2c80f2222328c98eea6a"},{"_id":"public/tags/重载/index.html","modified":1448617967262,"shasum":"7665b289ff9f7da0f5d09174d4ed99efccc3e6a1"},{"_id":"public/tags/java/index.html","modified":1448617967271,"shasum":"ad0a60b86468deea280dd4325579323c989d61d6"},{"_id":"public/tags/动态绑定/index.html","modified":1448617967276,"shasum":"d124d7c3d21e3dcaefbe2094f43b899caaf3bcaf"},{"_id":"public/tags/静态绑定/index.html","modified":1448617967280,"shasum":"6cadbb4686384e25c410edf345a352e9ca398994"},{"_id":"public/tags/重写/index.html","modified":1448617967285,"shasum":"a453e331e164e393d4d13b8fd987455b1cf5ea24"},{"_id":"public/index.html","modified":1448617967294,"shasum":"f5b47b426edfc3d381416cf5ff13860cd92fb39f"},{"_id":"public/sitemap.xml","modified":1448617967296,"shasum":"a0785a7a58aecc3911730ebda599a447e05039ec"}],"Category":[{"name":"Hexo","_id":"cihhhqfbs0007wsupphao9amk"},{"name":"Android","_id":"cihhhqfc0000gwsup05xkdddf"},{"name":"Markdown","_id":"cihhhqfca000vwsup58ffdrep"},{"name":"Win10","_id":"cihhhqfco001awsup82k23tx9"},{"name":"Java","_id":"cihhhqfcr001hwsupi61wdca1"}],"Data":[],"Page":[{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle: tags\n---","date":"2015-11-18T06:42:41.267Z","updated":"2015-11-18T06:42:41.267Z","path":"tags/index.html","comments":1,"_id":"cihhhqfay0000wsupe47535pa"},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n---","date":"2015-11-25T03:36:12.037Z","updated":"2015-11-25T03:36:12.037Z","path":"search/index.html","comments":1,"_id":"cihhhqfbe0001wsupqzgotjvf"},{"_content":"google-site-verification: googlea507cc85570ed219.html","source":"googlea507cc85570ed219.html","raw":"google-site-verification: googlea507cc85570ed219.html","date":"2015-11-16T06:57:56.548Z","updated":"2015-11-16T06:57:56.548Z","path":"googlea507cc85570ed219.html","title":"","comments":1,"layout":"page","_id":"cihhhqfbg0002wsupmbdfjbsi"},{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n---","date":"2015-11-18T06:41:52.244Z","updated":"2015-11-18T06:41:52.244Z","path":"categories/index.html","comments":1,"_id":"cihhhqfbh0003wsupuminevcb"},{"_content":"T1QaggfO1O","source":"baidu_verify_T1QaggfO1O.html","raw":"T1QaggfO1O","date":"2015-11-20T05:11:10.102Z","updated":"2015-11-20T05:11:05.411Z","path":"baidu_verify_T1QaggfO1O.html","title":"","comments":1,"layout":"page","_id":"cihhhqfbi0004wsupwcazuabf"},{"title":"about","email":"xiaofeng355@sina.com","date":"2015-11-12T11:44:18.000Z","_content":"\n欢迎大家多多交流、学习。\n\n联系方式：\n\temail：xiaofeng355@gmail.com\n\t","source":"about/index.md","raw":"title: about\nemail: xiaofeng355@sina.com\ndate: 2015-11-12 19:44:18\n---\n\n欢迎大家多多交流、学习。\n\n联系方式：\n\temail：xiaofeng355@gmail.com\n\t","updated":"2015-11-18T06:45:18.775Z","path":"about/index.html","comments":1,"layout":"page","_id":"cihhhqfbl0005wsuprkq1s041"}],"Post":[{"title":"通过Swiftype实现hexo站内搜索","date":"2015-11-25T09:30:54.000Z","_content":"hexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。\n\n#### 注册swiftype账号\n官方地址：[https://swiftype.com/](https://swiftype.com/)\n\n#### 创建搜索引擎\n注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;\n1、CREATE AN ENGINE：\n![CREATEANENGINE](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg)\n2、继续点击创建：\n![create](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png)\n3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：\n![enginename](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png)\n4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml\n![sitemap](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png)\n5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：\n![homepage](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png)\n5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：\n![contentdata](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png)\n6、点击上面的INTEGRATE -> INSTALL SEARCH ，进行一些关键的配置：\n![install](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png)\n7、点击CHANGE CONFIGURATION：\n![change](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png)\n8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（**results container** - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。\n![container](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png)\n9、配置**Search field**，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：\n![searchfield](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png)\n \n 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。\n\n#### hexo主题配置（pacman）\n我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。\n\n**1、**首先打开**pacman\\\\_config.yml**文件在末尾添加如下代码，提供对swiftype的支持：\n```\nswift_search:\n  enable: true\n```\n\n**2、** 在**hexo\\source**目录（注意不是pacman主题的source目录）下**新建一个search文件夹**（如果不存在的），在里面**新建一个index.md**，index.md中写入如下代码：\n\n```\nlayout: search\ntitle: search\n---\n```\n**3、** 切换的到**pacman\\layout\\\\_partial**目录下，大部分的代码配置都在这里完成的。先**打开header.ejs**，把\n```\n<li>\n...\n...\n</li>\n\n```\n之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接**copy**过去就行：\n```\n<% if\t(theme.swift_search&&theme.swift_search.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" class=\"st-default-search-input\" maxlength=\"20\" placeholder=\"Search\" />\n\t</form>\n\t\n\t<% }else if\t(theme.google_cse&&theme.google_cse.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" autocomplete=\"off\" name=\"q\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t</form>\n\t\n\t<% } else { %>\n\t<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" name=\"q\" autocomplete=\"off\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t<input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n\t</form>\n\t<% } %>\n```\n\n**4、**将原来的**search.ejs**中的代码**清空**，**替换为以下的代码**，其实主要就是为了控制结果的显示样式（后期可以自己调整），**注意：将最下面的` <script ...   >  ... ` 部分替换成swiftype给你的js代码**。\n```\n<% if(theme.swift_search.enable) { %>\n<div  id=\"container\" class=\"page\">\n  <div id=\"st-results-container\" class=\"st-search-container\" style=\"width:80%\">正在加载搜索结果，请稍等。</div>\n  <style>.st-result-text {\n  background: #fafafa;\n  display: block;\n  border-left: 0.5em solid #ccc;\n  -webkit-transition: border-left 0.45s;\n  -moz-transition: border-left 0.45s;\n  -o-transition: border-left 0.45s;\n  -ms-transition: border-left 0.45s;\n  transition: border-left 0.45s;\n  padding: 0.5em;\n}\n@media only screen and (min-width: 768px) {\n  .st-result-text {\n    padding: 1em;\n  }\n}\n.st-result-text:hover {\n  border-left: 0.5em solid #ea6753;\n}\n.st-result-text h3 a{\n  color: #2ca6cb;\n  line-height: 1.5;\n  font-size: 22px;\n}\n.st-snippet em {\n  font-weight: bold;\n  color: #ea6753;\n}</style>\n\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n\n<% } %>\n\n```\n**5、**打开**footer.ejs或header.ejs**，在最后一个标签（`</div>`）之前添加swiftype分配给你的js代码（同上），我的是：\n```\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n```\n\n到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：\n```\n> hexo clean\n> hexo d -g\n```\n等部署完成，你就可以打开你的Blog任性的搜索了\n\n#### 推荐\n这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，[点我跳转.](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)","source":"_posts/通过Swiftype实现hexo站内搜索.md","raw":"title: 通过Swiftype实现hexo站内搜索\ndate: 2015-11-25 17:30:54\ncategories: [Hexo]\ntags: [hexo, swiftype, pacman]\n---\nhexo默认提供的是google的搜索，但是国内很蛋疼，无意中了解到swiftype效果不错，之前也看了一些方法不是很凑效，无奈自己研究了一下，可以正常使用了，这里就把方法share给大家，下面就直接进入正题吧。\n\n#### 注册swiftype账号\n官方地址：[https://swiftype.com/](https://swiftype.com/)\n\n#### 创建搜索引擎\n注册完账号，接下来就是创建搜索引擎了，这里都是以图片引导，关键步骤都有;\n1、CREATE AN ENGINE：\n![CREATEANENGINE](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftfirst.jpg)\n2、继续点击创建：\n![create](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftcreate.png)\n3、填写自己的域名，不带最后的反斜杠，点击VERIFY，4个验证项，通过之后会让你输入引擎的名字：\n![enginename](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/switysetname.png)\n4、接下来是让你配置sitemap（关于sitemap自行搜索教程），地址统一是：域名/sitemap.xml\n![sitemap](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftaddsitemap.png)\n5.1、点击COMPLETE SETUP，创建完成，会进入到如下界面，这里提供的代码就是需要在hexo配置的：\n![homepage](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallcode.png)\n5.2、向下滚动，可以点击content 查看自己的哪些数据被抓取出来了，跳转后页面右侧而且还可以测试搜索功能：\n![contentdata](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swifttextdata.png)\n6、点击上面的INTEGRATE -> INSTALL SEARCH ，进行一些关键的配置：\n![install](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftinstallbutton.png)\n7、点击CHANGE CONFIGURATION：\n![change](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftchangeconfig.png)\n8、进行一些更详细的配置，4个部分，样式默认就好，也可以自己选，这里就说下面两个部分（**results container** - 搜索结果页），我使用的是默认的，本页面底部有自定义搜索页的案例。\n![container](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftresultcontaner.png)\n9、配置**Search field**，这个就是搜索框-input的相关配置了，hexo主题默认就有，而且swiftype提供的SEARCH FIELD都是一样的input标签：\n![searchfield](http://7xod2d.com1.z0.glb.clouddn.com/swiftype/swiftsearchfield.png)\n \n 如果都保持默认设置的话，完成到步骤5.1就可以看下面的教程了。\n\n#### hexo主题配置（pacman）\n我的主题是Pacman的，这里就以pacman为例，其实没有本质的区别，大部分都是在主题目录的文件。\n\n**1、**首先打开**pacman\\\\_config.yml**文件在末尾添加如下代码，提供对swiftype的支持：\n```\nswift_search:\n  enable: true\n```\n\n**2、** 在**hexo\\source**目录（注意不是pacman主题的source目录）下**新建一个search文件夹**（如果不存在的），在里面**新建一个index.md**，index.md中写入如下代码：\n\n```\nlayout: search\ntitle: search\n---\n```\n**3、** 切换的到**pacman\\layout\\\\_partial**目录下，大部分的代码配置都在这里完成的。先**打开header.ejs**，把\n```\n<li>\n...\n...\n</li>\n\n```\n之间的代码清空（我的默认是google的搜索，这里再添加上swftype的搜索，也就是第一个if部分），整合代码如下，直接**copy**过去就行：\n```\n<% if\t(theme.swift_search&&theme.swift_search.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" class=\"st-default-search-input\" maxlength=\"20\" placeholder=\"Search\" />\n\t</form>\n\t\n\t<% }else if\t(theme.google_cse&&theme.google_cse.enable){ %>\n\t<form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" autocomplete=\"off\" name=\"q\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t</form>\n\t\n\t<% } else { %>\n\t<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n\t<label>Search</label>\n\t<input type=\"text\" id=\"search\" name=\"q\" autocomplete=\"off\" maxlength=\"20\" placeholder=\"<%= __('search') %>\" />\n\t<input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n\t</form>\n\t<% } %>\n```\n\n**4、**将原来的**search.ejs**中的代码**清空**，**替换为以下的代码**，其实主要就是为了控制结果的显示样式（后期可以自己调整），**注意：将最下面的` <script ...   >  ... ` 部分替换成swiftype给你的js代码**。\n```\n<% if(theme.swift_search.enable) { %>\n<div  id=\"container\" class=\"page\">\n  <div id=\"st-results-container\" class=\"st-search-container\" style=\"width:80%\">正在加载搜索结果，请稍等。</div>\n  <style>.st-result-text {\n  background: #fafafa;\n  display: block;\n  border-left: 0.5em solid #ccc;\n  -webkit-transition: border-left 0.45s;\n  -moz-transition: border-left 0.45s;\n  -o-transition: border-left 0.45s;\n  -ms-transition: border-left 0.45s;\n  transition: border-left 0.45s;\n  padding: 0.5em;\n}\n@media only screen and (min-width: 768px) {\n  .st-result-text {\n    padding: 1em;\n  }\n}\n.st-result-text:hover {\n  border-left: 0.5em solid #ea6753;\n}\n.st-result-text h3 a{\n  color: #2ca6cb;\n  line-height: 1.5;\n  font-size: 22px;\n}\n.st-snippet em {\n  font-weight: bold;\n  color: #ea6753;\n}</style>\n\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n\n<% } %>\n\n```\n**5、**打开**footer.ejs或header.ejs**，在最后一个标签（`</div>`）之前添加swiftype分配给你的js代码（同上），我的是：\n```\n<script type=\"text/javascript\">\n  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){\n  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);\n  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);\n  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');\n\n  _st('install','w7ca3xWstLkz2UvAeyAJ','2.0.0');\n</script>\n```\n\n到这里所有的修改都已经完成了，如果没有问题的话，命令行执行：\n```\n> hexo clean\n> hexo d -g\n```\n等部署完成，你就可以打开你的Blog任性的搜索了\n\n#### 推荐\n这里推荐一篇其他大神的Blog，可以自定义搜索结果页面，[点我跳转.](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)","slug":"通过Swiftype实现hexo站内搜索","published":1,"updated":"2015-11-27T09:50:47.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfbn0006wsup2lxw0j92"},{"title":"解决Android Studio中Terminal无法输入的问题","date":"2015-11-16T02:14:09.000Z","_content":"### 问题描述：\n```\nWindows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。\n```\n### 问题原因：\n这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非\n常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于\nC:\\Windows\\System32\\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导\n致了这里描述的问题。\n\n### 解决方案：\n下面给出具体的操作步骤，有图有真相：\n\n1、win+R组合键打开运行窗口，输入cmd ，点击OK\n\n![cmd窗口](http://7xod2d.com1.z0.glb.clouddn.com/cmd.png)\n\n2、在出现的cmd窗口中，右键点击标题栏->Properties，出现如下窗口：\n\n![Properties窗口](http://7xod2d.com1.z0.glb.clouddn.com/settings.png)\n\n3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！\n","source":"_posts/解决Android-Studio中Terminal无法输入的问题.md","raw":"title: 解决Android Studio中Terminal无法输入的问题\ntags: [Android Studio, Terminal]\ndate: 2015-11-16 10:14:09\ncategories: [Android]\n---\n### 问题描述：\n```\nWindows系统下Android Studio中的Terminal无法获取焦点，不能输入文字。\n```\n### 问题原因：\n这个是因为系统升级造成的不兼容问题，在Windows环境开发的朋友们估计早早的就升级Win10了吧，UI非\n常的炫酷。然而AS中的Terminal使用的还是Windows中的cmd控制台，也就是位于\nC:\\Windows\\System32\\目录下的cmd.exe。Win10下的cmd相对于早期版本的cmd做了一些改进，导\n致了这里描述的问题。\n\n### 解决方案：\n下面给出具体的操作步骤，有图有真相：\n\n1、win+R组合键打开运行窗口，输入cmd ，点击OK\n\n![cmd窗口](http://7xod2d.com1.z0.glb.clouddn.com/cmd.png)\n\n2、在出现的cmd窗口中，右键点击标题栏->Properties，出现如下窗口：\n\n![Properties窗口](http://7xod2d.com1.z0.glb.clouddn.com/settings.png)\n\n3、勾选 Use legacy console（requires relaunch）即使用旧版控制台（需要重启生效），就这么简单的操作就可以解决问题了，赶快试试吧！\n","slug":"解决Android-Studio中Terminal无法输入的问题","published":1,"updated":"2015-11-18T07:02:56.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfby000fwsupimw4emfw"},{"title":"简单实现ButterKnife中的injectView的方案","date":"2015-11-13T01:37:14.000Z","_content":"首先说这里面用的知识点，注解、反射。\n\nAndroid中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。\n\n<!--more-->\n\n## 1、注解声明\n``` bash\n\n// 表示用在字段上\n@Target(ElementType.FIELD)\n// 表示在生命周期是运行时\n@Retention(RetentionPolicy.RUNTIME)\n//注解类，实现findViewById功能\npublic @interface FindView {\n\tint findViewByResId() default 0;\n}\n\n```\n\n## 2、反射注入\n``` bash\n\nClass<?> clazz = this.getClass();\n// 获得Activity中声明的字段\nField[] fields = clazz.getDeclaredFields();\n//遍历所有字段\nfor (Field field : fields) {\n// 是否有我们自定义的注解类标志\n  if (field.isAnnotationPresent(FindView.class)) {\n  \t   FindView inject = field.getAnnotation(FindView.class);\n      int mId = inject.findViewByResId();\n      View view;\n      if (mId > 0) {\n          view = findViewById(mId);\n          field.setAccessible(true);\n          field.set(this, view);// 给我们要找的字段设置值\n      }\n\t}\n}\n\n```\n## 3、测试\n``` bash\n\n@FindView(findViewByResId = R.id.id_text)\nprivate TextView mText;\n\n```\n\n总结：\n是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。\n个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。","source":"_posts/简单实现ButterKnife中的injectView的方案.md","raw":"title: 简单实现ButterKnife中的injectView的方案\ntags: [ButterKnife, InjectView, annotation]\ndate: 2015-11-13 09:37:14\ncategories: [Android]\n---\n首先说这里面用的知识点，注解、反射。\n\nAndroid中findViewById(int resId)接受一个int的id参数，即通过资源id就可以找到对应的View。通过注解(annotation),我们可以资源id声明在对应的field上面，通过Java的反射，遍历每个field，找到对应的id，就可以初始化这个field（即view）。\n\n<!--more-->\n\n## 1、注解声明\n``` bash\n\n// 表示用在字段上\n@Target(ElementType.FIELD)\n// 表示在生命周期是运行时\n@Retention(RetentionPolicy.RUNTIME)\n//注解类，实现findViewById功能\npublic @interface FindView {\n\tint findViewByResId() default 0;\n}\n\n```\n\n## 2、反射注入\n``` bash\n\nClass<?> clazz = this.getClass();\n// 获得Activity中声明的字段\nField[] fields = clazz.getDeclaredFields();\n//遍历所有字段\nfor (Field field : fields) {\n// 是否有我们自定义的注解类标志\n  if (field.isAnnotationPresent(FindView.class)) {\n  \t   FindView inject = field.getAnnotation(FindView.class);\n      int mId = inject.findViewByResId();\n      View view;\n      if (mId > 0) {\n          view = findViewById(mId);\n          field.setAccessible(true);\n          field.set(this, view);// 给我们要找的字段设置值\n      }\n\t}\n}\n\n```\n## 3、测试\n``` bash\n\n@FindView(findViewByResId = R.id.id_text)\nprivate TextView mText;\n\n```\n\n总结：\n是不是很简单，这算是一个入门，接下来大家可以好好利用这种原理，实现不一样的功能了。\n个人觉得这个不是特别好，每次都要通过反射来初始化，大家还是结合自己的开发环境酌情使用。","slug":"简单实现ButterKnife中的injectView的方案","published":1,"updated":"2015-11-18T07:03:27.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfc3000mwsup0vamak05"},{"title":"[推荐]Markdown编辑器(PC+手机端)","date":"2015-11-24T07:14:12.000Z","_content":"### 开篇\n相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：\n![gitbub-readme](http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png)\n上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。\n### 在线编辑器 - 马克飞象\n官方地址：[点我跳转](https://maxiang.io/)\n这是一个在线的编辑器，它的效果实在是太炫酷了，第一次进去会有一个示例页面，这里的语法足够日后使用了，直接上图：\n![markfeixiang](http://7xod2d.com1.z0.glb.clouddn.com/markfeixiang.png)\n\n### Windows - MarkdownPad\n官网地址：[点我跳转](http://markdownpad.com/)\n官方描述：**MarkdownPad is a full-featured Markdown editor for Windows.**\n这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。\n![markdownpad](http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png)\n\n### Gmail - Markdown Here\n这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了\nChrome扩展插件：\n![chromeplugin](http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png)\n编辑gmail邮件：\n![gmailediter](http://7xod2d.com1.z0.glb.clouddn.com/email-before.png)\ngmail的预览，点击图一插件按钮即可看到图二预览效果：\n![gmailpluginbutton](http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png)\n![gmailpreview](http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png)\n\n### Android - MarkdownX\n在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。\n下图来自google play：\n![markdownx](http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png)\n\n这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。","source":"_posts/推荐-Markdown编辑器.md","raw":"title: '[推荐]Markdown编辑器(PC+手机端)'\ndate: 2015-11-24 15:14:12\ncategories: [Markdown]\ntags: [Markdown, 马克飞象, MarkdownPad, MarkdownX]\n---\n### 开篇\n相信大家都有去过Github吧，这是一个大牛集结，学习的好去处，可以说大部分开源项目都托管在这上面，我以AndroidSwipeLayou为例，我们看到的是这样的页面：\n![gitbub-readme](http://7xod2d.com1.z0.glb.clouddn.com/github-readme.png)\n上面是代码目录结构，下面是什么？对，README.md！下面的内容都是README.md来描述的信息，我当时不知道.md是什么文件，也不知道它可以写出这么酷炫的文字和页面效果。md是markdown的简写，markdown提供了非常友好的文字处理能力，在了解到Markdown之后，才知道原来还可以这么玩，使用过了才知道它的强大之处。Github在添加README.md时就相当于是一个在线编辑器，而且还有转换预览，其实你可以在这里编辑，然后copy到任何支持的地方使用，但是离线的时候怎么办？于是开始寻找一款高效的编辑器，没错Sublime text，它已经成为一款程序员必备软件，无奈我没始终没安装上markdown的插件（请自行google安装教程），只好放弃了，但是最后我找到了各种Markdown的编辑器，下面就为大家一一揭晓。\n### 在线编辑器 - 马克飞象\n官方地址：[点我跳转](https://maxiang.io/)\n这是一个在线的编辑器，它的效果实在是太炫酷了，第一次进去会有一个示例页面，这里的语法足够日后使用了，直接上图：\n![markfeixiang](http://7xod2d.com1.z0.glb.clouddn.com/markfeixiang.png)\n\n### Windows - MarkdownPad\n官网地址：[点我跳转](http://markdownpad.com/)\n官方描述：**MarkdownPad is a full-featured Markdown editor for Windows.**\n这是我现在使用的PC端的Markdown编辑器，这是一款标准的Markdown编辑器，即时预览，谁用谁知道，有图有真相。\n![markdownpad](http://7xod2d.com1.z0.glb.clouddn.com/markdownpad.png)\n\n### Gmail - Markdown Here\n这是一个Chrome的插件，它是用来在编写gmail时提供markdown的语法支持，还可以即时预览，以后你就可以打造属于自己炫酷的邮件了\nChrome扩展插件：\n![chromeplugin](http://7xod2d.com1.z0.glb.clouddn.com/emial-plugin1.png)\n编辑gmail邮件：\n![gmailediter](http://7xod2d.com1.z0.glb.clouddn.com/email-before.png)\ngmail的预览，点击图一插件按钮即可看到图二预览效果：\n![gmailpluginbutton](http://7xod2d.com1.z0.glb.clouddn.com/email-plugin.png)\n![gmailpreview](http://7xod2d.com1.z0.glb.clouddn.com/email-convert.png)\n\n### Android - MarkdownX\n在这个年代，手机的功能已经强大到无法想象的地步了，Google提供的Android系统就为我们移动办公提供了一个很好的平台。手机端IDE你值得拥有（手机编写代码确实有点蛋疼），这里我要说的是一款Markdown编辑器，必备的功能 - 时时预览，在编辑页面右滑就可以预览，而且还可以同步Dropbox，是不是很强大！哦，果粉用户的你可以忽略这一段。\n下图来自google play：\n![markdownx](http://7xod2d.com1.z0.glb.clouddn.com/markdownx.png)\n\n这里只是我的个人感觉不错的编辑器，当然还有很多好的编辑器，主要是适合你的才是最好的，如果你有非常好的软件或编辑器可以告诉我，我也可以添加上去。主要是能让我们可以快速高效的编写更优美的代码和页面。","slug":"推荐-Markdown编辑器","published":1,"updated":"2015-11-24T09:52:01.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfc9000uwsup7scka48c"},{"title":"关于Android Log小记","date":"2015-11-18T08:38:59.000Z","_content":"作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？\n<!-- more -->\n\n### 日志形式\n- **Java形式**\n```\nSystem.out.println(\" log for test \");\n```\n这个一般不提倡使用\n- **Android Log**\n```\nLog.d(TAG, \" log for test \");\n```\n这个是Android标准的日志输出类：android.util.Log\n\n### TAG定义\n关于TAG的命名简单说一下，基本上有以下几种形式：\n- **人名** \n```\nLog.d(\"gogh\" \" log for test \");\n```\n与代码无关，无法定位日志的位置\n- **类名**\n```\nprivate static final String TAG = LogUtils.class.getSimpleName();\nLog.d(TAG, \" log for test \");\n```\n经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。\n\n### TAG定义推荐\n那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：\n```\npublic class Utils {\n    \n    public static final String TAG = \"Utils\";\n\n    public String setText(String text){\n        Logger.d(TAG, \" setText text = \" + text );\n        // do something\n    }\n}\n```\n基本的规范是：\n- **日志所在类**\n- **日志所在的方法**\n- **基本的信息**\n这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。\n\n### 屏蔽日志\n我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。\n#####运行时屏蔽\n这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：\n```\npublic class Logger {\n\n    private static final boolean ENABLE = \"true;\n    \n    public static void d(String tag, String message){\n        if(ENABLE){\n            android.util.Log.d(tag, message);\n        }\n    }\n}\n\nLogger.d(XXX, \"VERSION = \" + Build.VERSION.SDK_INT);\n```\n编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。\n\n##### 编译期屏蔽\n这个就很简单了，在打包发布的时候加入代码混淆，如下：\n```{bash}\n-assumenosideeffects class com.gogh.Logger{\n    public static *** i(...);\n}\n```\n但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：\n```{bash}\n-assumenosideeffects class android.util.Log {\n    public static *** v(...);\n    public static *** d(...);\n    public static *** i(...);\n    public static *** w(...);\n    public static *** e(...);\n}\n```\n这样就可以达到平日日志输出的效果了\n\n### 对比描述\n\n运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已\n\n编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段\n\n### 总结\n理论上编译期屏蔽相对于运行期屏蔽更优","source":"_posts/关于Android-Log小记.md","raw":"title: 关于Android Log小记\ndate: 2015-11-18 16:38:59\ncategories: [Android]\ntags: [Log]\n---\n作为Android开发工程师，项目开发的过程中，日志的打印是必不可少的，通过这些日志我们可以很好分析程序运行的状况与正确性，可以使用的日志输出有哪种形式呢？发布release版本应该怎么屏蔽掉这些日志呢？\n<!-- more -->\n\n### 日志形式\n- **Java形式**\n```\nSystem.out.println(\" log for test \");\n```\n这个一般不提倡使用\n- **Android Log**\n```\nLog.d(TAG, \" log for test \");\n```\n这个是Android标准的日志输出类：android.util.Log\n\n### TAG定义\n关于TAG的命名简单说一下，基本上有以下几种形式：\n- **人名** \n```\nLog.d(\"gogh\" \" log for test \");\n```\n与代码无关，无法定位日志的位置\n- **类名**\n```\nprivate static final String TAG = LogUtils.class.getSimpleName();\nLog.d(TAG, \" log for test \");\n```\n经过混淆的类，类名会改变为a、b这种形式，相应的TAG值也会改变，同样无法定位相关代码域。\n\n### TAG定义推荐\n那么哪种形式的TAG定义相对来说比较规范呢？给大家推荐一种相对规范的定义形式：\n```\npublic class Utils {\n    \n    public static final String TAG = \"Utils\";\n\n    public String setText(String text){\n        Logger.d(TAG, \" setText text = \" + text );\n        // do something\n    }\n}\n```\n基本的规范是：\n- **日志所在类**\n- **日志所在的方法**\n- **基本的信息**\n这样的log是不是很好了就，对调试程序而言，比较直观，可读性不叫强，容易定位，关键是不会因为代码的混淆改变TAG的值。\n\n### 屏蔽日志\n我们的开发分为很多个阶段，但最终还是要有一个release版本发布，就需要把日志输出屏蔽掉，这一步相信大家都接触过了，那么就简单分析一下这一步。\n#####运行时屏蔽\n这个应该是使用的最多的，那么何为运行时屏蔽呢？就是在我们自定义的log工具类中设置一个值来开关日志，例如：\n```\npublic class Logger {\n\n    private static final boolean ENABLE = \"true;\n    \n    public static void d(String tag, String message){\n        if(ENABLE){\n            android.util.Log.d(tag, message);\n        }\n    }\n}\n\nLogger.d(XXX, \"VERSION = \" + Build.VERSION.SDK_INT);\n```\n编写代码的过程中我们可以使用Logger.d(xxx, xxx);的形式来打印日志，在发布打包时将ENABLE修改为false就可以关闭日志。程序在运行的过程中就不会显示日志，但是message部分的方法（Build.VERSION.SDK_INT）还是执行到了，稍后解释。\n\n##### 编译期屏蔽\n这个就很简单了，在打包发布的时候加入代码混淆，如下：\n```{bash}\n-assumenosideeffects class com.gogh.Logger{\n    public static *** i(...);\n}\n```\n但是为了为了防止还有使用原生log的日志输出，直接混淆原生的log类，如下：\n```{bash}\n-assumenosideeffects class android.util.Log {\n    public static *** v(...);\n    public static *** d(...);\n    public static *** i(...);\n    public static *** w(...);\n    public static *** e(...);\n}\n```\n这样就可以达到平日日志输出的效果了\n\n### 对比描述\n\n运行时屏蔽其实很好理解，log中的日志输出是通过一个值控制的，这个输出的操作是在值判断通过之后进行的，而方法的调用需要传递多个参数，参数的传递肯定是在判断之前发生的，所以参数中的字串的拼接是会执行到的，方法同样也会被调用到，只是你看不到日志输出而已\n\n编译期就是在编译过程中，Proguard进行优化，发生了内联操作，将dumpDebugInfo的被调用的方法体实现提取到调用的地方。在log相关的调用做了处理，结果是这里没有任何关于Logger.d(xxx,xxx)的调用，但是字串的拼接还是存在的，只是没有了方法的调用，这个可以通过反编译看看相关的代码片段\n\n### 总结\n理论上编译期屏蔽相对于运行期屏蔽更优","slug":"关于Android-Log小记","published":1,"updated":"2015-11-19T02:03:24.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfch0015wsupw80m6ngy"},{"title":"[Win10]快捷键之Win组合键","date":"2015-11-25T01:27:42.000Z","_content":"\n#### Win组合键\n\n|  Shortcut           |    Description |\n| :-------------                  | :--------------             |\n| Windows Key ![WindowsKey][1] | Open and close the Start menu.  |\n| ![WindowsKey][1]+1,![WindowsKey][1]+2,etc.|   Switch to the desktop and launch the nth application in the taskbar. For example, ![WindowsKey][1] +1 launches whichever application is first in the list, numbered from left to right.   |\n| ![WindowsKey][1]+A              |    Open the action center. |\n| ![WindowsKey][1]+B      |    Highlight the notification area. |\n| ![WindowsKey][1]+C      |    Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.  |\n| ![WindowsKey][1]+D      |    Switch between **Show Desktop** (hides/shows any applications and other windows) and the previous state. |\n| ![WindowsKey][1]+E      |    Switch to the desktop and launch File Explorer with the **Quick Access** tab displayed.  |\n| ![WindowsKey][1]+H      |    Open the action center. |\n| ![WindowsKey][1]+I      |    Open the action center. |\n| ![WindowsKey][1]+K      |    Open the **Connect** pane to connect to wireless displays and audio devices. |\n| ![WindowsKey][1]+L      |    Lock the device and go to the **Lock** screen. |\n| ![WindowsKey][1]+M      |    Switch to the desktop and minimize all open windows. |\n| ![WindowsKey][1]+O      |    Lock device orientation. |\n| ![WindowsKey][1]+P      |    Open the **Project** pane to search and connect to external displays and projectors.  |\n| ![WindowsKey][1]+R      |    Display the **Run** dialog box. |\n| ![WindowsKey][1]+S      |    Launch Cortana.[注2]  Users can begin to type a query immediately.  |\n| ![WindowsKey][1]+T      |    Cycle through the apps on the taskbar. |\n| ![WindowsKey][1]+U      |    Launch the Ease of Access Center. |\n| ![WindowsKey][1]+A      |    Cycle through notifications. |\n| ![WindowsKey][1]+V      |    Open the action center. |\n| ![WindowsKey][1]+X      |    Open the advanced menu in the lower-left corner of the screen. |\n| ![WindowsKey][1]+Z      |    Open the app-specific command bar. |\n| ![WindowsKey][1]+Enter      |    Launch Narrator. |\n| ![WindowsKey][1] + Space      |    Switch input language and keyboard layout. |\n| ![WindowsKey][1]+Tab      |    Open Task view. |\n| ![WindowsKey][1]+,      |    Peek at the desktop. |\n| ![WindowsKey][1]+Plus Sign      |    Zoom in. |\n| ![WindowsKey][1]+Minus Sign      |    Zoom out. |\n| ![WindowsKey][1]+ESCAPE      |    Close Magnifier. |\n| ![WindowsKey][1]+LEFT ARROW      |    Dock the active window to the left half of the monitor. |\n| ![WindowsKey][1]+RIGHT ARROW      |    Dock the active window to the right half of the monitor. |\n| ![WindowsKey][1]+UP ARROW      |    Maximize the active window vertically and horizontally. |\n| ![WindowsKey][1]+DOWN ARROW      |    Restore or minimize the active window. |\n| ![WindowsKey][1]+SHIFT UP ARROW      |    Maximize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT DOWN ARROW      |    Restore or minimize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT LEFT ARROW      |    With multiple monitors, move the active window to the monitor on the left. |\n| ![WindowsKey][1]+SHIFT RIGHT ARROW      |    With multiple monitors, move the active window to the monitor on the right. |\n| ![WindowsKey][1]+HOME      |    Minimize all nonactive windows; restore on second keystroke. |\n| ![WindowsKey][1]+PRNT SCRN      |    Take a picture of the screen and place it in the **Computer>Pictures>Screenshots** folder. |\n| ![WindowsKey][1]+CTRL+LEFT/RIGHT ARROW      |    Switch to the next or previous virtual desktop. |\n| ![WindowsKey][1]+CTRL+D      |    Create a new virtual desktop. |\n| ![WindowsKey][1]+CTRL_F4      |    Close the current virtual desktop. |\n| ![WindowsKey][1]+?      |    Launch the Windows Feedback App. |\n\n[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.\n\n[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.\n\n[1]: http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png","source":"_posts/Win10-快捷键之Win组合键.md","raw":"title: '[Win10]快捷键之Win组合键'\ndate: 2015-11-25 09:27:42\ncategories: [Win10]\ntags: [Win10, 快捷键]\n---\n\n#### Win组合键\n\n|  Shortcut           |    Description |\n| :-------------                  | :--------------             |\n| Windows Key ![WindowsKey][1] | Open and close the Start menu.  |\n| ![WindowsKey][1]+1,![WindowsKey][1]+2,etc.|   Switch to the desktop and launch the nth application in the taskbar. For example, ![WindowsKey][1] +1 launches whichever application is first in the list, numbered from left to right.   |\n| ![WindowsKey][1]+A              |    Open the action center. |\n| ![WindowsKey][1]+B      |    Highlight the notification area. |\n| ![WindowsKey][1]+C      |    Launch Cortana into listening mode[注1].  Users can begin to speak to Cortana immediately.  |\n| ![WindowsKey][1]+D      |    Switch between **Show Desktop** (hides/shows any applications and other windows) and the previous state. |\n| ![WindowsKey][1]+E      |    Switch to the desktop and launch File Explorer with the **Quick Access** tab displayed.  |\n| ![WindowsKey][1]+H      |    Open the action center. |\n| ![WindowsKey][1]+I      |    Open the action center. |\n| ![WindowsKey][1]+K      |    Open the **Connect** pane to connect to wireless displays and audio devices. |\n| ![WindowsKey][1]+L      |    Lock the device and go to the **Lock** screen. |\n| ![WindowsKey][1]+M      |    Switch to the desktop and minimize all open windows. |\n| ![WindowsKey][1]+O      |    Lock device orientation. |\n| ![WindowsKey][1]+P      |    Open the **Project** pane to search and connect to external displays and projectors.  |\n| ![WindowsKey][1]+R      |    Display the **Run** dialog box. |\n| ![WindowsKey][1]+S      |    Launch Cortana.[注2]  Users can begin to type a query immediately.  |\n| ![WindowsKey][1]+T      |    Cycle through the apps on the taskbar. |\n| ![WindowsKey][1]+U      |    Launch the Ease of Access Center. |\n| ![WindowsKey][1]+A      |    Cycle through notifications. |\n| ![WindowsKey][1]+V      |    Open the action center. |\n| ![WindowsKey][1]+X      |    Open the advanced menu in the lower-left corner of the screen. |\n| ![WindowsKey][1]+Z      |    Open the app-specific command bar. |\n| ![WindowsKey][1]+Enter      |    Launch Narrator. |\n| ![WindowsKey][1] + Space      |    Switch input language and keyboard layout. |\n| ![WindowsKey][1]+Tab      |    Open Task view. |\n| ![WindowsKey][1]+,      |    Peek at the desktop. |\n| ![WindowsKey][1]+Plus Sign      |    Zoom in. |\n| ![WindowsKey][1]+Minus Sign      |    Zoom out. |\n| ![WindowsKey][1]+ESCAPE      |    Close Magnifier. |\n| ![WindowsKey][1]+LEFT ARROW      |    Dock the active window to the left half of the monitor. |\n| ![WindowsKey][1]+RIGHT ARROW      |    Dock the active window to the right half of the monitor. |\n| ![WindowsKey][1]+UP ARROW      |    Maximize the active window vertically and horizontally. |\n| ![WindowsKey][1]+DOWN ARROW      |    Restore or minimize the active window. |\n| ![WindowsKey][1]+SHIFT UP ARROW      |    Maximize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT DOWN ARROW      |    Restore or minimize the active window vertically, maintaining the current width. |\n| ![WindowsKey][1]+SHIFT LEFT ARROW      |    With multiple monitors, move the active window to the monitor on the left. |\n| ![WindowsKey][1]+SHIFT RIGHT ARROW      |    With multiple monitors, move the active window to the monitor on the right. |\n| ![WindowsKey][1]+HOME      |    Minimize all nonactive windows; restore on second keystroke. |\n| ![WindowsKey][1]+PRNT SCRN      |    Take a picture of the screen and place it in the **Computer>Pictures>Screenshots** folder. |\n| ![WindowsKey][1]+CTRL+LEFT/RIGHT ARROW      |    Switch to the next or previous virtual desktop. |\n| ![WindowsKey][1]+CTRL+D      |    Create a new virtual desktop. |\n| ![WindowsKey][1]+CTRL_F4      |    Close the current virtual desktop. |\n| ![WindowsKey][1]+?      |    Launch the Windows Feedback App. |\n\n[注1]:  If Cortana is unavailable or disabled, this shortcut has no function.\n\n[注2]: Cortana is only available in certain countries/regions, and some Cortana features might not be available everywhere. If Cortana is unavailable or disabled, this command opens Search.\n\n[1]: http://7xod2d.com1.z0.glb.clouddn.com/WinKey.png","slug":"Win10-快捷键之Win组合键","published":1,"updated":"2015-11-26T02:15:44.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfcm0019wsupoqhddfhh"},{"title":"Java重载匹配优先级","date":"2015-11-23T08:31:05.000Z","_content":"#### 前情提要\nJava面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；\n\n#### 示例代码\n无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：\n``` java\npublic class OverloadPriority {\n\n\tpublic static void print(Object arg) {\n\t\tSystem.out.println(\"parameter type = Object\");\n\t}\n\n\tpublic static void print(int arg) {\n\t\tSystem.out.println(\"parameter type = int\");\n\t}\n\n\tpublic static void print(long arg) {\n\t\tSystem.out.println(\"parameter type = long\");\n\t}\n\t\n\tpublic static void print(double arg) {\n\t\tSystem.out.println(\"parameter type = double\");\n\t}\n\t\n\tpublic static void print(float arg) {\n\t\tSystem.out.println(\"parameter type = float\");\n\t}\n\n\tpublic static void print(char arg) {\n\t\tSystem.out.println(\"parameter type = char\");\n\t}\n\n\tpublic static void print(Character arg) {\n\t\tSystem.out.println(\"parameter type = Character\");\n\t}\n\n\tpublic static void print(char... arg) {\n\t\tSystem.out.println(\"parameter type = char...\");\n\t}\n\n\tpublic static void print(Serializable arg) {\n\t\tSystem.out.println(\"parameter type = Serializable\");\n\t}\n\n\tpublic static void print(Comparable<?> arg) {\n\t\tSystem.out.println(\"parameter type = Comparable\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// int\n\t\tprint('g');\n\t}\n\t\n}\n```\n可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。\n\nmain方法执行print('g')，输出结果毫无疑问就是：\n```\nparameter type = char\n```\n那么注释掉print(char arg)这个方法，会输出什么结果呢？\n```\nparameter type = int\n```\n那么注释掉print(int arg)这个方法，会输出什么结果呢？\n```\nparameter type = long\n```\n\n这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道'g'除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -> int -> long -> double -> float -> Character -> Serializable or Comparable -> Object -> char...(变长参数，即char元素数组)\n\n#### 总结\n遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型\n#### 注意\n- 变长参数的重载优先级最低\n- char到byte或short之间的转换是不安全的\n- 在Serializable和Comparable同时存在的情况下会报异常：\n\tThe method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，\n\t因为Character实现了Serializable和Comparable这两个接口，\n\t而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，\n\t提示类型模糊，无法正常编译）\n- 接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配\n\n所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下","source":"_posts/Java重载匹配优先级.md","raw":"title: Java重载匹配优先级\ndate: 2015-11-23 16:31:05\ncategories: [Java]\ntags: [重载, java] \n---\n#### 前情提要\nJava面向对象的三个基本特征：继承、封装和多态；多态主要体现在重载和重写；\n\n#### 示例代码\n无意间看到这样一个问题，为了方便直观，就用代码来描述问题，有这样一个类：\n``` java\npublic class OverloadPriority {\n\n\tpublic static void print(Object arg) {\n\t\tSystem.out.println(\"parameter type = Object\");\n\t}\n\n\tpublic static void print(int arg) {\n\t\tSystem.out.println(\"parameter type = int\");\n\t}\n\n\tpublic static void print(long arg) {\n\t\tSystem.out.println(\"parameter type = long\");\n\t}\n\t\n\tpublic static void print(double arg) {\n\t\tSystem.out.println(\"parameter type = double\");\n\t}\n\t\n\tpublic static void print(float arg) {\n\t\tSystem.out.println(\"parameter type = float\");\n\t}\n\n\tpublic static void print(char arg) {\n\t\tSystem.out.println(\"parameter type = char\");\n\t}\n\n\tpublic static void print(Character arg) {\n\t\tSystem.out.println(\"parameter type = Character\");\n\t}\n\n\tpublic static void print(char... arg) {\n\t\tSystem.out.println(\"parameter type = char...\");\n\t}\n\n\tpublic static void print(Serializable arg) {\n\t\tSystem.out.println(\"parameter type = Serializable\");\n\t}\n\n\tpublic static void print(Comparable<?> arg) {\n\t\tSystem.out.println(\"parameter type = Comparable\");\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// int\n\t\tprint('g');\n\t}\n\t\n}\n```\n可以看到我们这里重载了print(xxx)这个方法，不同类型的参数，那么在调用上会出现什么问题呢？这里就以char类型为例来分析一下。\n\nmain方法执行print('g')，输出结果毫无疑问就是：\n```\nparameter type = char\n```\n那么注释掉print(char arg)这个方法，会输出什么结果呢？\n```\nparameter type = int\n```\n那么注释掉print(int arg)这个方法，会输出什么结果呢？\n```\nparameter type = long\n```\n\n这是为什么呢？ 这就是重载当中参数类型的优先级问题。我们都知道'g'除了表示字符g之外，还能表示数字103（g的ASCII码是103），所以会输出为int，发生了类型转换，类型自动提升，结果依次是char -> int -> long -> double -> float -> Character -> Serializable or Comparable -> Object -> char...(变长参数，即char元素数组)\n\n#### 总结\n遇上重载时，会查找类型最匹配的参数，然后提升类型、封装类型、匹配接口、继承关系型、变长参数类型\n#### 注意\n- 变长参数的重载优先级最低\n- char到byte或short之间的转换是不安全的\n- 在Serializable和Comparable同时存在的情况下会报异常：\n\tThe method print(Object) is ambiguous for the type OverloadPriority （意思是无法确定应该使用哪一个重载方法，\n\t因为Character实现了Serializable和Comparable这两个接口，\n\t而接口匹配的优先级是一样的，编译器无法判断转型为哪种类型，\n\t提示类型模糊，无法正常编译）\n- 接口无法匹配之后，就会开始查找匹配的父类，优先级是顺着继承链，由下往上进行匹配\n\n所以在重载方法的时候大家一定要注意这些细节问题，这样可能导致最后输出的结果不是你想要的结果，大家可以编写这样的一段代码测试一下","slug":"Java重载匹配优先级","published":1,"updated":"2015-11-24T09:59:07.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfcq001gwsupbyvzo7xy"},{"title":"Java中静态绑定和动态绑定","date":"2015-11-24T02:07:20.000Z","_content":"#### 概念\n- 程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 **静态绑定**和**动态绑定**\n- 动态绑定：在面向过程中又称为**后期绑定**，在程序**运行期**进行了绑定，根据实际情况有选择的进行绑定\n- 静态绑定：在面向过程中又称为**前期绑定**，在程序**编译期**进行了绑定，即在还没运行时，就已经加载到内存\n#### 对比\n- 动态绑定\n\t- 又称为后期绑定\n\t- 发生在运行时期\n\t- 虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定\n\t- 动态绑定使用对象信息来完成\n\t- 典型应用是方法的重写（Override）\n- 静态绑定\n\t- 又称为前期绑定\n\t- 发生在编译时期\n\t- 使用private或static或final修饰的变量或者方法（包括构造方法）\n\t- 静态绑定使用类信息来完成\n\t- 典型应用是方法重载（Overload）\n\n- 运行期\nJava的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错\n- 编译期\nJava的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序\n\nJava字节码的执行有两种方式： \n- 即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码\n- 解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。\n\nJava程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行\n\n#### 验证\n关于final、static、private和构造方法是前期绑定的理解：\n- **private** \n对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起\n- **final**\nfinal方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)\n- **static**\n对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏\n就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法\n由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。\n- **构造**\n构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类\n\n**示例代码**\n```\npublic class SuperClass {\n\n\tprotected String attribute = \"from SuperClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n}\n\npublic class SubClass extends SuperClass {\n\n\tprotected String attribute = \"from SubClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\t\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tSuperClass superClass = new SubClass();\n\t\t\n\t\tSubClass subClass = new SubClass();\n\t\t\n\t\tsuperClass.print(superClass);\n\t\t\n\t\tsubClass.print(subClass);\n\t\t\n\t\tSystem.out.println(\" attribute \" + superClass.attribute);\n\t\t\n\t\tSystem.out.println(\" method \" + superClass.getAttribute());\n\t\t\n\t}\n}\n```\n**输出结果**\n```\n static method from SuperClass\n static method from SuperClass\n attribute from SuperClass\n method from SubClass\n```\n\n#### 反编译\n使用JDK自带的javap命令反编译看看：\n`>javap -c SubClass`\n```\nWarning: Binary file SubClass contains com.gogh.bind.SubClass\nCompiled from \"SubClass.java\"\npublic class com.gogh.bind.SubClass extends com.gogh.bind.SuperClass {\n  protected java.lang.String attribute;\n\n  public com.gogh.bind.SubClass();\n    Code:\n       0: aload_0\n       1: invokespecial #10                 // Method com/gogh/bind/SuperClass.\"<init>\":()V\n       4: aload_0\n       5: ldc           #12                 // String from SubClass\n       7: putfield      #14                 // Field attribute:Ljava/lang/String;\n      10: return\n\n  public java.lang.String getAttribute();\n    Code:\n       0: aload_0\n       1: getfield      #14                 // Field attribute:Ljava/lang/String;\n       4: areturn\n\n  public static void print(com.gogh.bind.SuperClass);\n    Code:\n       0: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #30                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #32                 // String  static method\n       9: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #1                  // class com/gogh/bind/SubClass\n       3: dup\n       4: invokespecial #54                 // Method \"<init>\":()V\n       7: astore_1\n       8: new           #1                  // class com/gogh/bind/SubClass\n      11: dup\n      12: invokespecial #54                 // Method \"<init>\":()V\n      15: astore_2\n      16: aload_1\n      17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n      20: aload_2\n      21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n      24: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      27: new           #30                 // class java/lang/StringBuilder\n      30: dup\n      31: ldc           #58                 // String  attribute\n      33: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      36: aload_1\n      37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      40: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      43: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      46: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      49: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      52: new           #30                 // class java/lang/StringBuilder\n      55: dup\n      56: ldc           #60                 // String  method\n      58: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      61: aload_1\n      62: invokevirtual #62                 // Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;\n      65: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      68: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      71: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      74: return\n}\n```\n通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：\n-  17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n调用的SuperClass.print方法\n- 21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n- 37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n这个也是调用的SuperClass.print方法\n#### 总结\nJava中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。\n\n与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。\n\nJava因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。\n\n内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。","source":"_posts/Java中静态绑定和动态绑定.md","raw":"title: Java中静态绑定和动态绑定\ndate: 2015-11-24 10:07:20\ncategories: [Java]\ntags: [动态绑定, 静态绑定, 重载, 重写]\n---\n#### 概念\n- 程序绑定：绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来，Java中绑定分为绑定分为 **静态绑定**和**动态绑定**\n- 动态绑定：在面向过程中又称为**后期绑定**，在程序**运行期**进行了绑定，根据实际情况有选择的进行绑定\n- 静态绑定：在面向过程中又称为**前期绑定**，在程序**编译期**进行了绑定，即在还没运行时，就已经加载到内存\n#### 对比\n- 动态绑定\n\t- 又称为后期绑定\n\t- 发生在运行时期\n\t- 虚方法（可以被子类重写的方法）会根据运行时的对象进行动态绑定\n\t- 动态绑定使用对象信息来完成\n\t- 典型应用是方法的重写（Override）\n- 静态绑定\n\t- 又称为前期绑定\n\t- 发生在编译时期\n\t- 使用private或static或final修饰的变量或者方法（包括构造方法）\n\t- 静态绑定使用类信息来完成\n\t- 典型应用是方法重载（Overload）\n\n- 运行期\nJava的编译过程是将Java源文件编译成字节码（.class文件，JVM可执行代码）的过程，在这个过程中Java是不与内存打交道的，在这个过程中编译器会进行语法的分析，如果语法不正确就会报错\n- 编译期\nJava的运行过程是指JVM（Java虚拟机）装载字节码文件并解释执行，在这个过程才是真正的创建内存，执行Java程序\n\nJava字节码的执行有两种方式： \n- 即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码\n- 解释执行方式：解释器通过每次解释并执行一小段代码来完成java字节码程序的所有操作。\n\nJava程序在执行过程中其实是进行了两次转换，先将源文件转成字节码再转换成机器码。这也正是Java能一次编译，到处运行的原因。在不同的平台上装上对应的Java虚拟机，就可以实现相同的字节码转换成不同平台上的机器码，从而在不同的平台上运行\n\n#### 验证\n关于final、static、private和构造方法是前期绑定的理解：\n- **private** \n对于private的方法，首先它对外是不可见的，所以肯定不能被继承，那么就没办法通过子类的对象来调用，而只能通过类自身的对象来调用，因此就可以说private方法和定义这个方法的类绑定在了一起\n- **final**\nfinal方法虽然可以被继承，但不能被重写（覆盖），虽然子类对象可以调用，但是调用的都是父类中所定义的那个final方法，（由此我们可以知道将方法声明为final类型，一是为了防止方法被覆盖，二是为了有效地关闭java中的动态绑定)\n- **static**\n对于static方法，可以被子类继承，但是不能被子类重写（覆盖），但是可以被子类隐藏\n就是说如果父类里有一个static方法，它的子类里如果没有对应的方法，那么当子类对象调用这个方法时就会使用父类中的方法。而如果子类中定义了相同的方法，则会调用子类的中定义的方法。唯一的不同就是，当子类对象向上转型为父类对象时，不论子类中有没有定义这个静态方法，该对象都会使用父类中的静态方法。因此这里说静态方法可以被隐藏而不能被覆盖。这与子类隐藏父类中的成员变量是一样的。隐藏和覆盖的区别在于，子类对象转换成父类对象后，能够访问父类被隐藏的变量和方法，而不能访问父类被覆盖的方法\n由上面我们可以得出结论，如果一个方法不可被继承或者继承后不可被覆盖，那么这个方法就采用的静态绑定。\n- **构造**\n构造方法也是不能被继承的，我们知道子类是通过super()来调用父类的无参构造方法，来完成对父类的初始化，因此编译时也可以知道这个构造方法到底是属于哪个类\n\n**示例代码**\n```\npublic class SuperClass {\n\n\tprotected String attribute = \"from SuperClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n}\n\npublic class SubClass extends SuperClass {\n\n\tprotected String attribute = \"from SubClass\";\n\n\tpublic String getAttribute() {\n\t\treturn attribute;\n\t}\n\t\n\tpublic static void print(SuperClass superClass) {\n\t\tSystem.out.println(\" static method \" + superClass.attribute);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tSuperClass superClass = new SubClass();\n\t\t\n\t\tSubClass subClass = new SubClass();\n\t\t\n\t\tsuperClass.print(superClass);\n\t\t\n\t\tsubClass.print(subClass);\n\t\t\n\t\tSystem.out.println(\" attribute \" + superClass.attribute);\n\t\t\n\t\tSystem.out.println(\" method \" + superClass.getAttribute());\n\t\t\n\t}\n}\n```\n**输出结果**\n```\n static method from SuperClass\n static method from SuperClass\n attribute from SuperClass\n method from SubClass\n```\n\n#### 反编译\n使用JDK自带的javap命令反编译看看：\n`>javap -c SubClass`\n```\nWarning: Binary file SubClass contains com.gogh.bind.SubClass\nCompiled from \"SubClass.java\"\npublic class com.gogh.bind.SubClass extends com.gogh.bind.SuperClass {\n  protected java.lang.String attribute;\n\n  public com.gogh.bind.SubClass();\n    Code:\n       0: aload_0\n       1: invokespecial #10                 // Method com/gogh/bind/SuperClass.\"<init>\":()V\n       4: aload_0\n       5: ldc           #12                 // String from SubClass\n       7: putfield      #14                 // Field attribute:Ljava/lang/String;\n      10: return\n\n  public java.lang.String getAttribute();\n    Code:\n       0: aload_0\n       1: getfield      #14                 // Field attribute:Ljava/lang/String;\n       4: areturn\n\n  public static void print(com.gogh.bind.SuperClass);\n    Code:\n       0: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #30                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #32                 // String  static method\n       9: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      16: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #1                  // class com/gogh/bind/SubClass\n       3: dup\n       4: invokespecial #54                 // Method \"<init>\":()V\n       7: astore_1\n       8: new           #1                  // class com/gogh/bind/SubClass\n      11: dup\n      12: invokespecial #54                 // Method \"<init>\":()V\n      15: astore_2\n      16: aload_1\n      17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n      20: aload_2\n      21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n      24: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      27: new           #30                 // class java/lang/StringBuilder\n      30: dup\n      31: ldc           #58                 // String  attribute\n      33: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      36: aload_1\n      37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n      40: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      43: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      46: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      49: getstatic     #24                 // Field java/lang/System.out:Ljava/io/PrintStream;\n      52: new           #30                 // class java/lang/StringBuilder\n      55: dup\n      56: ldc           #60                 // String  method\n      58: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      61: aload_1\n      62: invokevirtual #62                 // Method com/gogh/bind/SuperClass.getAttribute:()Ljava/lang/String;\n      65: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      68: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      71: invokevirtual #45                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      74: return\n}\n```\n通过javap我们只能看到静态绑定的部分，就是两个print方法的调用和superClass.attribute，直接看main方法里面的内容：\n-  17: invokestatic  #55                 // Method com/gogh/bind/SuperClass.print:(Lcom/gogh/bind/SuperClass;)V\n调用的SuperClass.print方法\n- 21: invokestatic  #57                 // Method print:(Lcom/gogh/bind/SuperClass;)V\n- 37: getfield      #37                 // Field com/gogh/bind/SuperClass.attribute:Ljava/lang/String;\n这个也是调用的SuperClass.print方法\n#### 总结\nJava中的static方法和final方法属于前期绑定，子类无法重写final方法，除了static方法和final方法之外的其他方法属于后期绑定，运行时能判断对象的类型进行绑定。\n\n与方法不同，在处理Java类中的成员变量（静态和非静态）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。\n\nJava因为什么对属性要采取静态的绑定方法？这是因为静态绑定是有很多的好处，它可以让我们在编译期就发现程序中的错误，而不是在运行期，这样就可以提高程序的运行效率！由于动态绑定需要在运行时确定执行哪个方法实现或者变量，比起静态绑定起来要耗时。对方法采取动态绑定是为了实现多态，多态是Java的一大特色，多态也是面向对象的关键技术之一，所以Java是以效率为代价来实现多态这是很值得的，所以在不影响整体设计的情况下，我们可以考虑将方法或者变量使用private，static或者final进行修饰。\n\n内容来自互联网+个人见解，如果有哪里有问题，请联系我并指正，我会及时纠正处理。","slug":"Java中静态绑定和动态绑定","published":1,"updated":"2015-11-24T10:35:54.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihhhqfcu001nwsup556hf67n"}],"PostAsset":[],"PostCategory":[{"post_id":"cihhhqfbn0006wsup2lxw0j92","category_id":"cihhhqfbs0007wsupphao9amk","_id":"cihhhqfbv000awsupjdz4bv7s"},{"post_id":"cihhhqfby000fwsupimw4emfw","category_id":"cihhhqfc0000gwsup05xkdddf","_id":"cihhhqfc1000jwsupfxp569ip"},{"post_id":"cihhhqfc3000mwsup0vamak05","category_id":"cihhhqfc0000gwsup05xkdddf","_id":"cihhhqfc5000nwsupmv1l4r6x"},{"post_id":"cihhhqfc9000uwsup7scka48c","category_id":"cihhhqfca000vwsup58ffdrep","_id":"cihhhqfcd000ywsupjj5nbpry"},{"post_id":"cihhhqfch0015wsupw80m6ngy","category_id":"cihhhqfc0000gwsup05xkdddf","_id":"cihhhqfcj0016wsupmin4lrhz"},{"post_id":"cihhhqfcm0019wsupoqhddfhh","category_id":"cihhhqfco001awsup82k23tx9","_id":"cihhhqfcp001dwsuplk0uztpi"},{"post_id":"cihhhqfcq001gwsupbyvzo7xy","category_id":"cihhhqfcr001hwsupi61wdca1","_id":"cihhhqfcs001kwsup38t92mlh"},{"post_id":"cihhhqfcu001nwsup556hf67n","category_id":"cihhhqfcr001hwsupi61wdca1","_id":"cihhhqfcv001owsupqq1nygx0"}],"PostTag":[{"post_id":"cihhhqfbn0006wsup2lxw0j92","tag_id":"cihhhqfbs0008wsupfjv4vnem","_id":"cihhhqfbw000cwsupghc0g65p"},{"post_id":"cihhhqfbn0006wsup2lxw0j92","tag_id":"cihhhqfbv0009wsuph490elpe","_id":"cihhhqfbw000dwsupzmrhsnga"},{"post_id":"cihhhqfbn0006wsup2lxw0j92","tag_id":"cihhhqfbw000bwsuph80biybd","_id":"cihhhqfbw000ewsuprr34cp4j"},{"post_id":"cihhhqfby000fwsupimw4emfw","tag_id":"cihhhqfc0000hwsupvgv4e8i4","_id":"cihhhqfc1000kwsupjldv5qg8"},{"post_id":"cihhhqfby000fwsupimw4emfw","tag_id":"cihhhqfc0000iwsup592l7tte","_id":"cihhhqfc1000lwsup32kl7thw"},{"post_id":"cihhhqfc3000mwsup0vamak05","tag_id":"cihhhqfc5000owsupktrps6ws","_id":"cihhhqfc7000rwsuptwbam6jr"},{"post_id":"cihhhqfc3000mwsup0vamak05","tag_id":"cihhhqfc6000pwsupdvuk1ofe","_id":"cihhhqfc8000swsupesxn9pjo"},{"post_id":"cihhhqfc3000mwsup0vamak05","tag_id":"cihhhqfc6000qwsupl2o3k81v","_id":"cihhhqfc8000twsupsd1zv0vj"},{"post_id":"cihhhqfc9000uwsup7scka48c","tag_id":"cihhhqfca000wwsupyx82lp5r","_id":"cihhhqfcf0011wsupc5jg6sdm"},{"post_id":"cihhhqfc9000uwsup7scka48c","tag_id":"cihhhqfcc000xwsupmf0b3j96","_id":"cihhhqfcg0012wsupp8clybto"},{"post_id":"cihhhqfc9000uwsup7scka48c","tag_id":"cihhhqfce000zwsuptm3xlabn","_id":"cihhhqfcg0013wsup0jcbbq6x"},{"post_id":"cihhhqfc9000uwsup7scka48c","tag_id":"cihhhqfcf0010wsup8toxwfah","_id":"cihhhqfcg0014wsupgdj0kkxm"},{"post_id":"cihhhqfch0015wsupw80m6ngy","tag_id":"cihhhqfck0017wsupzp2k0z87","_id":"cihhhqfck0018wsup95mpn1zn"},{"post_id":"cihhhqfcm0019wsupoqhddfhh","tag_id":"cihhhqfco001bwsuppxojcrh7","_id":"cihhhqfcp001ewsupehxxeqph"},{"post_id":"cihhhqfcm0019wsupoqhddfhh","tag_id":"cihhhqfco001cwsup8qdvm6f7","_id":"cihhhqfcp001fwsup4f9kmdiz"},{"post_id":"cihhhqfcq001gwsupbyvzo7xy","tag_id":"cihhhqfcs001iwsuplsd20ye9","_id":"cihhhqfct001lwsupwk71iomt"},{"post_id":"cihhhqfcq001gwsupbyvzo7xy","tag_id":"cihhhqfcs001jwsuplcrbv5jp","_id":"cihhhqfct001mwsuprnlzutjl"},{"post_id":"cihhhqfcu001nwsup556hf67n","tag_id":"cihhhqfcv001pwsupqbjig0oe","_id":"cihhhqfcw001swsupjfwa53pb"},{"post_id":"cihhhqfcu001nwsup556hf67n","tag_id":"cihhhqfcw001qwsupuvsh544g","_id":"cihhhqfcw001twsupp883aful"},{"post_id":"cihhhqfcu001nwsup556hf67n","tag_id":"cihhhqfcs001iwsuplsd20ye9","_id":"cihhhqfcx001uwsuprs6ymbkj"},{"post_id":"cihhhqfcu001nwsup556hf67n","tag_id":"cihhhqfcw001rwsupkd41v2k8","_id":"cihhhqfcx001vwsup9vrzi8uk"}],"Tag":[{"name":"hexo","_id":"cihhhqfbs0008wsupfjv4vnem"},{"name":"swiftype","_id":"cihhhqfbv0009wsuph490elpe"},{"name":"pacman","_id":"cihhhqfbw000bwsuph80biybd"},{"name":"Android Studio","_id":"cihhhqfc0000hwsupvgv4e8i4"},{"name":"Terminal","_id":"cihhhqfc0000iwsup592l7tte"},{"name":"ButterKnife","_id":"cihhhqfc5000owsupktrps6ws"},{"name":"InjectView","_id":"cihhhqfc6000pwsupdvuk1ofe"},{"name":"annotation","_id":"cihhhqfc6000qwsupl2o3k81v"},{"name":"Markdown","_id":"cihhhqfca000wwsupyx82lp5r"},{"name":"马克飞象","_id":"cihhhqfcc000xwsupmf0b3j96"},{"name":"MarkdownPad","_id":"cihhhqfce000zwsuptm3xlabn"},{"name":"MarkdownX","_id":"cihhhqfcf0010wsup8toxwfah"},{"name":"Log","_id":"cihhhqfck0017wsupzp2k0z87"},{"name":"Win10","_id":"cihhhqfco001bwsuppxojcrh7"},{"name":"快捷键","_id":"cihhhqfco001cwsup8qdvm6f7"},{"name":"重载","_id":"cihhhqfcs001iwsuplsd20ye9"},{"name":"java","_id":"cihhhqfcs001jwsuplcrbv5jp"},{"name":"动态绑定","_id":"cihhhqfcv001pwsupqbjig0oe"},{"name":"静态绑定","_id":"cihhhqfcw001qwsupuvsh544g"},{"name":"重写","_id":"cihhhqfcw001rwsupkd41v2k8"}]}}